"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@sanity+client@6.28.4_debug@4.4.0";
exports.ids = ["vendor-chunks/@sanity+client@6.28.4_debug@4.4.0"];
exports.modules = {

/***/ "(action-browser)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ C),\n/* harmony export */   stegaClean: () => (/* binding */ stegaClean),\n/* harmony export */   vercelStegaCleanAll: () => (/* binding */ vercelStegaCleanAll)\n/* harmony export */ });\nvar s = { 0: 8203, 1: 8204, 2: 8205, 3: 8290, 4: 8291, 5: 8288, 6: 65279, 7: 8289, 8: 119155, 9: 119156, a: 119157, b: 119158, c: 119159, d: 119160, e: 119161, f: 119162 }, c = { 0: 8203, 1: 8204, 2: 8205, 3: 65279 }, u = new Array(4).fill(String.fromCodePoint(c[0])).join(\"\");\nfunction E(t) {\n  let e = JSON.stringify(t);\n  return `${u}${Array.from(e).map((r) => {\n    let n = r.charCodeAt(0);\n    if (n > 255) throw new Error(`Only ASCII edit info can be encoded. Error attempting to encode ${e} on character ${r} (${n})`);\n    return Array.from(n.toString(4).padStart(4, \"0\")).map((o) => String.fromCodePoint(c[o])).join(\"\");\n  }).join(\"\")}`;\n}\nfunction I(t) {\n  return !Number.isNaN(Number(t)) || /[a-z]/i.test(t) && !/\\d+(?:[-:\\/]\\d+){2}(?:T\\d+(?:[-:\\/]\\d+){1,2}(\\.\\d+)?Z?)?/.test(t) ? !1 : !!Date.parse(t);\n}\nfunction T(t) {\n  try {\n    new URL(t, t.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n  } catch {\n    return !1;\n  }\n  return !0;\n}\nfunction C(t, e, r = \"auto\") {\n  return r === !0 || r === \"auto\" && (I(t) || T(t)) ? t : `${t}${E(e)}`;\n}\nObject.fromEntries(Object.entries(c).map((t) => t.reverse()));\nObject.fromEntries(Object.entries(s).map((t) => t.reverse()));\nvar S = `${Object.values(s).map((t) => `\\\\u{${t.toString(16)}}`).join(\"\")}`, f = new RegExp(`[${S}]{4,}`, \"gu\");\nfunction _(t) {\n  var e;\n  return { cleaned: t.replace(f, \"\"), encoded: ((e = t.match(f)) == null ? void 0 : e[0]) || \"\" };\n}\nfunction O(t) {\n  return t && JSON.parse(_(JSON.stringify(t)).cleaned);\n}\nfunction stegaClean(result) {\n  return O(result);\n}\nconst vercelStegaCleanAll = stegaClean;\n\n//# sourceMappingURL=stegaClean.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2FuaXR5K2NsaWVudEA2LjI4LjRfZGVidWdANC40LjAvbm9kZV9tb2R1bGVzL0BzYW5pdHkvY2xpZW50L2Rpc3QvX2NodW5rcy1lcy9zdGVnYUNsZWFuLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLFVBQVUsaUtBQWlLLFFBQVEscUNBQXFDO0FBQ3hOO0FBQ0E7QUFDQSxZQUFZLEVBQUUsRUFBRTtBQUNoQjtBQUNBLG9HQUFvRyxHQUFHLGVBQWUsR0FBRyxHQUFHLEVBQUU7QUFDOUg7QUFDQSxHQUFHLFdBQVc7QUFDZDtBQUNBO0FBQ0EsNEVBQTRFLEVBQUUscUJBQXFCLElBQUk7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxFQUFFLEVBQUUsS0FBSztBQUN0RTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlDQUFpQyxFQUFFLGdCQUFnQixZQUFZLHNCQUFzQixFQUFFLEVBQUUsR0FBRztBQUN2RztBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFLRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvcGV0cm9rdmFydHNpYW55aS9jb2RlL2dlb211bmR1cy13ZWJzaXRlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2FuaXR5K2NsaWVudEA2LjI4LjRfZGVidWdANC40LjAvbm9kZV9tb2R1bGVzL0BzYW5pdHkvY2xpZW50L2Rpc3QvX2NodW5rcy1lcy9zdGVnYUNsZWFuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBzID0geyAwOiA4MjAzLCAxOiA4MjA0LCAyOiA4MjA1LCAzOiA4MjkwLCA0OiA4MjkxLCA1OiA4Mjg4LCA2OiA2NTI3OSwgNzogODI4OSwgODogMTE5MTU1LCA5OiAxMTkxNTYsIGE6IDExOTE1NywgYjogMTE5MTU4LCBjOiAxMTkxNTksIGQ6IDExOTE2MCwgZTogMTE5MTYxLCBmOiAxMTkxNjIgfSwgYyA9IHsgMDogODIwMywgMTogODIwNCwgMjogODIwNSwgMzogNjUyNzkgfSwgdSA9IG5ldyBBcnJheSg0KS5maWxsKFN0cmluZy5mcm9tQ29kZVBvaW50KGNbMF0pKS5qb2luKFwiXCIpO1xuZnVuY3Rpb24gRSh0KSB7XG4gIGxldCBlID0gSlNPTi5zdHJpbmdpZnkodCk7XG4gIHJldHVybiBgJHt1fSR7QXJyYXkuZnJvbShlKS5tYXAoKHIpID0+IHtcbiAgICBsZXQgbiA9IHIuY2hhckNvZGVBdCgwKTtcbiAgICBpZiAobiA+IDI1NSkgdGhyb3cgbmV3IEVycm9yKGBPbmx5IEFTQ0lJIGVkaXQgaW5mbyBjYW4gYmUgZW5jb2RlZC4gRXJyb3IgYXR0ZW1wdGluZyB0byBlbmNvZGUgJHtlfSBvbiBjaGFyYWN0ZXIgJHtyfSAoJHtufSlgKTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShuLnRvU3RyaW5nKDQpLnBhZFN0YXJ0KDQsIFwiMFwiKSkubWFwKChvKSA9PiBTdHJpbmcuZnJvbUNvZGVQb2ludChjW29dKSkuam9pbihcIlwiKTtcbiAgfSkuam9pbihcIlwiKX1gO1xufVxuZnVuY3Rpb24gSSh0KSB7XG4gIHJldHVybiAhTnVtYmVyLmlzTmFOKE51bWJlcih0KSkgfHwgL1thLXpdL2kudGVzdCh0KSAmJiAhL1xcZCsoPzpbLTpcXC9dXFxkKyl7Mn0oPzpUXFxkKyg/OlstOlxcL11cXGQrKXsxLDJ9KFxcLlxcZCspP1o/KT8vLnRlc3QodCkgPyAhMSA6ICEhRGF0ZS5wYXJzZSh0KTtcbn1cbmZ1bmN0aW9uIFQodCkge1xuICB0cnkge1xuICAgIG5ldyBVUkwodCwgdC5zdGFydHNXaXRoKFwiL1wiKSA/IFwiaHR0cHM6Ly9hY21lLmNvbVwiIDogdm9pZCAwKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuICExO1xuICB9XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIEModCwgZSwgciA9IFwiYXV0b1wiKSB7XG4gIHJldHVybiByID09PSAhMCB8fCByID09PSBcImF1dG9cIiAmJiAoSSh0KSB8fCBUKHQpKSA/IHQgOiBgJHt0fSR7RShlKX1gO1xufVxuT2JqZWN0LmZyb21FbnRyaWVzKE9iamVjdC5lbnRyaWVzKGMpLm1hcCgodCkgPT4gdC5yZXZlcnNlKCkpKTtcbk9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhzKS5tYXAoKHQpID0+IHQucmV2ZXJzZSgpKSk7XG52YXIgUyA9IGAke09iamVjdC52YWx1ZXMocykubWFwKCh0KSA9PiBgXFxcXHV7JHt0LnRvU3RyaW5nKDE2KX19YCkuam9pbihcIlwiKX1gLCBmID0gbmV3IFJlZ0V4cChgWyR7U31dezQsfWAsIFwiZ3VcIik7XG5mdW5jdGlvbiBfKHQpIHtcbiAgdmFyIGU7XG4gIHJldHVybiB7IGNsZWFuZWQ6IHQucmVwbGFjZShmLCBcIlwiKSwgZW5jb2RlZDogKChlID0gdC5tYXRjaChmKSkgPT0gbnVsbCA/IHZvaWQgMCA6IGVbMF0pIHx8IFwiXCIgfTtcbn1cbmZ1bmN0aW9uIE8odCkge1xuICByZXR1cm4gdCAmJiBKU09OLnBhcnNlKF8oSlNPTi5zdHJpbmdpZnkodCkpLmNsZWFuZWQpO1xufVxuZnVuY3Rpb24gc3RlZ2FDbGVhbihyZXN1bHQpIHtcbiAgcmV0dXJuIE8ocmVzdWx0KTtcbn1cbmNvbnN0IHZlcmNlbFN0ZWdhQ2xlYW5BbGwgPSBzdGVnYUNsZWFuO1xuZXhwb3J0IHtcbiAgQyxcbiAgc3RlZ2FDbGVhbixcbiAgdmVyY2VsU3RlZ2FDbGVhbkFsbFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0ZWdhQ2xlYW4uanMubWFwXG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeIntoResult: () => (/* binding */ encodeIntoResult),\n/* harmony export */   stegaEncodeSourceMap: () => (/* binding */ stegaEncodeSourceMap),\n/* harmony export */   stegaEncodeSourceMap$1: () => (/* binding */ stegaEncodeSourceMap$1)\n/* harmony export */ });\n/* harmony import */ var _stegaClean_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stegaClean.js */ \"(action-browser)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\");\n\nconst reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/;\nfunction isKeySegment(segment) {\n  return typeof segment == \"string\" ? reKeySegment.test(segment.trim()) : typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction toString(path) {\n  if (!Array.isArray(path))\n    throw new Error(\"Path is not an array\");\n  return path.reduce((target, segment, i) => {\n    const segmentType = typeof segment;\n    if (segmentType === \"number\")\n      return `${target}[${segment}]`;\n    if (segmentType === \"string\")\n      return `${target}${i === 0 ? \"\" : \".\"}${segment}`;\n    if (isKeySegment(segment) && segment._key)\n      return `${target}[_key==\"${segment._key}\"]`;\n    if (Array.isArray(segment)) {\n      const [from, to] = segment;\n      return `${target}[${from}:${to}]`;\n    }\n    throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``);\n  }, \"\");\n}\nconst ESCAPE = {\n  \"\\f\": \"\\\\f\",\n  \"\\n\": \"\\\\n\",\n  \"\\r\": \"\\\\r\",\n  \"\t\": \"\\\\t\",\n  \"'\": \"\\\\'\",\n  \"\\\\\": \"\\\\\\\\\"\n}, UNESCAPE = {\n  \"\\\\f\": \"\\f\",\n  \"\\\\n\": `\n`,\n  \"\\\\r\": \"\\r\",\n  \"\\\\t\": \"\t\",\n  \"\\\\'\": \"'\",\n  \"\\\\\\\\\": \"\\\\\"\n};\nfunction jsonPath(path) {\n  return `$${path.map((segment) => typeof segment == \"string\" ? `['${segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match) => ESCAPE[match])}']` : typeof segment == \"number\" ? `[${segment}]` : segment._key !== \"\" ? `[?(@._key=='${segment._key.replace(/['\\\\]/g, (match) => ESCAPE[match])}')]` : `[${segment._index}]`).join(\"\")}`;\n}\nfunction parseJsonPath(path) {\n  const parsed = [], parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g;\n  let match;\n  for (; (match = parseRe.exec(path)) !== null; ) {\n    if (match[1] !== void 0) {\n      const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m) => UNESCAPE[m]);\n      parsed.push(key);\n      continue;\n    }\n    if (match[2] !== void 0) {\n      parsed.push(parseInt(match[2], 10));\n      continue;\n    }\n    if (match[3] !== void 0) {\n      const _key = match[3].replace(/\\\\(\\\\')/g, (m) => UNESCAPE[m]);\n      parsed.push({\n        _key,\n        _index: -1\n      });\n      continue;\n    }\n  }\n  return parsed;\n}\nfunction jsonPathToStudioPath(path) {\n  return path.map((segment) => {\n    if (typeof segment == \"string\" || typeof segment == \"number\")\n      return segment;\n    if (segment._key !== \"\")\n      return { _key: segment._key };\n    if (segment._index !== -1)\n      return segment._index;\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n  });\n}\nfunction jsonPathToMappingPath(path) {\n  return path.map((segment) => {\n    if (typeof segment == \"string\" || typeof segment == \"number\")\n      return segment;\n    if (segment._index !== -1)\n      return segment._index;\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n  });\n}\nfunction resolveMapping(resultPath, csm) {\n  if (!csm?.mappings)\n    return;\n  const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));\n  if (csm.mappings[resultMappingPath] !== void 0)\n    return {\n      mapping: csm.mappings[resultMappingPath],\n      matchedPath: resultMappingPath,\n      pathSuffix: \"\"\n    };\n  const mappings = Object.entries(csm.mappings).filter(([key]) => resultMappingPath.startsWith(key)).sort(([key1], [key2]) => key2.length - key1.length);\n  if (mappings.length == 0)\n    return;\n  const [matchedPath, mapping] = mappings[0], pathSuffix = resultMappingPath.substring(matchedPath.length);\n  return { mapping, matchedPath, pathSuffix };\n}\nfunction isArray(value) {\n  return value !== null && Array.isArray(value);\n}\nfunction isRecord(value) {\n  return typeof value == \"object\" && value !== null;\n}\nfunction walkMap(value, mappingFn, path = []) {\n  if (isArray(value))\n    return value.map((v, idx) => {\n      if (isRecord(v)) {\n        const _key = v._key;\n        if (typeof _key == \"string\")\n          return walkMap(v, mappingFn, path.concat({ _key, _index: idx }));\n      }\n      return walkMap(v, mappingFn, path.concat(idx));\n    });\n  if (isRecord(value)) {\n    if (value._type === \"block\" || value._type === \"span\") {\n      const result = { ...value };\n      return value._type === \"block\" ? result.children = walkMap(value.children, mappingFn, path.concat(\"children\")) : value._type === \"span\" && (result.text = walkMap(value.text, mappingFn, path.concat(\"text\"))), result;\n    }\n    return Object.fromEntries(\n      Object.entries(value).map(([k, v]) => [k, walkMap(v, mappingFn, path.concat(k))])\n    );\n  }\n  return mappingFn(value, path);\n}\nfunction encodeIntoResult(result, csm, encoder) {\n  return walkMap(result, (value, path) => {\n    if (typeof value != \"string\")\n      return value;\n    const resolveMappingResult = resolveMapping(path, csm);\n    if (!resolveMappingResult)\n      return value;\n    const { mapping, matchedPath } = resolveMappingResult;\n    if (mapping.type !== \"value\" || mapping.source.type !== \"documentValue\")\n      return value;\n    const sourceDocument = csm.documents[mapping.source.document], sourcePath = csm.paths[mapping.source.path], matchPathSegments = parseJsonPath(matchedPath), fullSourceSegments = parseJsonPath(sourcePath).concat(path.slice(matchPathSegments.length));\n    return encoder({\n      sourcePath: fullSourceSegments,\n      sourceDocument,\n      resultPath: path,\n      value\n    });\n  });\n}\nconst DRAFTS_FOLDER = \"drafts\", VERSION_FOLDER = \"versions\", PATH_SEPARATOR = \".\", DRAFTS_PREFIX = `${DRAFTS_FOLDER}${PATH_SEPARATOR}`, VERSION_PREFIX = `${VERSION_FOLDER}${PATH_SEPARATOR}`;\nfunction isDraftId(id) {\n  return id.startsWith(DRAFTS_PREFIX);\n}\nfunction isVersionId(id) {\n  return id.startsWith(VERSION_PREFIX);\n}\nfunction isPublishedId(id) {\n  return !isDraftId(id) && !isVersionId(id);\n}\nfunction getVersionFromId(id) {\n  if (!isVersionId(id)) return;\n  const [_versionPrefix, versionId, ..._publishedId] = id.split(PATH_SEPARATOR);\n  return versionId;\n}\nfunction getPublishedId(id) {\n  return isVersionId(id) ? id.split(PATH_SEPARATOR).slice(2).join(PATH_SEPARATOR) : isDraftId(id) ? id.slice(DRAFTS_PREFIX.length) : id;\n}\nfunction createEditUrl(options) {\n  const {\n    baseUrl,\n    workspace: _workspace = \"default\",\n    tool: _tool = \"default\",\n    id: _id,\n    type,\n    path,\n    projectId,\n    dataset\n  } = options;\n  if (!baseUrl)\n    throw new Error(\"baseUrl is required\");\n  if (!path)\n    throw new Error(\"path is required\");\n  if (!_id)\n    throw new Error(\"id is required\");\n  if (baseUrl !== \"/\" && baseUrl.endsWith(\"/\"))\n    throw new Error(\"baseUrl must not end with a slash\");\n  const workspace = _workspace === \"default\" ? void 0 : _workspace, tool = _tool === \"default\" ? void 0 : _tool, id = getPublishedId(_id), stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path, searchParams = new URLSearchParams({\n    baseUrl,\n    id,\n    type,\n    path: stringifiedPath\n  });\n  if (workspace && searchParams.set(\"workspace\", workspace), tool && searchParams.set(\"tool\", tool), projectId && searchParams.set(\"projectId\", projectId), dataset && searchParams.set(\"dataset\", dataset), isPublishedId(_id))\n    searchParams.set(\"perspective\", \"published\");\n  else if (isVersionId(_id)) {\n    const versionId = getVersionFromId(_id);\n    searchParams.set(\"perspective\", versionId);\n  }\n  const segments = [baseUrl === \"/\" ? \"\" : baseUrl];\n  workspace && segments.push(workspace);\n  const routerParams = [\n    \"mode=presentation\",\n    `id=${id}`,\n    `type=${type}`,\n    `path=${encodeURIComponent(stringifiedPath)}`\n  ];\n  return tool && routerParams.push(`tool=${tool}`), segments.push(\"intent\", \"edit\", `${routerParams.join(\";\")}?${searchParams}`), segments.join(\"/\");\n}\nfunction resolveStudioBaseRoute(studioUrl) {\n  let baseUrl = typeof studioUrl == \"string\" ? studioUrl : studioUrl.baseUrl;\n  return baseUrl !== \"/\" && (baseUrl = baseUrl.replace(/\\/$/, \"\")), typeof studioUrl == \"string\" ? { baseUrl } : { ...studioUrl, baseUrl };\n}\nconst filterDefault = ({ sourcePath, resultPath, value }) => {\n  if (isValidDate(value) || isValidURL(value))\n    return !1;\n  const endPath = sourcePath.at(-1);\n  return !(sourcePath.at(-2) === \"slug\" && endPath === \"current\" || typeof endPath == \"string\" && (endPath.startsWith(\"_\") || endPath.endsWith(\"Id\")) || sourcePath.some(\n    (path) => path === \"meta\" || path === \"metadata\" || path === \"openGraph\" || path === \"seo\"\n  ) || hasTypeLike(sourcePath) || hasTypeLike(resultPath) || typeof endPath == \"string\" && denylist.has(endPath));\n}, denylist = /* @__PURE__ */ new Set([\n  \"color\",\n  \"colour\",\n  \"currency\",\n  \"email\",\n  \"format\",\n  \"gid\",\n  \"hex\",\n  \"href\",\n  \"hsl\",\n  \"hsla\",\n  \"icon\",\n  \"id\",\n  \"index\",\n  \"key\",\n  \"language\",\n  \"layout\",\n  \"link\",\n  \"linkAction\",\n  \"locale\",\n  \"lqip\",\n  \"page\",\n  \"path\",\n  \"ref\",\n  \"rgb\",\n  \"rgba\",\n  \"route\",\n  \"secret\",\n  \"slug\",\n  \"status\",\n  \"tag\",\n  \"template\",\n  \"theme\",\n  \"type\",\n  \"textTheme\",\n  \"unit\",\n  \"url\",\n  \"username\",\n  \"variant\",\n  \"website\"\n]);\nfunction isValidDate(dateString) {\n  return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? !!Date.parse(dateString) : !1;\n}\nfunction isValidURL(url) {\n  try {\n    new URL(url, url.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n  } catch {\n    return !1;\n  }\n  return !0;\n}\nfunction hasTypeLike(path) {\n  return path.some((segment) => typeof segment == \"string\" && segment.match(/type/i) !== null);\n}\nconst TRUNCATE_LENGTH = 20;\nfunction stegaEncodeSourceMap(result, resultSourceMap, config) {\n  const { filter, logger, enabled } = config;\n  if (!enabled) {\n    const msg = \"config.enabled must be true, don't call this function otherwise\";\n    throw logger?.error?.(`[@sanity/client]: ${msg}`, { result, resultSourceMap, config }), new TypeError(msg);\n  }\n  if (!resultSourceMap)\n    return logger?.error?.(\"[@sanity/client]: Missing Content Source Map from response body\", {\n      result,\n      resultSourceMap,\n      config\n    }), result;\n  if (!config.studioUrl) {\n    const msg = \"config.studioUrl must be defined\";\n    throw logger?.error?.(`[@sanity/client]: ${msg}`, { result, resultSourceMap, config }), new TypeError(msg);\n  }\n  const report = {\n    encoded: [],\n    skipped: []\n  }, resultWithStega = encodeIntoResult(\n    result,\n    resultSourceMap,\n    ({ sourcePath, sourceDocument, resultPath, value }) => {\n      if ((typeof filter == \"function\" ? filter({ sourcePath, resultPath, filterDefault, sourceDocument, value }) : filterDefault({ sourcePath, resultPath, value })) === !1)\n        return logger && report.skipped.push({\n          path: prettyPathForLogging(sourcePath),\n          value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n          length: value.length\n        }), value;\n      logger && report.encoded.push({\n        path: prettyPathForLogging(sourcePath),\n        value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n        length: value.length\n      });\n      const { baseUrl, workspace, tool } = resolveStudioBaseRoute(\n        typeof config.studioUrl == \"function\" ? config.studioUrl(sourceDocument) : config.studioUrl\n      );\n      if (!baseUrl) return value;\n      const { _id: id, _type: type, _projectId: projectId, _dataset: dataset } = sourceDocument;\n      return (0,_stegaClean_js__WEBPACK_IMPORTED_MODULE_0__.C)(\n        value,\n        {\n          origin: \"sanity.io\",\n          href: createEditUrl({\n            baseUrl,\n            workspace,\n            tool,\n            id,\n            type,\n            path: sourcePath,\n            ...!config.omitCrossDatasetReferenceData && { dataset, projectId }\n          })\n        },\n        // We use custom logic to determine if we should skip encoding\n        !1\n      );\n    }\n  );\n  if (logger) {\n    const isSkipping = report.skipped.length, isEncoding = report.encoded.length;\n    if ((isSkipping || isEncoding) && ((logger?.groupCollapsed || logger.log)?.(\"[@sanity/client]: Encoding source map into result\"), logger.log?.(\n      `[@sanity/client]: Paths encoded: ${report.encoded.length}, skipped: ${report.skipped.length}`\n    )), report.encoded.length > 0 && (logger?.log?.(\"[@sanity/client]: Table of encoded paths\"), (logger?.table || logger.log)?.(report.encoded)), report.skipped.length > 0) {\n      const skipped = /* @__PURE__ */ new Set();\n      for (const { path } of report.skipped)\n        skipped.add(path.replace(reKeySegment, \"0\").replace(/\\[\\d+\\]/g, \"[]\"));\n      logger?.log?.(\"[@sanity/client]: List of skipped paths\", [...skipped.values()]);\n    }\n    (isSkipping || isEncoding) && logger?.groupEnd?.();\n  }\n  return resultWithStega;\n}\nfunction prettyPathForLogging(path) {\n  return toString(jsonPathToStudioPath(path));\n}\nvar stegaEncodeSourceMap$1 = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  stegaEncodeSourceMap\n});\n\n//# sourceMappingURL=stegaEncodeSourceMap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/index.browser.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/index.browser.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePatch: () => (/* binding */ BasePatch),\n/* harmony export */   BaseTransaction: () => (/* binding */ BaseTransaction),\n/* harmony export */   ChannelError: () => (/* binding */ ChannelError),\n/* harmony export */   ClientError: () => (/* binding */ ClientError),\n/* harmony export */   ConnectionFailedError: () => (/* binding */ ConnectionFailedError),\n/* harmony export */   CorsOriginError: () => (/* binding */ CorsOriginError),\n/* harmony export */   DisconnectError: () => (/* binding */ DisconnectError),\n/* harmony export */   MessageError: () => (/* binding */ MessageError),\n/* harmony export */   MessageParseError: () => (/* binding */ MessageParseError),\n/* harmony export */   ObservablePatch: () => (/* binding */ ObservablePatch),\n/* harmony export */   ObservableSanityClient: () => (/* binding */ ObservableSanityClient),\n/* harmony export */   ObservableTransaction: () => (/* binding */ ObservableTransaction),\n/* harmony export */   Patch: () => (/* binding */ Patch),\n/* harmony export */   SanityClient: () => (/* binding */ SanityClient),\n/* harmony export */   ServerError: () => (/* binding */ ServerError),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   connectEventSource: () => (/* binding */ connectEventSource),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   \"default\": () => (/* binding */ deprecatedCreateClient),\n/* harmony export */   requester: () => (/* binding */ requester),\n/* harmony export */   unstable__adapter: () => (/* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_0__.adapter),\n/* harmony export */   unstable__environment: () => (/* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_0__.environment),\n/* harmony export */   validateApiPerspective: () => (/* binding */ validateApiPerspective)\n/* harmony export */ });\n/* harmony import */ var get_it__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! get-it */ \"(action-browser)/./node_modules/.pnpm/get-it@8.6.7_debug@4.4.0/node_modules/get-it/dist/index.react-server.js\");\n/* harmony import */ var get_it_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! get-it/middleware */ \"(action-browser)/./node_modules/.pnpm/get-it@8.6.7_debug@4.4.0/node_modules/get-it/dist/middleware.browser.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/defer.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/isObservable.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/of.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/from.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/lastValueFrom.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/catchError.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/concat.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/timer.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/throwError.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/tap.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/finalize.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/share.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/merge.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! rxjs */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/empty.js\");\n/* harmony import */ var _chunks_es_stegaClean_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_chunks-es/stegaClean.js */ \"(action-browser)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ \"(action-browser)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/cjs/operators/index.js\");\n\n\n\n\n\n\nclass ClientError extends Error {\n  response;\n  statusCode = 400;\n  responseBody;\n  details;\n  constructor(res) {\n    const props = extractErrorProps(res);\n    super(props.message), Object.assign(this, props);\n  }\n}\nclass ServerError extends Error {\n  response;\n  statusCode = 500;\n  responseBody;\n  details;\n  constructor(res) {\n    const props = extractErrorProps(res);\n    super(props.message), Object.assign(this, props);\n  }\n}\nfunction extractErrorProps(res) {\n  const body = res.body, props = {\n    response: res,\n    statusCode: res.statusCode,\n    responseBody: stringifyBody(body, res),\n    message: \"\",\n    details: void 0\n  };\n  if (body.error && body.message)\n    return props.message = `${body.error} - ${body.message}`, props;\n  if (isMutationError(body) || isActionError(body)) {\n    const allItems = body.error.items || [], items = allItems.slice(0, 5).map((item) => item.error?.description).filter(Boolean);\n    let itemsStr = items.length ? `:\n- ${items.join(`\n- `)}` : \"\";\n    return allItems.length > 5 && (itemsStr += `\n...and ${allItems.length - 5} more`), props.message = `${body.error.description}${itemsStr}`, props.details = body.error, props;\n  }\n  return body.error && body.error.description ? (props.message = body.error.description, props.details = body.error, props) : (props.message = body.error || body.message || httpErrorMessage(res), props);\n}\nfunction isMutationError(body) {\n  return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"mutationError\" && typeof body.error.description == \"string\";\n}\nfunction isActionError(body) {\n  return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"actionError\" && typeof body.error.description == \"string\";\n}\nfunction isPlainObject(obj) {\n  return typeof obj == \"object\" && obj !== null && !Array.isArray(obj);\n}\nfunction httpErrorMessage(res) {\n  const statusMessage = res.statusMessage ? ` ${res.statusMessage}` : \"\";\n  return `${res.method}-request to ${res.url} resulted in HTTP ${res.statusCode}${statusMessage}`;\n}\nfunction stringifyBody(body, res) {\n  return (res.headers[\"content-type\"] || \"\").toLowerCase().indexOf(\"application/json\") !== -1 ? JSON.stringify(body, null, 2) : body;\n}\nclass CorsOriginError extends Error {\n  projectId;\n  addOriginUrl;\n  constructor({ projectId: projectId2 }) {\n    super(\"CorsOriginError\"), this.name = \"CorsOriginError\", this.projectId = projectId2;\n    const url = new URL(`https://sanity.io/manage/project/${projectId2}/api`);\n    if (typeof location < \"u\") {\n      const { origin } = location;\n      url.searchParams.set(\"cors\", \"add\"), url.searchParams.set(\"origin\", origin), this.addOriginUrl = url, this.message = `The current origin is not allowed to connect to the Live Content API. Add it here: ${url}`;\n    } else\n      this.message = `The current origin is not allowed to connect to the Live Content API. Change your configuration here: ${url}`;\n  }\n}\nconst httpError = {\n  onResponse: (res) => {\n    if (res.statusCode >= 500)\n      throw new ServerError(res);\n    if (res.statusCode >= 400)\n      throw new ClientError(res);\n    return res;\n  }\n};\nfunction printWarnings() {\n  const seen = {};\n  return {\n    onResponse: (res) => {\n      const warn = res.headers[\"x-sanity-warning\"], warnings = Array.isArray(warn) ? warn : [warn];\n      for (const msg of warnings)\n        !msg || seen[msg] || (seen[msg] = !0, console.warn(msg));\n      return res;\n    }\n  };\n}\nfunction defineHttpRequest(envMiddleware2) {\n  return (0,get_it__WEBPACK_IMPORTED_MODULE_0__.getIt)([\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.retry)({ shouldRetry }),\n    ...envMiddleware2,\n    printWarnings(),\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.jsonRequest)(),\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.jsonResponse)(),\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.progress)(),\n    httpError,\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.observable)({ implementation: rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable })\n  ]);\n}\nfunction shouldRetry(err, attempt, options) {\n  if (options.maxRetries === 0) return !1;\n  const isSafe = options.method === \"GET\" || options.method === \"HEAD\", isQuery = (options.uri || options.url).startsWith(\"/data/query\"), isRetriableResponse = err.response && (err.response.statusCode === 429 || err.response.statusCode === 502 || err.response.statusCode === 503);\n  return (isSafe || isQuery) && isRetriableResponse ? !0 : get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.retry.shouldRetry(err, attempt, options);\n}\nconst BASE_URL = \"https://www.sanity.io/help/\";\nfunction generateHelpUrl(slug) {\n  return BASE_URL + slug;\n}\nconst VALID_ASSET_TYPES = [\"image\", \"file\"], VALID_INSERT_LOCATIONS = [\"before\", \"after\", \"replace\"], dataset = (name) => {\n  if (!/^(~[a-z0-9]{1}[-\\w]{0,63}|[a-z0-9]{1}[-\\w]{0,63})$/.test(name))\n    throw new Error(\n      \"Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters\"\n    );\n}, projectId = (id) => {\n  if (!/^[-a-z0-9]+$/i.test(id))\n    throw new Error(\"`projectId` can only contain only a-z, 0-9 and dashes\");\n}, validateAssetType = (type) => {\n  if (VALID_ASSET_TYPES.indexOf(type) === -1)\n    throw new Error(`Invalid asset type: ${type}. Must be one of ${VALID_ASSET_TYPES.join(\", \")}`);\n}, validateObject = (op, val) => {\n  if (val === null || typeof val != \"object\" || Array.isArray(val))\n    throw new Error(`${op}() takes an object of properties`);\n}, validateDocumentId = (op, id) => {\n  if (typeof id != \"string\" || !/^[a-z0-9_][a-z0-9_.-]{0,127}$/i.test(id) || id.includes(\"..\"))\n    throw new Error(`${op}(): \"${id}\" is not a valid document ID`);\n}, requireDocumentId = (op, doc) => {\n  if (!doc._id)\n    throw new Error(`${op}() requires that the document contains an ID (\"_id\" property)`);\n  validateDocumentId(op, doc._id);\n}, validateInsert = (at, selector, items) => {\n  const signature = \"insert(at, selector, items)\";\n  if (VALID_INSERT_LOCATIONS.indexOf(at) === -1) {\n    const valid = VALID_INSERT_LOCATIONS.map((loc) => `\"${loc}\"`).join(\", \");\n    throw new Error(`${signature} takes an \"at\"-argument which is one of: ${valid}`);\n  }\n  if (typeof selector != \"string\")\n    throw new Error(`${signature} takes a \"selector\"-argument which must be a string`);\n  if (!Array.isArray(items))\n    throw new Error(`${signature} takes an \"items\"-argument which must be an array`);\n}, hasDataset = (config) => {\n  if (!config.dataset)\n    throw new Error(\"`dataset` must be provided to perform queries\");\n  return config.dataset || \"\";\n}, requestTag = (tag) => {\n  if (typeof tag != \"string\" || !/^[a-z0-9._-]{1,75}$/i.test(tag))\n    throw new Error(\n      \"Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.\"\n    );\n  return tag;\n};\nfunction once(fn) {\n  let didCall = !1, returnValue;\n  return (...args) => (didCall || (returnValue = fn(...args), didCall = !0), returnValue);\n}\nconst createWarningPrinter = (message) => (\n  // eslint-disable-next-line no-console\n  once((...args) => console.warn(message.join(\" \"), ...args))\n), printCdnAndWithCredentialsWarning = createWarningPrinter([\n  \"Because you set `withCredentials` to true, we will override your `useCdn`\",\n  \"setting to be false since (cookie-based) credentials are never set on the CDN\"\n]), printCdnWarning = createWarningPrinter([\n  \"Since you haven't set a value for `useCdn`, we will deliver content using our\",\n  \"global, edge-cached API-CDN. If you wish to have content delivered faster, set\",\n  \"`useCdn: false` to use the Live API. Note: You may incur higher costs using the live API.\"\n]), printCdnPreviewDraftsWarning = createWarningPrinter([\n  \"The Sanity client is configured with the `perspective` set to `drafts` or `previewDrafts`, which doesn't support the API-CDN.\",\n  \"The Live API will be used instead. Set `useCdn: false` in your configuration to hide this warning.\"\n]), printPreviewDraftsDeprecationWarning = createWarningPrinter([\n  \"The `previewDrafts` perspective has been renamed to  `drafts` and will be removed in a future API version\"\n]), printBrowserTokenWarning = createWarningPrinter([\n  \"You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.\",\n  `See ${generateHelpUrl(\n    \"js-client-browser-token\"\n  )} for more information and how to hide this warning.`\n]), printCredentialedTokenWarning = createWarningPrinter([\n  \"You have configured Sanity client to use a token, but also provided `withCredentials: true`.\",\n  \"This is no longer supported - only token will be used - remove `withCredentials: true`.\"\n]), printNoApiVersionSpecifiedWarning = createWarningPrinter([\n  \"Using the Sanity client without specifying an API version is deprecated.\",\n  `See ${generateHelpUrl(\"js-client-api-version\")}`\n]), printNoDefaultExport = createWarningPrinter([\n  \"The default export of @sanity/client has been deprecated. Use the named export `createClient` instead.\"\n]), defaultCdnHost = \"apicdn.sanity.io\", defaultConfig = {\n  apiHost: \"https://api.sanity.io\",\n  apiVersion: \"1\",\n  useProjectHostname: !0,\n  stega: { enabled: !1 }\n}, LOCALHOSTS = [\"localhost\", \"127.0.0.1\", \"0.0.0.0\"], isLocal = (host) => LOCALHOSTS.indexOf(host) !== -1;\nfunction validateApiVersion(apiVersion) {\n  if (apiVersion === \"1\" || apiVersion === \"X\")\n    return;\n  const apiDate = new Date(apiVersion);\n  if (!(/^\\d{4}-\\d{2}-\\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0))\n    throw new Error(\"Invalid API version string, expected `1` or date in format `YYYY-MM-DD`\");\n}\nfunction validateApiPerspective(perspective) {\n  if (Array.isArray(perspective) && perspective.length > 1 && perspective.includes(\"raw\"))\n    throw new TypeError(\n      'Invalid API perspective value: \"raw\". The raw-perspective can not be combined with other perspectives'\n    );\n}\nconst initConfig = (config, prevConfig) => {\n  const specifiedConfig = {\n    ...prevConfig,\n    ...config,\n    stega: {\n      ...typeof prevConfig.stega == \"boolean\" ? { enabled: prevConfig.stega } : prevConfig.stega || defaultConfig.stega,\n      ...typeof config.stega == \"boolean\" ? { enabled: config.stega } : config.stega || {}\n    }\n  };\n  specifiedConfig.apiVersion || printNoApiVersionSpecifiedWarning();\n  const newConfig = {\n    ...defaultConfig,\n    ...specifiedConfig\n  }, projectBased = newConfig.useProjectHostname;\n  if (typeof Promise > \"u\") {\n    const helpUrl = generateHelpUrl(\"js-client-promise-polyfill\");\n    throw new Error(`No native Promise-implementation found, polyfill needed - see ${helpUrl}`);\n  }\n  if (projectBased && !newConfig.projectId)\n    throw new Error(\"Configuration must contain `projectId`\");\n  if (typeof newConfig.perspective < \"u\" && validateApiPerspective(newConfig.perspective), \"encodeSourceMap\" in newConfig)\n    throw new Error(\n      \"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMap' is not supported in '@sanity/client'. Did you mean 'stega.enabled'?\"\n    );\n  if (\"encodeSourceMapAtPath\" in newConfig)\n    throw new Error(\n      \"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMapAtPath' is not supported in '@sanity/client'. Did you mean 'stega.filter'?\"\n    );\n  if (typeof newConfig.stega.enabled != \"boolean\")\n    throw new Error(`stega.enabled must be a boolean, received ${newConfig.stega.enabled}`);\n  if (newConfig.stega.enabled && newConfig.stega.studioUrl === void 0)\n    throw new Error(\"stega.studioUrl must be defined when stega.enabled is true\");\n  if (newConfig.stega.enabled && typeof newConfig.stega.studioUrl != \"string\" && typeof newConfig.stega.studioUrl != \"function\")\n    throw new Error(\n      `stega.studioUrl must be a string or a function, received ${newConfig.stega.studioUrl}`\n    );\n  const isBrowser = typeof window < \"u\" && window.location && window.location.hostname, isLocalhost = isBrowser && isLocal(window.location.hostname), hasToken = !!newConfig.token;\n  newConfig.withCredentials && hasToken && (printCredentialedTokenWarning(), newConfig.withCredentials = !1), isBrowser && isLocalhost && hasToken && newConfig.ignoreBrowserTokenWarning !== !0 ? printBrowserTokenWarning() : typeof newConfig.useCdn > \"u\" && printCdnWarning(), projectBased && projectId(newConfig.projectId), newConfig.dataset && dataset(newConfig.dataset), \"requestTagPrefix\" in newConfig && (newConfig.requestTagPrefix = newConfig.requestTagPrefix ? requestTag(newConfig.requestTagPrefix).replace(/\\.+$/, \"\") : void 0), newConfig.apiVersion = `${newConfig.apiVersion}`.replace(/^v/, \"\"), newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost, newConfig.useCdn === !0 && newConfig.withCredentials && printCdnAndWithCredentialsWarning(), newConfig.useCdn = newConfig.useCdn !== !1 && !newConfig.withCredentials, validateApiVersion(newConfig.apiVersion);\n  const hostParts = newConfig.apiHost.split(\"://\", 2), protocol = hostParts[0], host = hostParts[1], cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host;\n  return newConfig.useProjectHostname ? (newConfig.url = `${protocol}://${newConfig.projectId}.${host}/v${newConfig.apiVersion}`, newConfig.cdnUrl = `${protocol}://${newConfig.projectId}.${cdnHost}/v${newConfig.apiVersion}`) : (newConfig.url = `${newConfig.apiHost}/v${newConfig.apiVersion}`, newConfig.cdnUrl = newConfig.url), newConfig;\n};\nclass ConnectionFailedError extends Error {\n  name = \"ConnectionFailedError\";\n}\nclass DisconnectError extends Error {\n  name = \"DisconnectError\";\n  reason;\n  constructor(message, reason, options = {}) {\n    super(message, options), this.reason = reason;\n  }\n}\nclass ChannelError extends Error {\n  name = \"ChannelError\";\n  data;\n  constructor(message, data) {\n    super(message), this.data = data;\n  }\n}\nclass MessageError extends Error {\n  name = \"MessageError\";\n  data;\n  constructor(message, data, options = {}) {\n    super(message, options), this.data = data;\n  }\n}\nclass MessageParseError extends Error {\n  name = \"MessageParseError\";\n}\nconst REQUIRED_EVENTS = [\"channelError\", \"disconnect\"];\nfunction connectEventSource(initEventSource, events) {\n  return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.defer)(() => {\n    const es = initEventSource();\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.isObservable)(es) ? es : (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(es);\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)((es) => connectWithESInstance(es, events)));\n}\nfunction connectWithESInstance(es, events) {\n  return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer) => {\n    const emitOpen = events.includes(\"open\"), emitReconnect = events.includes(\"reconnect\");\n    function onError(evt) {\n      if (\"data\" in evt) {\n        const [parseError, event] = parseEvent(evt);\n        observer.error(\n          parseError ? new MessageParseError(\"Unable to parse EventSource error message\", { cause: event }) : new MessageError((event?.data).message, event)\n        );\n        return;\n      }\n      es.readyState === es.CLOSED ? observer.error(new ConnectionFailedError(\"EventSource connection failed\")) : emitReconnect && observer.next({ type: \"reconnect\" });\n    }\n    function onOpen() {\n      observer.next({ type: \"open\" });\n    }\n    function onMessage(message) {\n      const [parseError, event] = parseEvent(message);\n      if (parseError) {\n        observer.error(\n          new MessageParseError(\"Unable to parse EventSource message\", { cause: parseError })\n        );\n        return;\n      }\n      if (message.type === \"channelError\") {\n        observer.error(new ChannelError(extractErrorMessage(event?.data), event.data));\n        return;\n      }\n      if (message.type === \"disconnect\") {\n        observer.error(\n          new DisconnectError(\n            `Server disconnected client: ${event.data?.reason || \"unknown error\"}`\n          )\n        );\n        return;\n      }\n      observer.next({\n        type: message.type,\n        id: message.lastEventId,\n        ...event.data ? { data: event.data } : {}\n      });\n    }\n    es.addEventListener(\"error\", onError), emitOpen && es.addEventListener(\"open\", onOpen);\n    const cleanedEvents = [.../* @__PURE__ */ new Set([...REQUIRED_EVENTS, ...events])].filter((type) => type !== \"error\" && type !== \"open\" && type !== \"reconnect\");\n    return cleanedEvents.forEach((type) => es.addEventListener(type, onMessage)), () => {\n      es.removeEventListener(\"error\", onError), emitOpen && es.removeEventListener(\"open\", onOpen), cleanedEvents.forEach((type) => es.removeEventListener(type, onMessage)), es.close();\n    };\n  });\n}\nfunction parseEvent(message) {\n  try {\n    const data = typeof message.data == \"string\" && JSON.parse(message.data);\n    return [\n      null,\n      {\n        type: message.type,\n        id: message.lastEventId,\n        ...isEmptyObject(data) ? {} : { data }\n      }\n    ];\n  } catch (err) {\n    return [err, null];\n  }\n}\nfunction extractErrorMessage(err) {\n  return err.error ? err.error.description ? err.error.description : typeof err.error == \"string\" ? err.error : JSON.stringify(err.error, null, 2) : err.message || \"Unknown listener error\";\n}\nfunction isEmptyObject(data) {\n  for (const _ in data)\n    return !1;\n  return !0;\n}\nfunction getSelection(sel) {\n  if (typeof sel == \"string\")\n    return { id: sel };\n  if (Array.isArray(sel))\n    return { query: \"*[_id in $ids]\", params: { ids: sel } };\n  if (typeof sel == \"object\" && sel !== null && \"query\" in sel && typeof sel.query == \"string\")\n    return \"params\" in sel && typeof sel.params == \"object\" && sel.params !== null ? { query: sel.query, params: sel.params } : { query: sel.query };\n  const selectionOpts = [\n    \"* Document ID (<docId>)\",\n    \"* Array of document IDs\",\n    \"* Object containing `query`\"\n  ].join(`\n`);\n  throw new Error(`Unknown selection - must be one of:\n\n${selectionOpts}`);\n}\nclass BasePatch {\n  selection;\n  operations;\n  constructor(selection, operations = {}) {\n    this.selection = selection, this.operations = operations;\n  }\n  /**\n   * Sets the given attributes to the document. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */\n  set(attrs) {\n    return this._assign(\"set\", attrs);\n  }\n  /**\n   * Sets the given attributes to the document if they are not currently set. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */\n  setIfMissing(attrs) {\n    return this._assign(\"setIfMissing\", attrs);\n  }\n  /**\n   * Performs a \"diff-match-patch\" operation on the string attributes provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to perform operation on. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"dmp\"\\}\n   */\n  diffMatchPatch(attrs) {\n    return validateObject(\"diffMatchPatch\", attrs), this._assign(\"diffMatchPatch\", attrs);\n  }\n  /**\n   * Unsets the attribute paths provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attribute paths to unset.\n   */\n  unset(attrs) {\n    if (!Array.isArray(attrs))\n      throw new Error(\"unset(attrs) takes an array of attributes to unset, non-array given\");\n    return this.operations = Object.assign({}, this.operations, { unset: attrs }), this;\n  }\n  /**\n   * Increment a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to increment, values representing the number to increment by.\n   */\n  inc(attrs) {\n    return this._assign(\"inc\", attrs);\n  }\n  /**\n   * Decrement a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to decrement, values representing the number to decrement by.\n   */\n  dec(attrs) {\n    return this._assign(\"dec\", attrs);\n  }\n  /**\n   * Provides methods for modifying arrays, by inserting, appending and replacing elements via a JSONPath expression.\n   *\n   * @param at - Location to insert at, relative to the given selector, or 'replace' the matched path\n   * @param selector - JSONPath expression, eg `comments[-1]` or `blocks[_key==\"abc123\"]`\n   * @param items - Array of items to insert/replace\n   */\n  insert(at, selector, items) {\n    return validateInsert(at, selector, items), this._assign(\"insert\", { [at]: selector, items });\n  }\n  /**\n   * Append the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to append to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to append to the array\n   */\n  append(selector, items) {\n    return this.insert(\"after\", `${selector}[-1]`, items);\n  }\n  /**\n   * Prepend the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to prepend to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to prepend to the array\n   */\n  prepend(selector, items) {\n    return this.insert(\"before\", `${selector}[0]`, items);\n  }\n  /**\n   * Change the contents of an array by removing existing elements and/or adding new elements.\n   *\n   * @param selector - Attribute or JSONPath expression for array\n   * @param start - Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.x\n   * @param deleteCount - An integer indicating the number of old array elements to remove.\n   * @param items - The elements to add to the array, beginning at the start index. If you don't specify any elements, splice() will only remove elements from the array.\n   */\n  splice(selector, start, deleteCount, items) {\n    const delAll = typeof deleteCount > \"u\" || deleteCount === -1, startIndex = start < 0 ? start - 1 : start, delCount = delAll ? -1 : Math.max(0, start + deleteCount), delRange = startIndex < 0 && delCount >= 0 ? \"\" : delCount, rangeSelector = `${selector}[${startIndex}:${delRange}]`;\n    return this.insert(\"replace\", rangeSelector, items || []);\n  }\n  /**\n   * Adds a revision clause, preventing the document from being patched if the `_rev` property does not match the given value\n   *\n   * @param rev - Revision to lock the patch to\n   */\n  ifRevisionId(rev) {\n    return this.operations.ifRevisionID = rev, this;\n  }\n  /**\n   * Return a plain JSON representation of the patch\n   */\n  serialize() {\n    return { ...getSelection(this.selection), ...this.operations };\n  }\n  /**\n   * Return a plain JSON representation of the patch\n   */\n  toJSON() {\n    return this.serialize();\n  }\n  /**\n   * Clears the patch of all operations\n   */\n  reset() {\n    return this.operations = {}, this;\n  }\n  _assign(op, props, merge2 = !0) {\n    return validateObject(op, props), this.operations = Object.assign({}, this.operations, {\n      [op]: Object.assign({}, merge2 && this.operations[op] || {}, props)\n    }), this;\n  }\n  _set(op, props) {\n    return this._assign(op, props, !1);\n  }\n}\nclass ObservablePatch extends BasePatch {\n  #client;\n  constructor(selection, operations, client) {\n    super(selection, operations), this.#client = client;\n  }\n  /**\n   * Clones the patch\n   */\n  clone() {\n    return new ObservablePatch(this.selection, { ...this.operations }, this.#client);\n  }\n  commit(options) {\n    if (!this.#client)\n      throw new Error(\n        \"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\"\n      );\n    const returnFirst = typeof this.selection == \"string\", opts = Object.assign({ returnFirst, returnDocuments: !0 }, options);\n    return this.#client.mutate({ patch: this.serialize() }, opts);\n  }\n}\nclass Patch extends BasePatch {\n  #client;\n  constructor(selection, operations, client) {\n    super(selection, operations), this.#client = client;\n  }\n  /**\n   * Clones the patch\n   */\n  clone() {\n    return new Patch(this.selection, { ...this.operations }, this.#client);\n  }\n  commit(options) {\n    if (!this.#client)\n      throw new Error(\n        \"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\"\n      );\n    const returnFirst = typeof this.selection == \"string\", opts = Object.assign({ returnFirst, returnDocuments: !0 }, options);\n    return this.#client.mutate({ patch: this.serialize() }, opts);\n  }\n}\nconst defaultMutateOptions = { returnDocuments: !1 };\nclass BaseTransaction {\n  operations;\n  trxId;\n  constructor(operations = [], transactionId) {\n    this.operations = operations, this.trxId = transactionId;\n  }\n  /**\n   * Creates a new Sanity document. If `_id` is provided and already exists, the mutation will fail. If no `_id` is given, one will automatically be generated by the database.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create. Requires a `_type` property.\n   */\n  create(doc) {\n    return validateObject(\"create\", doc), this._add({ create: doc });\n  }\n  /**\n   * Creates a new Sanity document. If a document with the same `_id` already exists, the create operation will be ignored.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create if it does not already exist. Requires `_id` and `_type` properties.\n   */\n  createIfNotExists(doc) {\n    const op = \"createIfNotExists\";\n    return validateObject(op, doc), requireDocumentId(op, doc), this._add({ [op]: doc });\n  }\n  /**\n   * Creates a new Sanity document, or replaces an existing one if the same `_id` is already used.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create or replace. Requires `_id` and `_type` properties.\n   */\n  createOrReplace(doc) {\n    const op = \"createOrReplace\";\n    return validateObject(op, doc), requireDocumentId(op, doc), this._add({ [op]: doc });\n  }\n  /**\n   * Deletes the document with the given document ID\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param documentId - Document ID to delete\n   */\n  delete(documentId) {\n    return validateDocumentId(\"delete\", documentId), this._add({ delete: { id: documentId } });\n  }\n  transactionId(id) {\n    return id ? (this.trxId = id, this) : this.trxId;\n  }\n  /**\n   * Return a plain JSON representation of the transaction\n   */\n  serialize() {\n    return [...this.operations];\n  }\n  /**\n   * Return a plain JSON representation of the transaction\n   */\n  toJSON() {\n    return this.serialize();\n  }\n  /**\n   * Clears the transaction of all operations\n   */\n  reset() {\n    return this.operations = [], this;\n  }\n  _add(mut) {\n    return this.operations.push(mut), this;\n  }\n}\nclass Transaction extends BaseTransaction {\n  #client;\n  constructor(operations, client, transactionId) {\n    super(operations, transactionId), this.#client = client;\n  }\n  /**\n   * Clones the transaction\n   */\n  clone() {\n    return new Transaction([...this.operations], this.#client, this.trxId);\n  }\n  commit(options) {\n    if (!this.#client)\n      throw new Error(\n        \"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\"\n      );\n    return this.#client.mutate(\n      this.serialize(),\n      Object.assign({ transactionId: this.trxId }, defaultMutateOptions, options || {})\n    );\n  }\n  patch(patchOrDocumentId, patchOps) {\n    const isBuilder = typeof patchOps == \"function\", isPatch = typeof patchOrDocumentId != \"string\" && patchOrDocumentId instanceof Patch, isMutationSelection = typeof patchOrDocumentId == \"object\" && (\"query\" in patchOrDocumentId || \"id\" in patchOrDocumentId);\n    if (isPatch)\n      return this._add({ patch: patchOrDocumentId.serialize() });\n    if (isBuilder) {\n      const patch = patchOps(new Patch(patchOrDocumentId, {}, this.#client));\n      if (!(patch instanceof Patch))\n        throw new Error(\"function passed to `patch()` must return the patch\");\n      return this._add({ patch: patch.serialize() });\n    }\n    if (isMutationSelection) {\n      const patch = new Patch(patchOrDocumentId, patchOps || {}, this.#client);\n      return this._add({ patch: patch.serialize() });\n    }\n    return this._add({ patch: { id: patchOrDocumentId, ...patchOps } });\n  }\n}\nclass ObservableTransaction extends BaseTransaction {\n  #client;\n  constructor(operations, client, transactionId) {\n    super(operations, transactionId), this.#client = client;\n  }\n  /**\n   * Clones the transaction\n   */\n  clone() {\n    return new ObservableTransaction([...this.operations], this.#client, this.trxId);\n  }\n  commit(options) {\n    if (!this.#client)\n      throw new Error(\n        \"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\"\n      );\n    return this.#client.mutate(\n      this.serialize(),\n      Object.assign({ transactionId: this.trxId }, defaultMutateOptions, options || {})\n    );\n  }\n  patch(patchOrDocumentId, patchOps) {\n    const isBuilder = typeof patchOps == \"function\";\n    if (typeof patchOrDocumentId != \"string\" && patchOrDocumentId instanceof ObservablePatch)\n      return this._add({ patch: patchOrDocumentId.serialize() });\n    if (isBuilder) {\n      const patch = patchOps(new ObservablePatch(patchOrDocumentId, {}, this.#client));\n      if (!(patch instanceof ObservablePatch))\n        throw new Error(\"function passed to `patch()` must return the patch\");\n      return this._add({ patch: patch.serialize() });\n    }\n    return this._add({ patch: { id: patchOrDocumentId, ...patchOps } });\n  }\n}\nconst projectHeader = \"X-Sanity-Project-ID\";\nfunction requestOptions(config, overrides = {}) {\n  const headers = {}, token = overrides.token || config.token;\n  token && (headers.Authorization = `Bearer ${token}`), !overrides.useGlobalApi && !config.useProjectHostname && config.projectId && (headers[projectHeader] = config.projectId);\n  const withCredentials = !!(typeof overrides.withCredentials > \"u\" ? config.withCredentials : overrides.withCredentials), timeout = typeof overrides.timeout > \"u\" ? config.timeout : overrides.timeout;\n  return Object.assign({}, overrides, {\n    headers: Object.assign({}, headers, overrides.headers || {}),\n    timeout: typeof timeout > \"u\" ? 5 * 60 * 1e3 : timeout,\n    proxy: overrides.proxy || config.proxy,\n    json: !0,\n    withCredentials,\n    fetch: typeof overrides.fetch == \"object\" && typeof config.fetch == \"object\" ? { ...config.fetch, ...overrides.fetch } : overrides.fetch || config.fetch\n  });\n}\nconst encodeQueryString = ({\n  query,\n  params = {},\n  options = {}\n}) => {\n  const searchParams = new URLSearchParams(), { tag, includeMutations, returnQuery, ...opts } = options;\n  tag && searchParams.append(\"tag\", tag), searchParams.append(\"query\", query);\n  for (const [key, value] of Object.entries(params))\n    searchParams.append(`$${key}`, JSON.stringify(value));\n  for (const [key, value] of Object.entries(opts))\n    value && searchParams.append(key, `${value}`);\n  return returnQuery === !1 && searchParams.append(\"returnQuery\", \"false\"), includeMutations === !1 && searchParams.append(\"includeMutations\", \"false\"), `?${searchParams}`;\n}, excludeFalsey = (param, defValue) => param === !1 ? void 0 : typeof param > \"u\" ? defValue : param, getMutationQuery = (options = {}) => ({\n  dryRun: options.dryRun,\n  returnIds: !0,\n  returnDocuments: excludeFalsey(options.returnDocuments, !0),\n  visibility: options.visibility || \"sync\",\n  autoGenerateArrayKeys: options.autoGenerateArrayKeys,\n  skipCrossDatasetReferenceValidation: options.skipCrossDatasetReferenceValidation\n}), isResponse = (event) => event.type === \"response\", getBody = (event) => event.body, indexBy = (docs, attr) => docs.reduce((indexed, doc) => (indexed[attr(doc)] = doc, indexed), /* @__PURE__ */ Object.create(null)), getQuerySizeLimit = 11264;\nfunction _fetch(client, httpRequest, _stega, query, _params = {}, options = {}) {\n  const stega = \"stega\" in options ? {\n    ..._stega || {},\n    ...typeof options.stega == \"boolean\" ? { enabled: options.stega } : options.stega || {}\n  } : _stega, params = stega.enabled ? (0,_chunks_es_stegaClean_js__WEBPACK_IMPORTED_MODULE_7__.stegaClean)(_params) : _params, mapResponse = options.filterResponse === !1 ? (res) => res : (res) => res.result, { cache, next, ...opts } = {\n    // Opt out of setting a `signal` on an internal `fetch` if one isn't provided.\n    // This is necessary in React Server Components to avoid opting out of Request Memoization.\n    useAbortSignal: typeof options.signal < \"u\",\n    // Set `resultSourceMap' when stega is enabled, as it's required for encoding.\n    resultSourceMap: stega.enabled ? \"withKeyArraySelector\" : options.resultSourceMap,\n    ...options,\n    // Default to not returning the query, unless `filterResponse` is `false`,\n    // or `returnQuery` is explicitly set. `true` is the default in Content Lake, so skip if truthy\n    returnQuery: options.filterResponse === !1 && options.returnQuery !== !1\n  }, reqOpts = typeof cache < \"u\" || typeof next < \"u\" ? { ...opts, fetch: { cache, next } } : opts, $request = _dataRequest(client, httpRequest, \"query\", { query, params }, reqOpts);\n  return stega.enabled ? $request.pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.combineLatestWith)(\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(\n        __webpack_require__.e(/*! import() */ \"vendor-chunks/@sanity+client@6.28.4_debug@4.4.0\").then(__webpack_require__.bind(__webpack_require__, /*! ./_chunks-es/stegaEncodeSourceMap.js */ \"(action-browser)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js\")).then(function(n) {\n          return n.stegaEncodeSourceMap$1;\n        }).then(\n          ({ stegaEncodeSourceMap }) => stegaEncodeSourceMap\n        )\n      )\n    ),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(\n      ([res, stegaEncodeSourceMap]) => {\n        const result = stegaEncodeSourceMap(res.result, res.resultSourceMap, stega);\n        return mapResponse({ ...res, result });\n      }\n    )\n  ) : $request.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(mapResponse));\n}\nfunction _getDocument(client, httpRequest, id, opts = {}) {\n  const options = {\n    uri: _getDataUrl(client, \"doc\", id),\n    json: !0,\n    tag: opts.tag,\n    signal: opts.signal\n  };\n  return _requestObservable(client, httpRequest, options).pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)(isResponse),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((event) => event.body.documents && event.body.documents[0])\n  );\n}\nfunction _getDocuments(client, httpRequest, ids, opts = {}) {\n  const options = {\n    uri: _getDataUrl(client, \"doc\", ids.join(\",\")),\n    json: !0,\n    tag: opts.tag,\n    signal: opts.signal\n  };\n  return _requestObservable(client, httpRequest, options).pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)(isResponse),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((event) => {\n      const indexed = indexBy(event.body.documents || [], (doc) => doc._id);\n      return ids.map((id) => indexed[id] || null);\n    })\n  );\n}\nfunction _createIfNotExists(client, httpRequest, doc, options) {\n  return requireDocumentId(\"createIfNotExists\", doc), _create(client, httpRequest, doc, \"createIfNotExists\", options);\n}\nfunction _createOrReplace(client, httpRequest, doc, options) {\n  return requireDocumentId(\"createOrReplace\", doc), _create(client, httpRequest, doc, \"createOrReplace\", options);\n}\nfunction _delete(client, httpRequest, selection, options) {\n  return _dataRequest(\n    client,\n    httpRequest,\n    \"mutate\",\n    { mutations: [{ delete: getSelection(selection) }] },\n    options\n  );\n}\nfunction _mutate(client, httpRequest, mutations, options) {\n  let mut;\n  mutations instanceof Patch || mutations instanceof ObservablePatch ? mut = { patch: mutations.serialize() } : mutations instanceof Transaction || mutations instanceof ObservableTransaction ? mut = mutations.serialize() : mut = mutations;\n  const muts = Array.isArray(mut) ? mut : [mut], transactionId = options && options.transactionId || void 0;\n  return _dataRequest(client, httpRequest, \"mutate\", { mutations: muts, transactionId }, options);\n}\nfunction _action(client, httpRequest, actions, options) {\n  const acts = Array.isArray(actions) ? actions : [actions], transactionId = options && options.transactionId || void 0, skipCrossDatasetReferenceValidation = options && options.skipCrossDatasetReferenceValidation || void 0, dryRun = options && options.dryRun || void 0;\n  return _dataRequest(\n    client,\n    httpRequest,\n    \"actions\",\n    { actions: acts, transactionId, skipCrossDatasetReferenceValidation, dryRun },\n    options\n  );\n}\nfunction _dataRequest(client, httpRequest, endpoint, body, options = {}) {\n  const isMutation = endpoint === \"mutate\", isAction = endpoint === \"actions\", isQuery = endpoint === \"query\", strQuery = isMutation || isAction ? \"\" : encodeQueryString(body), useGet = !isMutation && !isAction && strQuery.length < getQuerySizeLimit, stringQuery = useGet ? strQuery : \"\", returnFirst = options.returnFirst, { timeout, token, tag, headers, returnQuery, lastLiveEventId, cacheMode } = options, uri = _getDataUrl(client, endpoint, stringQuery), reqOptions = {\n    method: useGet ? \"GET\" : \"POST\",\n    uri,\n    json: !0,\n    body: useGet ? void 0 : body,\n    query: isMutation && getMutationQuery(options),\n    timeout,\n    headers,\n    token,\n    tag,\n    returnQuery,\n    perspective: options.perspective,\n    resultSourceMap: options.resultSourceMap,\n    lastLiveEventId: Array.isArray(lastLiveEventId) ? lastLiveEventId[0] : lastLiveEventId,\n    cacheMode,\n    canUseCdn: isQuery,\n    signal: options.signal,\n    fetch: options.fetch,\n    useAbortSignal: options.useAbortSignal,\n    useCdn: options.useCdn\n  };\n  return _requestObservable(client, httpRequest, reqOptions).pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)(isResponse),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(getBody),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((res) => {\n      if (!isMutation)\n        return res;\n      const results = res.results || [];\n      if (options.returnDocuments)\n        return returnFirst ? results[0] && results[0].document : results.map((mut) => mut.document);\n      const key = returnFirst ? \"documentId\" : \"documentIds\", ids = returnFirst ? results[0] && results[0].id : results.map((mut) => mut.id);\n      return {\n        transactionId: res.transactionId,\n        results,\n        [key]: ids\n      };\n    })\n  );\n}\nfunction _create(client, httpRequest, doc, op, options = {}) {\n  const mutation = { [op]: doc }, opts = Object.assign({ returnFirst: !0, returnDocuments: !0 }, options);\n  return _dataRequest(client, httpRequest, \"mutate\", { mutations: [mutation] }, opts);\n}\nfunction _requestObservable(client, httpRequest, options) {\n  const uri = options.url || options.uri, config = client.config(), canUseCdn = typeof options.canUseCdn > \"u\" ? [\"GET\", \"HEAD\"].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/\") === 0 : options.canUseCdn;\n  let useCdn = (options.useCdn ?? config.useCdn) && canUseCdn;\n  const tag = options.tag && config.requestTagPrefix ? [config.requestTagPrefix, options.tag].join(\".\") : options.tag || config.requestTagPrefix;\n  if (tag && options.tag !== null && (options.query = { tag: requestTag(tag), ...options.query }), [\"GET\", \"HEAD\", \"POST\"].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/query/\") === 0) {\n    const resultSourceMap = options.resultSourceMap ?? config.resultSourceMap;\n    resultSourceMap !== void 0 && resultSourceMap !== !1 && (options.query = { resultSourceMap, ...options.query });\n    const perspectiveOption = options.perspective || config.perspective;\n    typeof perspectiveOption < \"u\" && (perspectiveOption === \"previewDrafts\" && printPreviewDraftsDeprecationWarning(), validateApiPerspective(perspectiveOption), options.query = {\n      perspective: Array.isArray(perspectiveOption) ? perspectiveOption.join(\",\") : perspectiveOption,\n      ...options.query\n    }, (Array.isArray(perspectiveOption) && perspectiveOption.length > 0 || // previewDrafts was renamed to drafts, but keep for backwards compat\n    perspectiveOption === \"previewDrafts\" || perspectiveOption === \"drafts\") && useCdn && (useCdn = !1, printCdnPreviewDraftsWarning())), options.lastLiveEventId && (options.query = { ...options.query, lastLiveEventId: options.lastLiveEventId }), options.returnQuery === !1 && (options.query = { returnQuery: \"false\", ...options.query }), useCdn && options.cacheMode == \"noStale\" && (options.query = { cacheMode: \"noStale\", ...options.query });\n  }\n  const reqOptions = requestOptions(\n    config,\n    Object.assign({}, options, {\n      url: _getUrl(client, uri, useCdn)\n    })\n  ), request = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(\n    (subscriber) => httpRequest(reqOptions, config.requester).subscribe(subscriber)\n  );\n  return options.signal ? request.pipe(_withAbortSignal(options.signal)) : request;\n}\nfunction _request(client, httpRequest, options) {\n  return _requestObservable(client, httpRequest, options).pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)((event) => event.type === \"response\"),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((event) => event.body)\n  );\n}\nfunction _getDataUrl(client, operation, path) {\n  const config = client.config(), catalog = hasDataset(config), baseUri = `/${operation}/${catalog}`;\n  return `/data${path ? `${baseUri}/${path}` : baseUri}`.replace(/\\/($|\\?)/, \"$1\");\n}\nfunction _getUrl(client, uri, canUseCdn = !1) {\n  const { url, cdnUrl } = client.config();\n  return `${canUseCdn ? cdnUrl : url}/${uri.replace(/^\\//, \"\")}`;\n}\nfunction _withAbortSignal(signal) {\n  return (input) => new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer) => {\n    const abort = () => observer.error(_createAbortError(signal));\n    if (signal && signal.aborted) {\n      abort();\n      return;\n    }\n    const subscription = input.subscribe(observer);\n    return signal.addEventListener(\"abort\", abort), () => {\n      signal.removeEventListener(\"abort\", abort), subscription.unsubscribe();\n    };\n  });\n}\nconst isDomExceptionSupported = !!globalThis.DOMException;\nfunction _createAbortError(signal) {\n  if (isDomExceptionSupported)\n    return new DOMException(signal?.reason ?? \"The operation was aborted.\", \"AbortError\");\n  const error = new Error(signal?.reason ?? \"The operation was aborted.\");\n  return error.name = \"AbortError\", error;\n}\nclass ObservableAssetsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  upload(assetType, body, options) {\n    return _upload(this.#client, this.#httpRequest, assetType, body, options);\n  }\n}\nclass AssetsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  upload(assetType, body, options) {\n    const observable2 = _upload(this.#client, this.#httpRequest, assetType, body, options);\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      observable2.pipe(\n        (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)((event) => event.type === \"response\"),\n        (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(\n          (event) => event.body.document\n        )\n      )\n    );\n  }\n}\nfunction _upload(client, httpRequest, assetType, body, opts = {}) {\n  validateAssetType(assetType);\n  let meta = opts.extract || void 0;\n  meta && !meta.length && (meta = [\"none\"]);\n  const dataset2 = hasDataset(client.config()), assetEndpoint = assetType === \"image\" ? \"images\" : \"files\", options = optionsFromFile(opts, body), { tag, label, title, description, creditLine, filename, source } = options, query = {\n    label,\n    title,\n    description,\n    filename,\n    meta,\n    creditLine\n  };\n  return source && (query.sourceId = source.id, query.sourceName = source.name, query.sourceUrl = source.url), _requestObservable(client, httpRequest, {\n    tag,\n    method: \"POST\",\n    timeout: options.timeout || 0,\n    uri: `/assets/${assetEndpoint}/${dataset2}`,\n    headers: options.contentType ? { \"Content-Type\": options.contentType } : {},\n    query,\n    body\n  });\n}\nfunction optionsFromFile(opts, file) {\n  return typeof File > \"u\" || !(file instanceof File) ? opts : Object.assign(\n    {\n      filename: opts.preserveFilename === !1 ? void 0 : file.name,\n      contentType: file.type\n    },\n    opts\n  );\n}\nvar defaults = (obj, defaults2) => Object.keys(defaults2).concat(Object.keys(obj)).reduce((target, prop) => (target[prop] = typeof obj[prop] > \"u\" ? defaults2[prop] : obj[prop], target), {});\nconst pick = (obj, props) => props.reduce((selection, prop) => (typeof obj[prop] > \"u\" || (selection[prop] = obj[prop]), selection), {}), eventSourcePolyfill = (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.defer)(() => Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/eventsource@2.0.2\"), __webpack_require__.e(\"vendor-chunks/@sanity+eventsource@5.0.2\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! @sanity/eventsource */ \"(action-browser)/./node_modules/.pnpm/@sanity+eventsource@5.0.2/node_modules/@sanity/eventsource/node.js\", 19))).pipe(\n  (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(({ default: EventSource2 }) => EventSource2),\n  (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.shareReplay)(1)\n);\nfunction reconnectOnConnectionFailure() {\n  return function(source) {\n    return source.pipe(\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.catchError)((err, caught) => err instanceof ConnectionFailedError ? (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.concat)((0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)({ type: \"reconnect\" }), (0,rxjs__WEBPACK_IMPORTED_MODULE_14__.timer)(1e3).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)(() => caught))) : (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.throwError)(() => err))\n    );\n  };\n}\nconst MAX_URL_LENGTH = 14800, possibleOptions = [\n  \"includePreviousRevision\",\n  \"includeResult\",\n  \"includeMutations\",\n  \"includeAllVersions\",\n  \"visibility\",\n  \"effectFormat\",\n  \"tag\"\n], defaultOptions = {\n  includeResult: !0\n};\nfunction _listen(query, params, opts = {}) {\n  const { url, token, withCredentials, requestTagPrefix } = this.config(), tag = opts.tag && requestTagPrefix ? [requestTagPrefix, opts.tag].join(\".\") : opts.tag, options = { ...defaults(opts, defaultOptions), tag }, listenOpts = pick(options, possibleOptions), qs = encodeQueryString({ query, params, options: { tag, ...listenOpts } }), uri = `${url}${_getDataUrl(this, \"listen\", qs)}`;\n  if (uri.length > MAX_URL_LENGTH)\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.throwError)(() => new Error(\"Query too large for listener\"));\n  const listenFor = options.events ? options.events : [\"mutation\"], esOptions = {};\n  return withCredentials && (esOptions.withCredentials = !0), token && (esOptions.headers = {\n    Authorization: `Bearer ${token}`\n  }), connectEventSource(() => (\n    // use polyfill if there is no global EventSource or if we need to set headers\n    (typeof EventSource > \"u\" || esOptions.headers ? eventSourcePolyfill : (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(EventSource)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((EventSource2) => new EventSource2(uri, esOptions)))\n  ), listenFor).pipe(\n    reconnectOnConnectionFailure(),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)((event) => listenFor.includes(event.type)),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(\n      (event) => ({\n        type: event.type,\n        ...\"data\" in event ? event.data : {}\n      })\n    )\n  );\n}\nfunction shareReplayLatest(configOrPredicate, config) {\n  return _shareReplayLatest(\n    typeof configOrPredicate == \"function\" ? { predicate: configOrPredicate, ...config } : configOrPredicate\n  );\n}\nfunction _shareReplayLatest(config) {\n  return (source) => {\n    let latest, emitted = !1;\n    const { predicate, ...shareConfig } = config, wrapped = source.pipe(\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_16__.tap)((value) => {\n        config.predicate(value) && (emitted = !0, latest = value);\n      }),\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_17__.finalize)(() => {\n        emitted = !1, latest = void 0;\n      }),\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_18__.share)(shareConfig)\n    ), emitLatest = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((subscriber) => {\n      emitted && subscriber.next(\n        // this cast is safe because of the emitted check which asserts that we got T from the source\n        latest\n      ), subscriber.complete();\n    });\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_19__.merge)(wrapped, emitLatest);\n  };\n}\nconst requiredApiVersion = \"2021-03-25\";\nclass LiveClient {\n  #client;\n  constructor(client) {\n    this.#client = client;\n  }\n  /**\n   * Requires `apiVersion` to be `2021-03-25` or later.\n   */\n  events({\n    includeDrafts = !1,\n    tag: _tag\n  } = {}) {\n    const {\n      projectId: projectId2,\n      apiVersion: _apiVersion,\n      token,\n      withCredentials,\n      requestTagPrefix\n    } = this.#client.config(), apiVersion = _apiVersion.replace(/^v/, \"\");\n    if (apiVersion !== \"X\" && apiVersion < requiredApiVersion)\n      throw new Error(\n        `The live events API requires API version ${requiredApiVersion} or later. The current API version is ${apiVersion}. Please update your API version to use this feature.`\n      );\n    if (includeDrafts && !token && !withCredentials)\n      throw new Error(\n        \"The live events API requires a token or withCredentials when 'includeDrafts: true'. Please update your client configuration. The token should have the lowest possible access role.\"\n      );\n    const path = _getDataUrl(this.#client, \"live/events\"), url = new URL(this.#client.getUrl(path, !1)), tag = _tag && requestTagPrefix ? [requestTagPrefix, _tag].join(\".\") : _tag;\n    tag && url.searchParams.set(\"tag\", tag), includeDrafts && url.searchParams.set(\"includeDrafts\", \"true\");\n    const esOptions = {};\n    includeDrafts && token && (esOptions.headers = {\n      Authorization: `Bearer ${token}`\n    }), includeDrafts && withCredentials && (esOptions.withCredentials = !0);\n    const key = `${url.href}::${JSON.stringify(esOptions)}`, existing = eventsCache.get(key);\n    if (existing)\n      return existing;\n    const events = connectEventSource(() => (\n      // use polyfill if there is no global EventSource or if we need to set headers\n      (typeof EventSource > \"u\" || esOptions.headers ? eventSourcePolyfill : (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(EventSource)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((EventSource2) => new EventSource2(url.href, esOptions)))\n    ), [\n      \"message\",\n      \"restart\",\n      \"welcome\",\n      \"reconnect\"\n    ]).pipe(\n      reconnectOnConnectionFailure(),\n      (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((event) => {\n        if (event.type === \"message\") {\n          const { data, ...rest } = event;\n          return { ...rest, tags: data.tags };\n        }\n        return event;\n      })\n    ), checkCors = fetchObservable(url, {\n      method: \"OPTIONS\",\n      mode: \"cors\",\n      credentials: esOptions.withCredentials ? \"include\" : \"omit\",\n      headers: esOptions.headers\n    }).pipe(\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)(() => rxjs__WEBPACK_IMPORTED_MODULE_20__.EMPTY),\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.catchError)(() => {\n        throw new CorsOriginError({ projectId: projectId2 });\n      })\n    ), observable2 = (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.concat)(checkCors, events).pipe(\n      (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.finalize)(() => eventsCache.delete(key)),\n      shareReplayLatest({\n        predicate: (event) => event.type === \"welcome\"\n      })\n    );\n    return eventsCache.set(key, observable2), observable2;\n  }\n}\nfunction fetchObservable(url, init) {\n  return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer) => {\n    const controller = new AbortController(), signal = controller.signal;\n    return fetch(url, { ...init, signal: controller.signal }).then(\n      (response) => {\n        observer.next(response), observer.complete();\n      },\n      (err) => {\n        signal.aborted || observer.error(err);\n      }\n    ), () => controller.abort();\n  });\n}\nconst eventsCache = /* @__PURE__ */ new Map();\nclass ObservableDatasetsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */\n  create(name, options) {\n    return _modify(this.#client, this.#httpRequest, \"PUT\", name, options);\n  }\n  /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */\n  edit(name, options) {\n    return _modify(this.#client, this.#httpRequest, \"PATCH\", name, options);\n  }\n  /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */\n  delete(name) {\n    return _modify(this.#client, this.#httpRequest, \"DELETE\", name);\n  }\n  /**\n   * Fetch a list of datasets for the configured project\n   */\n  list() {\n    return _request(this.#client, this.#httpRequest, {\n      uri: \"/datasets\",\n      tag: null\n    });\n  }\n}\nclass DatasetsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */\n  create(name, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _modify(this.#client, this.#httpRequest, \"PUT\", name, options)\n    );\n  }\n  /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */\n  edit(name, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _modify(this.#client, this.#httpRequest, \"PATCH\", name, options)\n    );\n  }\n  /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */\n  delete(name) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_modify(this.#client, this.#httpRequest, \"DELETE\", name));\n  }\n  /**\n   * Fetch a list of datasets for the configured project\n   */\n  list() {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _request(this.#client, this.#httpRequest, { uri: \"/datasets\", tag: null })\n    );\n  }\n}\nfunction _modify(client, httpRequest, method, name, options) {\n  return dataset(name), _request(client, httpRequest, {\n    method,\n    uri: `/datasets/${name}`,\n    body: options,\n    tag: null\n  });\n}\nclass ObservableProjectsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  list(options) {\n    const uri = options?.includeMembers === !1 ? \"/projects?includeMembers=false\" : \"/projects\";\n    return _request(this.#client, this.#httpRequest, { uri });\n  }\n  /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */\n  getById(projectId2) {\n    return _request(this.#client, this.#httpRequest, { uri: `/projects/${projectId2}` });\n  }\n}\nclass ProjectsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  list(options) {\n    const uri = options?.includeMembers === !1 ? \"/projects?includeMembers=false\" : \"/projects\";\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_request(this.#client, this.#httpRequest, { uri }));\n  }\n  /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */\n  getById(projectId2) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _request(this.#client, this.#httpRequest, { uri: `/projects/${projectId2}` })\n    );\n  }\n}\nclass ObservableUsersClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */\n  getById(id) {\n    return _request(\n      this.#client,\n      this.#httpRequest,\n      { uri: `/users/${id}` }\n    );\n  }\n}\nclass UsersClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */\n  getById(id) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _request(this.#client, this.#httpRequest, {\n        uri: `/users/${id}`\n      })\n    );\n  }\n}\nclass ObservableSanityClient {\n  assets;\n  datasets;\n  live;\n  projects;\n  users;\n  /**\n   * Private properties\n   */\n  #clientConfig;\n  #httpRequest;\n  /**\n   * Instance properties\n   */\n  listen = _listen;\n  constructor(httpRequest, config = defaultConfig) {\n    this.config(config), this.#httpRequest = httpRequest, this.assets = new ObservableAssetsClient(this, this.#httpRequest), this.datasets = new ObservableDatasetsClient(this, this.#httpRequest), this.live = new LiveClient(this), this.projects = new ObservableProjectsClient(this, this.#httpRequest), this.users = new ObservableUsersClient(this, this.#httpRequest);\n  }\n  /**\n   * Clone the client - returns a new instance\n   */\n  clone() {\n    return new ObservableSanityClient(this.#httpRequest, this.config());\n  }\n  config(newConfig) {\n    if (newConfig === void 0)\n      return { ...this.#clientConfig };\n    if (this.#clientConfig && this.#clientConfig.allowReconfigure === !1)\n      throw new Error(\n        \"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\"\n      );\n    return this.#clientConfig = initConfig(newConfig, this.#clientConfig || {}), this;\n  }\n  /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */\n  withConfig(newConfig) {\n    const thisConfig = this.config();\n    return new ObservableSanityClient(this.#httpRequest, {\n      ...thisConfig,\n      ...newConfig,\n      stega: {\n        ...thisConfig.stega || {},\n        ...typeof newConfig?.stega == \"boolean\" ? { enabled: newConfig.stega } : newConfig?.stega || {}\n      }\n    });\n  }\n  fetch(query, params, options) {\n    return _fetch(\n      this,\n      this.#httpRequest,\n      this.#clientConfig.stega,\n      query,\n      params,\n      options\n    );\n  }\n  /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */\n  getDocument(id, options) {\n    return _getDocument(this, this.#httpRequest, id, options);\n  }\n  /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */\n  getDocuments(ids, options) {\n    return _getDocuments(this, this.#httpRequest, ids, options);\n  }\n  create(document, options) {\n    return _create(this, this.#httpRequest, document, \"create\", options);\n  }\n  createIfNotExists(document, options) {\n    return _createIfNotExists(this, this.#httpRequest, document, options);\n  }\n  createOrReplace(document, options) {\n    return _createOrReplace(this, this.#httpRequest, document, options);\n  }\n  delete(selection, options) {\n    return _delete(this, this.#httpRequest, selection, options);\n  }\n  mutate(operations, options) {\n    return _mutate(this, this.#httpRequest, operations, options);\n  }\n  /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */\n  patch(selection, operations) {\n    return new ObservablePatch(selection, operations, this);\n  }\n  /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */\n  transaction(operations) {\n    return new ObservableTransaction(operations, this);\n  }\n  /**\n   * Perform action operations against the configured dataset\n   *\n   * @param operations - Action operation(s) to execute\n   * @param options - Action options\n   */\n  action(operations, options) {\n    return _action(this, this.#httpRequest, operations, options);\n  }\n  /**\n   * Perform an HTTP request against the Sanity API\n   *\n   * @param options - Request options\n   */\n  request(options) {\n    return _request(this, this.#httpRequest, options);\n  }\n  /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */\n  getUrl(uri, canUseCdn) {\n    return _getUrl(this, uri, canUseCdn);\n  }\n  /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */\n  getDataUrl(operation, path) {\n    return _getDataUrl(this, operation, path);\n  }\n}\nclass SanityClient {\n  assets;\n  datasets;\n  live;\n  projects;\n  users;\n  /**\n   * Observable version of the Sanity client, with the same configuration as the promise-based one\n   */\n  observable;\n  /**\n   * Private properties\n   */\n  #clientConfig;\n  #httpRequest;\n  /**\n   * Instance properties\n   */\n  listen = _listen;\n  constructor(httpRequest, config = defaultConfig) {\n    this.config(config), this.#httpRequest = httpRequest, this.assets = new AssetsClient(this, this.#httpRequest), this.datasets = new DatasetsClient(this, this.#httpRequest), this.live = new LiveClient(this), this.projects = new ProjectsClient(this, this.#httpRequest), this.users = new UsersClient(this, this.#httpRequest), this.observable = new ObservableSanityClient(httpRequest, config);\n  }\n  /**\n   * Clone the client - returns a new instance\n   */\n  clone() {\n    return new SanityClient(this.#httpRequest, this.config());\n  }\n  config(newConfig) {\n    if (newConfig === void 0)\n      return { ...this.#clientConfig };\n    if (this.#clientConfig && this.#clientConfig.allowReconfigure === !1)\n      throw new Error(\n        \"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\"\n      );\n    return this.observable && this.observable.config(newConfig), this.#clientConfig = initConfig(newConfig, this.#clientConfig || {}), this;\n  }\n  /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */\n  withConfig(newConfig) {\n    const thisConfig = this.config();\n    return new SanityClient(this.#httpRequest, {\n      ...thisConfig,\n      ...newConfig,\n      stega: {\n        ...thisConfig.stega || {},\n        ...typeof newConfig?.stega == \"boolean\" ? { enabled: newConfig.stega } : newConfig?.stega || {}\n      }\n    });\n  }\n  fetch(query, params, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _fetch(\n        this,\n        this.#httpRequest,\n        this.#clientConfig.stega,\n        query,\n        params,\n        options\n      )\n    );\n  }\n  /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */\n  getDocument(id, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_getDocument(this, this.#httpRequest, id, options));\n  }\n  /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */\n  getDocuments(ids, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_getDocuments(this, this.#httpRequest, ids, options));\n  }\n  create(document, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _create(this, this.#httpRequest, document, \"create\", options)\n    );\n  }\n  createIfNotExists(document, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _createIfNotExists(this, this.#httpRequest, document, options)\n    );\n  }\n  createOrReplace(document, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _createOrReplace(this, this.#httpRequest, document, options)\n    );\n  }\n  delete(selection, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_delete(this, this.#httpRequest, selection, options));\n  }\n  mutate(operations, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_mutate(this, this.#httpRequest, operations, options));\n  }\n  /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */\n  patch(documentId, operations) {\n    return new Patch(documentId, operations, this);\n  }\n  /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */\n  transaction(operations) {\n    return new Transaction(operations, this);\n  }\n  /**\n   * Perform action operations against the configured dataset\n   * Returns a promise that resolves to the transaction result\n   *\n   * @param operations - Action operation(s) to execute\n   * @param options - Action options\n   */\n  action(operations, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_action(this, this.#httpRequest, operations, options));\n  }\n  /**\n   * Perform a request against the Sanity API\n   * NOTE: Only use this for Sanity API endpoints, not for your own APIs!\n   *\n   * @param options - Request options\n   * @returns Promise resolving to the response body\n   */\n  request(options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_request(this, this.#httpRequest, options));\n  }\n  /**\n   * Perform an HTTP request a `/data` sub-endpoint\n   * NOTE: Considered internal, thus marked as deprecated. Use `request` instead.\n   *\n   * @deprecated - Use `request()` or your own HTTP library instead\n   * @param endpoint - Endpoint to hit (mutate, query etc)\n   * @param body - Request body\n   * @param options - Request options\n   * @internal\n   */\n  dataRequest(endpoint, body, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_dataRequest(this, this.#httpRequest, endpoint, body, options));\n  }\n  /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */\n  getUrl(uri, canUseCdn) {\n    return _getUrl(this, uri, canUseCdn);\n  }\n  /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */\n  getDataUrl(operation, path) {\n    return _getDataUrl(this, operation, path);\n  }\n}\nfunction defineCreateClientExports(envMiddleware2, ClassConstructor) {\n  return { requester: defineHttpRequest(envMiddleware2), createClient: (config) => {\n    const clientRequester = defineHttpRequest(envMiddleware2);\n    return new ClassConstructor(\n      (options, requester2) => (requester2 || clientRequester)({\n        maxRedirects: 0,\n        maxRetries: config.maxRetries,\n        retryDelay: config.retryDelay,\n        ...options\n      }),\n      config\n    );\n  } };\n}\nfunction defineDeprecatedCreateClient(createClient2) {\n  return function(config) {\n    return printNoDefaultExport(), createClient2(config);\n  };\n}\nvar envMiddleware = [];\nconst exp = defineCreateClientExports(envMiddleware, SanityClient), requester = exp.requester, createClient = exp.createClient, deprecatedCreateClient = defineDeprecatedCreateClient(createClient);\n\n//# sourceMappingURL=index.browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/index.browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ C),\n/* harmony export */   stegaClean: () => (/* binding */ stegaClean),\n/* harmony export */   vercelStegaCleanAll: () => (/* binding */ vercelStegaCleanAll)\n/* harmony export */ });\nvar s = { 0: 8203, 1: 8204, 2: 8205, 3: 8290, 4: 8291, 5: 8288, 6: 65279, 7: 8289, 8: 119155, 9: 119156, a: 119157, b: 119158, c: 119159, d: 119160, e: 119161, f: 119162 }, c = { 0: 8203, 1: 8204, 2: 8205, 3: 65279 }, u = new Array(4).fill(String.fromCodePoint(c[0])).join(\"\");\nfunction E(t) {\n  let e = JSON.stringify(t);\n  return `${u}${Array.from(e).map((r) => {\n    let n = r.charCodeAt(0);\n    if (n > 255) throw new Error(`Only ASCII edit info can be encoded. Error attempting to encode ${e} on character ${r} (${n})`);\n    return Array.from(n.toString(4).padStart(4, \"0\")).map((o) => String.fromCodePoint(c[o])).join(\"\");\n  }).join(\"\")}`;\n}\nfunction I(t) {\n  return !Number.isNaN(Number(t)) || /[a-z]/i.test(t) && !/\\d+(?:[-:\\/]\\d+){2}(?:T\\d+(?:[-:\\/]\\d+){1,2}(\\.\\d+)?Z?)?/.test(t) ? !1 : !!Date.parse(t);\n}\nfunction T(t) {\n  try {\n    new URL(t, t.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n  } catch {\n    return !1;\n  }\n  return !0;\n}\nfunction C(t, e, r = \"auto\") {\n  return r === !0 || r === \"auto\" && (I(t) || T(t)) ? t : `${t}${E(e)}`;\n}\nObject.fromEntries(Object.entries(c).map((t) => t.reverse()));\nObject.fromEntries(Object.entries(s).map((t) => t.reverse()));\nvar S = `${Object.values(s).map((t) => `\\\\u{${t.toString(16)}}`).join(\"\")}`, f = new RegExp(`[${S}]{4,}`, \"gu\");\nfunction _(t) {\n  var e;\n  return { cleaned: t.replace(f, \"\"), encoded: ((e = t.match(f)) == null ? void 0 : e[0]) || \"\" };\n}\nfunction O(t) {\n  return t && JSON.parse(_(JSON.stringify(t)).cleaned);\n}\nfunction stegaClean(result) {\n  return O(result);\n}\nconst vercelStegaCleanAll = stegaClean;\n\n//# sourceMappingURL=stegaClean.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhbml0eStjbGllbnRANi4yOC40X2RlYnVnQDQuNC4wL25vZGVfbW9kdWxlcy9Ac2FuaXR5L2NsaWVudC9kaXN0L19jaHVua3MtZXMvc3RlZ2FDbGVhbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxVQUFVLGlLQUFpSyxRQUFRLHFDQUFxQztBQUN4TjtBQUNBO0FBQ0EsWUFBWSxFQUFFLEVBQUU7QUFDaEI7QUFDQSxvR0FBb0csR0FBRyxlQUFlLEdBQUcsR0FBRyxFQUFFO0FBQzlIO0FBQ0EsR0FBRyxXQUFXO0FBQ2Q7QUFDQTtBQUNBLDRFQUE0RSxFQUFFLHFCQUFxQixJQUFJO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsRUFBRSxFQUFFLEtBQUs7QUFDdEU7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUMsRUFBRSxnQkFBZ0IsWUFBWSxzQkFBc0IsRUFBRSxFQUFFLEdBQUc7QUFDdkc7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3BldHJva3ZhcnRzaWFueWkvY29kZS9nZW9tdW5kdXMtd2Vic2l0ZS9ub2RlX21vZHVsZXMvLnBucG0vQHNhbml0eStjbGllbnRANi4yOC40X2RlYnVnQDQuNC4wL25vZGVfbW9kdWxlcy9Ac2FuaXR5L2NsaWVudC9kaXN0L19jaHVua3MtZXMvc3RlZ2FDbGVhbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcyA9IHsgMDogODIwMywgMTogODIwNCwgMjogODIwNSwgMzogODI5MCwgNDogODI5MSwgNTogODI4OCwgNjogNjUyNzksIDc6IDgyODksIDg6IDExOTE1NSwgOTogMTE5MTU2LCBhOiAxMTkxNTcsIGI6IDExOTE1OCwgYzogMTE5MTU5LCBkOiAxMTkxNjAsIGU6IDExOTE2MSwgZjogMTE5MTYyIH0sIGMgPSB7IDA6IDgyMDMsIDE6IDgyMDQsIDI6IDgyMDUsIDM6IDY1Mjc5IH0sIHUgPSBuZXcgQXJyYXkoNCkuZmlsbChTdHJpbmcuZnJvbUNvZGVQb2ludChjWzBdKSkuam9pbihcIlwiKTtcbmZ1bmN0aW9uIEUodCkge1xuICBsZXQgZSA9IEpTT04uc3RyaW5naWZ5KHQpO1xuICByZXR1cm4gYCR7dX0ke0FycmF5LmZyb20oZSkubWFwKChyKSA9PiB7XG4gICAgbGV0IG4gPSByLmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKG4gPiAyNTUpIHRocm93IG5ldyBFcnJvcihgT25seSBBU0NJSSBlZGl0IGluZm8gY2FuIGJlIGVuY29kZWQuIEVycm9yIGF0dGVtcHRpbmcgdG8gZW5jb2RlICR7ZX0gb24gY2hhcmFjdGVyICR7cn0gKCR7bn0pYCk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20obi50b1N0cmluZyg0KS5wYWRTdGFydCg0LCBcIjBcIikpLm1hcCgobykgPT4gU3RyaW5nLmZyb21Db2RlUG9pbnQoY1tvXSkpLmpvaW4oXCJcIik7XG4gIH0pLmpvaW4oXCJcIil9YDtcbn1cbmZ1bmN0aW9uIEkodCkge1xuICByZXR1cm4gIU51bWJlci5pc05hTihOdW1iZXIodCkpIHx8IC9bYS16XS9pLnRlc3QodCkgJiYgIS9cXGQrKD86Wy06XFwvXVxcZCspezJ9KD86VFxcZCsoPzpbLTpcXC9dXFxkKyl7MSwyfShcXC5cXGQrKT9aPyk/Ly50ZXN0KHQpID8gITEgOiAhIURhdGUucGFyc2UodCk7XG59XG5mdW5jdGlvbiBUKHQpIHtcbiAgdHJ5IHtcbiAgICBuZXcgVVJMKHQsIHQuc3RhcnRzV2l0aChcIi9cIikgPyBcImh0dHBzOi8vYWNtZS5jb21cIiA6IHZvaWQgMCk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiAhMTtcbiAgfVxuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBDKHQsIGUsIHIgPSBcImF1dG9cIikge1xuICByZXR1cm4gciA9PT0gITAgfHwgciA9PT0gXCJhdXRvXCIgJiYgKEkodCkgfHwgVCh0KSkgPyB0IDogYCR7dH0ke0UoZSl9YDtcbn1cbk9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhjKS5tYXAoKHQpID0+IHQucmV2ZXJzZSgpKSk7XG5PYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMocykubWFwKCh0KSA9PiB0LnJldmVyc2UoKSkpO1xudmFyIFMgPSBgJHtPYmplY3QudmFsdWVzKHMpLm1hcCgodCkgPT4gYFxcXFx1eyR7dC50b1N0cmluZygxNil9fWApLmpvaW4oXCJcIil9YCwgZiA9IG5ldyBSZWdFeHAoYFske1N9XXs0LH1gLCBcImd1XCIpO1xuZnVuY3Rpb24gXyh0KSB7XG4gIHZhciBlO1xuICByZXR1cm4geyBjbGVhbmVkOiB0LnJlcGxhY2UoZiwgXCJcIiksIGVuY29kZWQ6ICgoZSA9IHQubWF0Y2goZikpID09IG51bGwgPyB2b2lkIDAgOiBlWzBdKSB8fCBcIlwiIH07XG59XG5mdW5jdGlvbiBPKHQpIHtcbiAgcmV0dXJuIHQgJiYgSlNPTi5wYXJzZShfKEpTT04uc3RyaW5naWZ5KHQpKS5jbGVhbmVkKTtcbn1cbmZ1bmN0aW9uIHN0ZWdhQ2xlYW4ocmVzdWx0KSB7XG4gIHJldHVybiBPKHJlc3VsdCk7XG59XG5jb25zdCB2ZXJjZWxTdGVnYUNsZWFuQWxsID0gc3RlZ2FDbGVhbjtcbmV4cG9ydCB7XG4gIEMsXG4gIHN0ZWdhQ2xlYW4sXG4gIHZlcmNlbFN0ZWdhQ2xlYW5BbGxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGVnYUNsZWFuLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeIntoResult: () => (/* binding */ encodeIntoResult),\n/* harmony export */   stegaEncodeSourceMap: () => (/* binding */ stegaEncodeSourceMap),\n/* harmony export */   stegaEncodeSourceMap$1: () => (/* binding */ stegaEncodeSourceMap$1)\n/* harmony export */ });\n/* harmony import */ var _stegaClean_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stegaClean.js */ \"(rsc)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\");\n\nconst reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/;\nfunction isKeySegment(segment) {\n  return typeof segment == \"string\" ? reKeySegment.test(segment.trim()) : typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction toString(path) {\n  if (!Array.isArray(path))\n    throw new Error(\"Path is not an array\");\n  return path.reduce((target, segment, i) => {\n    const segmentType = typeof segment;\n    if (segmentType === \"number\")\n      return `${target}[${segment}]`;\n    if (segmentType === \"string\")\n      return `${target}${i === 0 ? \"\" : \".\"}${segment}`;\n    if (isKeySegment(segment) && segment._key)\n      return `${target}[_key==\"${segment._key}\"]`;\n    if (Array.isArray(segment)) {\n      const [from, to] = segment;\n      return `${target}[${from}:${to}]`;\n    }\n    throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``);\n  }, \"\");\n}\nconst ESCAPE = {\n  \"\\f\": \"\\\\f\",\n  \"\\n\": \"\\\\n\",\n  \"\\r\": \"\\\\r\",\n  \"\t\": \"\\\\t\",\n  \"'\": \"\\\\'\",\n  \"\\\\\": \"\\\\\\\\\"\n}, UNESCAPE = {\n  \"\\\\f\": \"\\f\",\n  \"\\\\n\": `\n`,\n  \"\\\\r\": \"\\r\",\n  \"\\\\t\": \"\t\",\n  \"\\\\'\": \"'\",\n  \"\\\\\\\\\": \"\\\\\"\n};\nfunction jsonPath(path) {\n  return `$${path.map((segment) => typeof segment == \"string\" ? `['${segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match) => ESCAPE[match])}']` : typeof segment == \"number\" ? `[${segment}]` : segment._key !== \"\" ? `[?(@._key=='${segment._key.replace(/['\\\\]/g, (match) => ESCAPE[match])}')]` : `[${segment._index}]`).join(\"\")}`;\n}\nfunction parseJsonPath(path) {\n  const parsed = [], parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g;\n  let match;\n  for (; (match = parseRe.exec(path)) !== null; ) {\n    if (match[1] !== void 0) {\n      const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m) => UNESCAPE[m]);\n      parsed.push(key);\n      continue;\n    }\n    if (match[2] !== void 0) {\n      parsed.push(parseInt(match[2], 10));\n      continue;\n    }\n    if (match[3] !== void 0) {\n      const _key = match[3].replace(/\\\\(\\\\')/g, (m) => UNESCAPE[m]);\n      parsed.push({\n        _key,\n        _index: -1\n      });\n      continue;\n    }\n  }\n  return parsed;\n}\nfunction jsonPathToStudioPath(path) {\n  return path.map((segment) => {\n    if (typeof segment == \"string\" || typeof segment == \"number\")\n      return segment;\n    if (segment._key !== \"\")\n      return { _key: segment._key };\n    if (segment._index !== -1)\n      return segment._index;\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n  });\n}\nfunction jsonPathToMappingPath(path) {\n  return path.map((segment) => {\n    if (typeof segment == \"string\" || typeof segment == \"number\")\n      return segment;\n    if (segment._index !== -1)\n      return segment._index;\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n  });\n}\nfunction resolveMapping(resultPath, csm) {\n  if (!csm?.mappings)\n    return;\n  const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));\n  if (csm.mappings[resultMappingPath] !== void 0)\n    return {\n      mapping: csm.mappings[resultMappingPath],\n      matchedPath: resultMappingPath,\n      pathSuffix: \"\"\n    };\n  const mappings = Object.entries(csm.mappings).filter(([key]) => resultMappingPath.startsWith(key)).sort(([key1], [key2]) => key2.length - key1.length);\n  if (mappings.length == 0)\n    return;\n  const [matchedPath, mapping] = mappings[0], pathSuffix = resultMappingPath.substring(matchedPath.length);\n  return { mapping, matchedPath, pathSuffix };\n}\nfunction isArray(value) {\n  return value !== null && Array.isArray(value);\n}\nfunction isRecord(value) {\n  return typeof value == \"object\" && value !== null;\n}\nfunction walkMap(value, mappingFn, path = []) {\n  if (isArray(value))\n    return value.map((v, idx) => {\n      if (isRecord(v)) {\n        const _key = v._key;\n        if (typeof _key == \"string\")\n          return walkMap(v, mappingFn, path.concat({ _key, _index: idx }));\n      }\n      return walkMap(v, mappingFn, path.concat(idx));\n    });\n  if (isRecord(value)) {\n    if (value._type === \"block\" || value._type === \"span\") {\n      const result = { ...value };\n      return value._type === \"block\" ? result.children = walkMap(value.children, mappingFn, path.concat(\"children\")) : value._type === \"span\" && (result.text = walkMap(value.text, mappingFn, path.concat(\"text\"))), result;\n    }\n    return Object.fromEntries(\n      Object.entries(value).map(([k, v]) => [k, walkMap(v, mappingFn, path.concat(k))])\n    );\n  }\n  return mappingFn(value, path);\n}\nfunction encodeIntoResult(result, csm, encoder) {\n  return walkMap(result, (value, path) => {\n    if (typeof value != \"string\")\n      return value;\n    const resolveMappingResult = resolveMapping(path, csm);\n    if (!resolveMappingResult)\n      return value;\n    const { mapping, matchedPath } = resolveMappingResult;\n    if (mapping.type !== \"value\" || mapping.source.type !== \"documentValue\")\n      return value;\n    const sourceDocument = csm.documents[mapping.source.document], sourcePath = csm.paths[mapping.source.path], matchPathSegments = parseJsonPath(matchedPath), fullSourceSegments = parseJsonPath(sourcePath).concat(path.slice(matchPathSegments.length));\n    return encoder({\n      sourcePath: fullSourceSegments,\n      sourceDocument,\n      resultPath: path,\n      value\n    });\n  });\n}\nconst DRAFTS_FOLDER = \"drafts\", VERSION_FOLDER = \"versions\", PATH_SEPARATOR = \".\", DRAFTS_PREFIX = `${DRAFTS_FOLDER}${PATH_SEPARATOR}`, VERSION_PREFIX = `${VERSION_FOLDER}${PATH_SEPARATOR}`;\nfunction isDraftId(id) {\n  return id.startsWith(DRAFTS_PREFIX);\n}\nfunction isVersionId(id) {\n  return id.startsWith(VERSION_PREFIX);\n}\nfunction isPublishedId(id) {\n  return !isDraftId(id) && !isVersionId(id);\n}\nfunction getVersionFromId(id) {\n  if (!isVersionId(id)) return;\n  const [_versionPrefix, versionId, ..._publishedId] = id.split(PATH_SEPARATOR);\n  return versionId;\n}\nfunction getPublishedId(id) {\n  return isVersionId(id) ? id.split(PATH_SEPARATOR).slice(2).join(PATH_SEPARATOR) : isDraftId(id) ? id.slice(DRAFTS_PREFIX.length) : id;\n}\nfunction createEditUrl(options) {\n  const {\n    baseUrl,\n    workspace: _workspace = \"default\",\n    tool: _tool = \"default\",\n    id: _id,\n    type,\n    path,\n    projectId,\n    dataset\n  } = options;\n  if (!baseUrl)\n    throw new Error(\"baseUrl is required\");\n  if (!path)\n    throw new Error(\"path is required\");\n  if (!_id)\n    throw new Error(\"id is required\");\n  if (baseUrl !== \"/\" && baseUrl.endsWith(\"/\"))\n    throw new Error(\"baseUrl must not end with a slash\");\n  const workspace = _workspace === \"default\" ? void 0 : _workspace, tool = _tool === \"default\" ? void 0 : _tool, id = getPublishedId(_id), stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path, searchParams = new URLSearchParams({\n    baseUrl,\n    id,\n    type,\n    path: stringifiedPath\n  });\n  if (workspace && searchParams.set(\"workspace\", workspace), tool && searchParams.set(\"tool\", tool), projectId && searchParams.set(\"projectId\", projectId), dataset && searchParams.set(\"dataset\", dataset), isPublishedId(_id))\n    searchParams.set(\"perspective\", \"published\");\n  else if (isVersionId(_id)) {\n    const versionId = getVersionFromId(_id);\n    searchParams.set(\"perspective\", versionId);\n  }\n  const segments = [baseUrl === \"/\" ? \"\" : baseUrl];\n  workspace && segments.push(workspace);\n  const routerParams = [\n    \"mode=presentation\",\n    `id=${id}`,\n    `type=${type}`,\n    `path=${encodeURIComponent(stringifiedPath)}`\n  ];\n  return tool && routerParams.push(`tool=${tool}`), segments.push(\"intent\", \"edit\", `${routerParams.join(\";\")}?${searchParams}`), segments.join(\"/\");\n}\nfunction resolveStudioBaseRoute(studioUrl) {\n  let baseUrl = typeof studioUrl == \"string\" ? studioUrl : studioUrl.baseUrl;\n  return baseUrl !== \"/\" && (baseUrl = baseUrl.replace(/\\/$/, \"\")), typeof studioUrl == \"string\" ? { baseUrl } : { ...studioUrl, baseUrl };\n}\nconst filterDefault = ({ sourcePath, resultPath, value }) => {\n  if (isValidDate(value) || isValidURL(value))\n    return !1;\n  const endPath = sourcePath.at(-1);\n  return !(sourcePath.at(-2) === \"slug\" && endPath === \"current\" || typeof endPath == \"string\" && (endPath.startsWith(\"_\") || endPath.endsWith(\"Id\")) || sourcePath.some(\n    (path) => path === \"meta\" || path === \"metadata\" || path === \"openGraph\" || path === \"seo\"\n  ) || hasTypeLike(sourcePath) || hasTypeLike(resultPath) || typeof endPath == \"string\" && denylist.has(endPath));\n}, denylist = /* @__PURE__ */ new Set([\n  \"color\",\n  \"colour\",\n  \"currency\",\n  \"email\",\n  \"format\",\n  \"gid\",\n  \"hex\",\n  \"href\",\n  \"hsl\",\n  \"hsla\",\n  \"icon\",\n  \"id\",\n  \"index\",\n  \"key\",\n  \"language\",\n  \"layout\",\n  \"link\",\n  \"linkAction\",\n  \"locale\",\n  \"lqip\",\n  \"page\",\n  \"path\",\n  \"ref\",\n  \"rgb\",\n  \"rgba\",\n  \"route\",\n  \"secret\",\n  \"slug\",\n  \"status\",\n  \"tag\",\n  \"template\",\n  \"theme\",\n  \"type\",\n  \"textTheme\",\n  \"unit\",\n  \"url\",\n  \"username\",\n  \"variant\",\n  \"website\"\n]);\nfunction isValidDate(dateString) {\n  return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? !!Date.parse(dateString) : !1;\n}\nfunction isValidURL(url) {\n  try {\n    new URL(url, url.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n  } catch {\n    return !1;\n  }\n  return !0;\n}\nfunction hasTypeLike(path) {\n  return path.some((segment) => typeof segment == \"string\" && segment.match(/type/i) !== null);\n}\nconst TRUNCATE_LENGTH = 20;\nfunction stegaEncodeSourceMap(result, resultSourceMap, config) {\n  const { filter, logger, enabled } = config;\n  if (!enabled) {\n    const msg = \"config.enabled must be true, don't call this function otherwise\";\n    throw logger?.error?.(`[@sanity/client]: ${msg}`, { result, resultSourceMap, config }), new TypeError(msg);\n  }\n  if (!resultSourceMap)\n    return logger?.error?.(\"[@sanity/client]: Missing Content Source Map from response body\", {\n      result,\n      resultSourceMap,\n      config\n    }), result;\n  if (!config.studioUrl) {\n    const msg = \"config.studioUrl must be defined\";\n    throw logger?.error?.(`[@sanity/client]: ${msg}`, { result, resultSourceMap, config }), new TypeError(msg);\n  }\n  const report = {\n    encoded: [],\n    skipped: []\n  }, resultWithStega = encodeIntoResult(\n    result,\n    resultSourceMap,\n    ({ sourcePath, sourceDocument, resultPath, value }) => {\n      if ((typeof filter == \"function\" ? filter({ sourcePath, resultPath, filterDefault, sourceDocument, value }) : filterDefault({ sourcePath, resultPath, value })) === !1)\n        return logger && report.skipped.push({\n          path: prettyPathForLogging(sourcePath),\n          value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n          length: value.length\n        }), value;\n      logger && report.encoded.push({\n        path: prettyPathForLogging(sourcePath),\n        value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n        length: value.length\n      });\n      const { baseUrl, workspace, tool } = resolveStudioBaseRoute(\n        typeof config.studioUrl == \"function\" ? config.studioUrl(sourceDocument) : config.studioUrl\n      );\n      if (!baseUrl) return value;\n      const { _id: id, _type: type, _projectId: projectId, _dataset: dataset } = sourceDocument;\n      return (0,_stegaClean_js__WEBPACK_IMPORTED_MODULE_0__.C)(\n        value,\n        {\n          origin: \"sanity.io\",\n          href: createEditUrl({\n            baseUrl,\n            workspace,\n            tool,\n            id,\n            type,\n            path: sourcePath,\n            ...!config.omitCrossDatasetReferenceData && { dataset, projectId }\n          })\n        },\n        // We use custom logic to determine if we should skip encoding\n        !1\n      );\n    }\n  );\n  if (logger) {\n    const isSkipping = report.skipped.length, isEncoding = report.encoded.length;\n    if ((isSkipping || isEncoding) && ((logger?.groupCollapsed || logger.log)?.(\"[@sanity/client]: Encoding source map into result\"), logger.log?.(\n      `[@sanity/client]: Paths encoded: ${report.encoded.length}, skipped: ${report.skipped.length}`\n    )), report.encoded.length > 0 && (logger?.log?.(\"[@sanity/client]: Table of encoded paths\"), (logger?.table || logger.log)?.(report.encoded)), report.skipped.length > 0) {\n      const skipped = /* @__PURE__ */ new Set();\n      for (const { path } of report.skipped)\n        skipped.add(path.replace(reKeySegment, \"0\").replace(/\\[\\d+\\]/g, \"[]\"));\n      logger?.log?.(\"[@sanity/client]: List of skipped paths\", [...skipped.values()]);\n    }\n    (isSkipping || isEncoding) && logger?.groupEnd?.();\n  }\n  return resultWithStega;\n}\nfunction prettyPathForLogging(path) {\n  return toString(jsonPathToStudioPath(path));\n}\nvar stegaEncodeSourceMap$1 = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  stegaEncodeSourceMap\n});\n\n//# sourceMappingURL=stegaEncodeSourceMap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/index.browser.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/index.browser.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePatch: () => (/* binding */ BasePatch),\n/* harmony export */   BaseTransaction: () => (/* binding */ BaseTransaction),\n/* harmony export */   ChannelError: () => (/* binding */ ChannelError),\n/* harmony export */   ClientError: () => (/* binding */ ClientError),\n/* harmony export */   ConnectionFailedError: () => (/* binding */ ConnectionFailedError),\n/* harmony export */   CorsOriginError: () => (/* binding */ CorsOriginError),\n/* harmony export */   DisconnectError: () => (/* binding */ DisconnectError),\n/* harmony export */   MessageError: () => (/* binding */ MessageError),\n/* harmony export */   MessageParseError: () => (/* binding */ MessageParseError),\n/* harmony export */   ObservablePatch: () => (/* binding */ ObservablePatch),\n/* harmony export */   ObservableSanityClient: () => (/* binding */ ObservableSanityClient),\n/* harmony export */   ObservableTransaction: () => (/* binding */ ObservableTransaction),\n/* harmony export */   Patch: () => (/* binding */ Patch),\n/* harmony export */   SanityClient: () => (/* binding */ SanityClient),\n/* harmony export */   ServerError: () => (/* binding */ ServerError),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   connectEventSource: () => (/* binding */ connectEventSource),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   \"default\": () => (/* binding */ deprecatedCreateClient),\n/* harmony export */   requester: () => (/* binding */ requester),\n/* harmony export */   unstable__adapter: () => (/* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_0__.adapter),\n/* harmony export */   unstable__environment: () => (/* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_0__.environment),\n/* harmony export */   validateApiPerspective: () => (/* binding */ validateApiPerspective)\n/* harmony export */ });\n/* harmony import */ var get_it__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! get-it */ \"(rsc)/./node_modules/.pnpm/get-it@8.6.7_debug@4.4.0/node_modules/get-it/dist/index.react-server.js\");\n/* harmony import */ var get_it_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! get-it/middleware */ \"(rsc)/./node_modules/.pnpm/get-it@8.6.7_debug@4.4.0/node_modules/get-it/dist/middleware.browser.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/defer.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/isObservable.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/of.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/from.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/lastValueFrom.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/catchError.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/concat.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/timer.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/throwError.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/tap.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/finalize.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/share.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/merge.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! rxjs */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/empty.js\");\n/* harmony import */ var _chunks_es_stegaClean_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_chunks-es/stegaClean.js */ \"(rsc)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! rxjs/operators */ \"(rsc)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/cjs/operators/index.js\");\n\n\n\n\n\n\nclass ClientError extends Error {\n  response;\n  statusCode = 400;\n  responseBody;\n  details;\n  constructor(res) {\n    const props = extractErrorProps(res);\n    super(props.message), Object.assign(this, props);\n  }\n}\nclass ServerError extends Error {\n  response;\n  statusCode = 500;\n  responseBody;\n  details;\n  constructor(res) {\n    const props = extractErrorProps(res);\n    super(props.message), Object.assign(this, props);\n  }\n}\nfunction extractErrorProps(res) {\n  const body = res.body, props = {\n    response: res,\n    statusCode: res.statusCode,\n    responseBody: stringifyBody(body, res),\n    message: \"\",\n    details: void 0\n  };\n  if (body.error && body.message)\n    return props.message = `${body.error} - ${body.message}`, props;\n  if (isMutationError(body) || isActionError(body)) {\n    const allItems = body.error.items || [], items = allItems.slice(0, 5).map((item) => item.error?.description).filter(Boolean);\n    let itemsStr = items.length ? `:\n- ${items.join(`\n- `)}` : \"\";\n    return allItems.length > 5 && (itemsStr += `\n...and ${allItems.length - 5} more`), props.message = `${body.error.description}${itemsStr}`, props.details = body.error, props;\n  }\n  return body.error && body.error.description ? (props.message = body.error.description, props.details = body.error, props) : (props.message = body.error || body.message || httpErrorMessage(res), props);\n}\nfunction isMutationError(body) {\n  return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"mutationError\" && typeof body.error.description == \"string\";\n}\nfunction isActionError(body) {\n  return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"actionError\" && typeof body.error.description == \"string\";\n}\nfunction isPlainObject(obj) {\n  return typeof obj == \"object\" && obj !== null && !Array.isArray(obj);\n}\nfunction httpErrorMessage(res) {\n  const statusMessage = res.statusMessage ? ` ${res.statusMessage}` : \"\";\n  return `${res.method}-request to ${res.url} resulted in HTTP ${res.statusCode}${statusMessage}`;\n}\nfunction stringifyBody(body, res) {\n  return (res.headers[\"content-type\"] || \"\").toLowerCase().indexOf(\"application/json\") !== -1 ? JSON.stringify(body, null, 2) : body;\n}\nclass CorsOriginError extends Error {\n  projectId;\n  addOriginUrl;\n  constructor({ projectId: projectId2 }) {\n    super(\"CorsOriginError\"), this.name = \"CorsOriginError\", this.projectId = projectId2;\n    const url = new URL(`https://sanity.io/manage/project/${projectId2}/api`);\n    if (typeof location < \"u\") {\n      const { origin } = location;\n      url.searchParams.set(\"cors\", \"add\"), url.searchParams.set(\"origin\", origin), this.addOriginUrl = url, this.message = `The current origin is not allowed to connect to the Live Content API. Add it here: ${url}`;\n    } else\n      this.message = `The current origin is not allowed to connect to the Live Content API. Change your configuration here: ${url}`;\n  }\n}\nconst httpError = {\n  onResponse: (res) => {\n    if (res.statusCode >= 500)\n      throw new ServerError(res);\n    if (res.statusCode >= 400)\n      throw new ClientError(res);\n    return res;\n  }\n};\nfunction printWarnings() {\n  const seen = {};\n  return {\n    onResponse: (res) => {\n      const warn = res.headers[\"x-sanity-warning\"], warnings = Array.isArray(warn) ? warn : [warn];\n      for (const msg of warnings)\n        !msg || seen[msg] || (seen[msg] = !0, console.warn(msg));\n      return res;\n    }\n  };\n}\nfunction defineHttpRequest(envMiddleware2) {\n  return (0,get_it__WEBPACK_IMPORTED_MODULE_0__.getIt)([\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.retry)({ shouldRetry }),\n    ...envMiddleware2,\n    printWarnings(),\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.jsonRequest)(),\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.jsonResponse)(),\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.progress)(),\n    httpError,\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.observable)({ implementation: rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable })\n  ]);\n}\nfunction shouldRetry(err, attempt, options) {\n  if (options.maxRetries === 0) return !1;\n  const isSafe = options.method === \"GET\" || options.method === \"HEAD\", isQuery = (options.uri || options.url).startsWith(\"/data/query\"), isRetriableResponse = err.response && (err.response.statusCode === 429 || err.response.statusCode === 502 || err.response.statusCode === 503);\n  return (isSafe || isQuery) && isRetriableResponse ? !0 : get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.retry.shouldRetry(err, attempt, options);\n}\nconst BASE_URL = \"https://www.sanity.io/help/\";\nfunction generateHelpUrl(slug) {\n  return BASE_URL + slug;\n}\nconst VALID_ASSET_TYPES = [\"image\", \"file\"], VALID_INSERT_LOCATIONS = [\"before\", \"after\", \"replace\"], dataset = (name) => {\n  if (!/^(~[a-z0-9]{1}[-\\w]{0,63}|[a-z0-9]{1}[-\\w]{0,63})$/.test(name))\n    throw new Error(\n      \"Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters\"\n    );\n}, projectId = (id) => {\n  if (!/^[-a-z0-9]+$/i.test(id))\n    throw new Error(\"`projectId` can only contain only a-z, 0-9 and dashes\");\n}, validateAssetType = (type) => {\n  if (VALID_ASSET_TYPES.indexOf(type) === -1)\n    throw new Error(`Invalid asset type: ${type}. Must be one of ${VALID_ASSET_TYPES.join(\", \")}`);\n}, validateObject = (op, val) => {\n  if (val === null || typeof val != \"object\" || Array.isArray(val))\n    throw new Error(`${op}() takes an object of properties`);\n}, validateDocumentId = (op, id) => {\n  if (typeof id != \"string\" || !/^[a-z0-9_][a-z0-9_.-]{0,127}$/i.test(id) || id.includes(\"..\"))\n    throw new Error(`${op}(): \"${id}\" is not a valid document ID`);\n}, requireDocumentId = (op, doc) => {\n  if (!doc._id)\n    throw new Error(`${op}() requires that the document contains an ID (\"_id\" property)`);\n  validateDocumentId(op, doc._id);\n}, validateInsert = (at, selector, items) => {\n  const signature = \"insert(at, selector, items)\";\n  if (VALID_INSERT_LOCATIONS.indexOf(at) === -1) {\n    const valid = VALID_INSERT_LOCATIONS.map((loc) => `\"${loc}\"`).join(\", \");\n    throw new Error(`${signature} takes an \"at\"-argument which is one of: ${valid}`);\n  }\n  if (typeof selector != \"string\")\n    throw new Error(`${signature} takes a \"selector\"-argument which must be a string`);\n  if (!Array.isArray(items))\n    throw new Error(`${signature} takes an \"items\"-argument which must be an array`);\n}, hasDataset = (config) => {\n  if (!config.dataset)\n    throw new Error(\"`dataset` must be provided to perform queries\");\n  return config.dataset || \"\";\n}, requestTag = (tag) => {\n  if (typeof tag != \"string\" || !/^[a-z0-9._-]{1,75}$/i.test(tag))\n    throw new Error(\n      \"Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.\"\n    );\n  return tag;\n};\nfunction once(fn) {\n  let didCall = !1, returnValue;\n  return (...args) => (didCall || (returnValue = fn(...args), didCall = !0), returnValue);\n}\nconst createWarningPrinter = (message) => (\n  // eslint-disable-next-line no-console\n  once((...args) => console.warn(message.join(\" \"), ...args))\n), printCdnAndWithCredentialsWarning = createWarningPrinter([\n  \"Because you set `withCredentials` to true, we will override your `useCdn`\",\n  \"setting to be false since (cookie-based) credentials are never set on the CDN\"\n]), printCdnWarning = createWarningPrinter([\n  \"Since you haven't set a value for `useCdn`, we will deliver content using our\",\n  \"global, edge-cached API-CDN. If you wish to have content delivered faster, set\",\n  \"`useCdn: false` to use the Live API. Note: You may incur higher costs using the live API.\"\n]), printCdnPreviewDraftsWarning = createWarningPrinter([\n  \"The Sanity client is configured with the `perspective` set to `drafts` or `previewDrafts`, which doesn't support the API-CDN.\",\n  \"The Live API will be used instead. Set `useCdn: false` in your configuration to hide this warning.\"\n]), printPreviewDraftsDeprecationWarning = createWarningPrinter([\n  \"The `previewDrafts` perspective has been renamed to  `drafts` and will be removed in a future API version\"\n]), printBrowserTokenWarning = createWarningPrinter([\n  \"You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.\",\n  `See ${generateHelpUrl(\n    \"js-client-browser-token\"\n  )} for more information and how to hide this warning.`\n]), printCredentialedTokenWarning = createWarningPrinter([\n  \"You have configured Sanity client to use a token, but also provided `withCredentials: true`.\",\n  \"This is no longer supported - only token will be used - remove `withCredentials: true`.\"\n]), printNoApiVersionSpecifiedWarning = createWarningPrinter([\n  \"Using the Sanity client without specifying an API version is deprecated.\",\n  `See ${generateHelpUrl(\"js-client-api-version\")}`\n]), printNoDefaultExport = createWarningPrinter([\n  \"The default export of @sanity/client has been deprecated. Use the named export `createClient` instead.\"\n]), defaultCdnHost = \"apicdn.sanity.io\", defaultConfig = {\n  apiHost: \"https://api.sanity.io\",\n  apiVersion: \"1\",\n  useProjectHostname: !0,\n  stega: { enabled: !1 }\n}, LOCALHOSTS = [\"localhost\", \"127.0.0.1\", \"0.0.0.0\"], isLocal = (host) => LOCALHOSTS.indexOf(host) !== -1;\nfunction validateApiVersion(apiVersion) {\n  if (apiVersion === \"1\" || apiVersion === \"X\")\n    return;\n  const apiDate = new Date(apiVersion);\n  if (!(/^\\d{4}-\\d{2}-\\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0))\n    throw new Error(\"Invalid API version string, expected `1` or date in format `YYYY-MM-DD`\");\n}\nfunction validateApiPerspective(perspective) {\n  if (Array.isArray(perspective) && perspective.length > 1 && perspective.includes(\"raw\"))\n    throw new TypeError(\n      'Invalid API perspective value: \"raw\". The raw-perspective can not be combined with other perspectives'\n    );\n}\nconst initConfig = (config, prevConfig) => {\n  const specifiedConfig = {\n    ...prevConfig,\n    ...config,\n    stega: {\n      ...typeof prevConfig.stega == \"boolean\" ? { enabled: prevConfig.stega } : prevConfig.stega || defaultConfig.stega,\n      ...typeof config.stega == \"boolean\" ? { enabled: config.stega } : config.stega || {}\n    }\n  };\n  specifiedConfig.apiVersion || printNoApiVersionSpecifiedWarning();\n  const newConfig = {\n    ...defaultConfig,\n    ...specifiedConfig\n  }, projectBased = newConfig.useProjectHostname;\n  if (typeof Promise > \"u\") {\n    const helpUrl = generateHelpUrl(\"js-client-promise-polyfill\");\n    throw new Error(`No native Promise-implementation found, polyfill needed - see ${helpUrl}`);\n  }\n  if (projectBased && !newConfig.projectId)\n    throw new Error(\"Configuration must contain `projectId`\");\n  if (typeof newConfig.perspective < \"u\" && validateApiPerspective(newConfig.perspective), \"encodeSourceMap\" in newConfig)\n    throw new Error(\n      \"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMap' is not supported in '@sanity/client'. Did you mean 'stega.enabled'?\"\n    );\n  if (\"encodeSourceMapAtPath\" in newConfig)\n    throw new Error(\n      \"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMapAtPath' is not supported in '@sanity/client'. Did you mean 'stega.filter'?\"\n    );\n  if (typeof newConfig.stega.enabled != \"boolean\")\n    throw new Error(`stega.enabled must be a boolean, received ${newConfig.stega.enabled}`);\n  if (newConfig.stega.enabled && newConfig.stega.studioUrl === void 0)\n    throw new Error(\"stega.studioUrl must be defined when stega.enabled is true\");\n  if (newConfig.stega.enabled && typeof newConfig.stega.studioUrl != \"string\" && typeof newConfig.stega.studioUrl != \"function\")\n    throw new Error(\n      `stega.studioUrl must be a string or a function, received ${newConfig.stega.studioUrl}`\n    );\n  const isBrowser = typeof window < \"u\" && window.location && window.location.hostname, isLocalhost = isBrowser && isLocal(window.location.hostname), hasToken = !!newConfig.token;\n  newConfig.withCredentials && hasToken && (printCredentialedTokenWarning(), newConfig.withCredentials = !1), isBrowser && isLocalhost && hasToken && newConfig.ignoreBrowserTokenWarning !== !0 ? printBrowserTokenWarning() : typeof newConfig.useCdn > \"u\" && printCdnWarning(), projectBased && projectId(newConfig.projectId), newConfig.dataset && dataset(newConfig.dataset), \"requestTagPrefix\" in newConfig && (newConfig.requestTagPrefix = newConfig.requestTagPrefix ? requestTag(newConfig.requestTagPrefix).replace(/\\.+$/, \"\") : void 0), newConfig.apiVersion = `${newConfig.apiVersion}`.replace(/^v/, \"\"), newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost, newConfig.useCdn === !0 && newConfig.withCredentials && printCdnAndWithCredentialsWarning(), newConfig.useCdn = newConfig.useCdn !== !1 && !newConfig.withCredentials, validateApiVersion(newConfig.apiVersion);\n  const hostParts = newConfig.apiHost.split(\"://\", 2), protocol = hostParts[0], host = hostParts[1], cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host;\n  return newConfig.useProjectHostname ? (newConfig.url = `${protocol}://${newConfig.projectId}.${host}/v${newConfig.apiVersion}`, newConfig.cdnUrl = `${protocol}://${newConfig.projectId}.${cdnHost}/v${newConfig.apiVersion}`) : (newConfig.url = `${newConfig.apiHost}/v${newConfig.apiVersion}`, newConfig.cdnUrl = newConfig.url), newConfig;\n};\nclass ConnectionFailedError extends Error {\n  name = \"ConnectionFailedError\";\n}\nclass DisconnectError extends Error {\n  name = \"DisconnectError\";\n  reason;\n  constructor(message, reason, options = {}) {\n    super(message, options), this.reason = reason;\n  }\n}\nclass ChannelError extends Error {\n  name = \"ChannelError\";\n  data;\n  constructor(message, data) {\n    super(message), this.data = data;\n  }\n}\nclass MessageError extends Error {\n  name = \"MessageError\";\n  data;\n  constructor(message, data, options = {}) {\n    super(message, options), this.data = data;\n  }\n}\nclass MessageParseError extends Error {\n  name = \"MessageParseError\";\n}\nconst REQUIRED_EVENTS = [\"channelError\", \"disconnect\"];\nfunction connectEventSource(initEventSource, events) {\n  return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.defer)(() => {\n    const es = initEventSource();\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.isObservable)(es) ? es : (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(es);\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)((es) => connectWithESInstance(es, events)));\n}\nfunction connectWithESInstance(es, events) {\n  return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer) => {\n    const emitOpen = events.includes(\"open\"), emitReconnect = events.includes(\"reconnect\");\n    function onError(evt) {\n      if (\"data\" in evt) {\n        const [parseError, event] = parseEvent(evt);\n        observer.error(\n          parseError ? new MessageParseError(\"Unable to parse EventSource error message\", { cause: event }) : new MessageError((event?.data).message, event)\n        );\n        return;\n      }\n      es.readyState === es.CLOSED ? observer.error(new ConnectionFailedError(\"EventSource connection failed\")) : emitReconnect && observer.next({ type: \"reconnect\" });\n    }\n    function onOpen() {\n      observer.next({ type: \"open\" });\n    }\n    function onMessage(message) {\n      const [parseError, event] = parseEvent(message);\n      if (parseError) {\n        observer.error(\n          new MessageParseError(\"Unable to parse EventSource message\", { cause: parseError })\n        );\n        return;\n      }\n      if (message.type === \"channelError\") {\n        observer.error(new ChannelError(extractErrorMessage(event?.data), event.data));\n        return;\n      }\n      if (message.type === \"disconnect\") {\n        observer.error(\n          new DisconnectError(\n            `Server disconnected client: ${event.data?.reason || \"unknown error\"}`\n          )\n        );\n        return;\n      }\n      observer.next({\n        type: message.type,\n        id: message.lastEventId,\n        ...event.data ? { data: event.data } : {}\n      });\n    }\n    es.addEventListener(\"error\", onError), emitOpen && es.addEventListener(\"open\", onOpen);\n    const cleanedEvents = [.../* @__PURE__ */ new Set([...REQUIRED_EVENTS, ...events])].filter((type) => type !== \"error\" && type !== \"open\" && type !== \"reconnect\");\n    return cleanedEvents.forEach((type) => es.addEventListener(type, onMessage)), () => {\n      es.removeEventListener(\"error\", onError), emitOpen && es.removeEventListener(\"open\", onOpen), cleanedEvents.forEach((type) => es.removeEventListener(type, onMessage)), es.close();\n    };\n  });\n}\nfunction parseEvent(message) {\n  try {\n    const data = typeof message.data == \"string\" && JSON.parse(message.data);\n    return [\n      null,\n      {\n        type: message.type,\n        id: message.lastEventId,\n        ...isEmptyObject(data) ? {} : { data }\n      }\n    ];\n  } catch (err) {\n    return [err, null];\n  }\n}\nfunction extractErrorMessage(err) {\n  return err.error ? err.error.description ? err.error.description : typeof err.error == \"string\" ? err.error : JSON.stringify(err.error, null, 2) : err.message || \"Unknown listener error\";\n}\nfunction isEmptyObject(data) {\n  for (const _ in data)\n    return !1;\n  return !0;\n}\nfunction getSelection(sel) {\n  if (typeof sel == \"string\")\n    return { id: sel };\n  if (Array.isArray(sel))\n    return { query: \"*[_id in $ids]\", params: { ids: sel } };\n  if (typeof sel == \"object\" && sel !== null && \"query\" in sel && typeof sel.query == \"string\")\n    return \"params\" in sel && typeof sel.params == \"object\" && sel.params !== null ? { query: sel.query, params: sel.params } : { query: sel.query };\n  const selectionOpts = [\n    \"* Document ID (<docId>)\",\n    \"* Array of document IDs\",\n    \"* Object containing `query`\"\n  ].join(`\n`);\n  throw new Error(`Unknown selection - must be one of:\n\n${selectionOpts}`);\n}\nclass BasePatch {\n  selection;\n  operations;\n  constructor(selection, operations = {}) {\n    this.selection = selection, this.operations = operations;\n  }\n  /**\n   * Sets the given attributes to the document. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */\n  set(attrs) {\n    return this._assign(\"set\", attrs);\n  }\n  /**\n   * Sets the given attributes to the document if they are not currently set. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */\n  setIfMissing(attrs) {\n    return this._assign(\"setIfMissing\", attrs);\n  }\n  /**\n   * Performs a \"diff-match-patch\" operation on the string attributes provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to perform operation on. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"dmp\"\\}\n   */\n  diffMatchPatch(attrs) {\n    return validateObject(\"diffMatchPatch\", attrs), this._assign(\"diffMatchPatch\", attrs);\n  }\n  /**\n   * Unsets the attribute paths provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attribute paths to unset.\n   */\n  unset(attrs) {\n    if (!Array.isArray(attrs))\n      throw new Error(\"unset(attrs) takes an array of attributes to unset, non-array given\");\n    return this.operations = Object.assign({}, this.operations, { unset: attrs }), this;\n  }\n  /**\n   * Increment a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to increment, values representing the number to increment by.\n   */\n  inc(attrs) {\n    return this._assign(\"inc\", attrs);\n  }\n  /**\n   * Decrement a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to decrement, values representing the number to decrement by.\n   */\n  dec(attrs) {\n    return this._assign(\"dec\", attrs);\n  }\n  /**\n   * Provides methods for modifying arrays, by inserting, appending and replacing elements via a JSONPath expression.\n   *\n   * @param at - Location to insert at, relative to the given selector, or 'replace' the matched path\n   * @param selector - JSONPath expression, eg `comments[-1]` or `blocks[_key==\"abc123\"]`\n   * @param items - Array of items to insert/replace\n   */\n  insert(at, selector, items) {\n    return validateInsert(at, selector, items), this._assign(\"insert\", { [at]: selector, items });\n  }\n  /**\n   * Append the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to append to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to append to the array\n   */\n  append(selector, items) {\n    return this.insert(\"after\", `${selector}[-1]`, items);\n  }\n  /**\n   * Prepend the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to prepend to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to prepend to the array\n   */\n  prepend(selector, items) {\n    return this.insert(\"before\", `${selector}[0]`, items);\n  }\n  /**\n   * Change the contents of an array by removing existing elements and/or adding new elements.\n   *\n   * @param selector - Attribute or JSONPath expression for array\n   * @param start - Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.x\n   * @param deleteCount - An integer indicating the number of old array elements to remove.\n   * @param items - The elements to add to the array, beginning at the start index. If you don't specify any elements, splice() will only remove elements from the array.\n   */\n  splice(selector, start, deleteCount, items) {\n    const delAll = typeof deleteCount > \"u\" || deleteCount === -1, startIndex = start < 0 ? start - 1 : start, delCount = delAll ? -1 : Math.max(0, start + deleteCount), delRange = startIndex < 0 && delCount >= 0 ? \"\" : delCount, rangeSelector = `${selector}[${startIndex}:${delRange}]`;\n    return this.insert(\"replace\", rangeSelector, items || []);\n  }\n  /**\n   * Adds a revision clause, preventing the document from being patched if the `_rev` property does not match the given value\n   *\n   * @param rev - Revision to lock the patch to\n   */\n  ifRevisionId(rev) {\n    return this.operations.ifRevisionID = rev, this;\n  }\n  /**\n   * Return a plain JSON representation of the patch\n   */\n  serialize() {\n    return { ...getSelection(this.selection), ...this.operations };\n  }\n  /**\n   * Return a plain JSON representation of the patch\n   */\n  toJSON() {\n    return this.serialize();\n  }\n  /**\n   * Clears the patch of all operations\n   */\n  reset() {\n    return this.operations = {}, this;\n  }\n  _assign(op, props, merge2 = !0) {\n    return validateObject(op, props), this.operations = Object.assign({}, this.operations, {\n      [op]: Object.assign({}, merge2 && this.operations[op] || {}, props)\n    }), this;\n  }\n  _set(op, props) {\n    return this._assign(op, props, !1);\n  }\n}\nclass ObservablePatch extends BasePatch {\n  #client;\n  constructor(selection, operations, client) {\n    super(selection, operations), this.#client = client;\n  }\n  /**\n   * Clones the patch\n   */\n  clone() {\n    return new ObservablePatch(this.selection, { ...this.operations }, this.#client);\n  }\n  commit(options) {\n    if (!this.#client)\n      throw new Error(\n        \"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\"\n      );\n    const returnFirst = typeof this.selection == \"string\", opts = Object.assign({ returnFirst, returnDocuments: !0 }, options);\n    return this.#client.mutate({ patch: this.serialize() }, opts);\n  }\n}\nclass Patch extends BasePatch {\n  #client;\n  constructor(selection, operations, client) {\n    super(selection, operations), this.#client = client;\n  }\n  /**\n   * Clones the patch\n   */\n  clone() {\n    return new Patch(this.selection, { ...this.operations }, this.#client);\n  }\n  commit(options) {\n    if (!this.#client)\n      throw new Error(\n        \"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\"\n      );\n    const returnFirst = typeof this.selection == \"string\", opts = Object.assign({ returnFirst, returnDocuments: !0 }, options);\n    return this.#client.mutate({ patch: this.serialize() }, opts);\n  }\n}\nconst defaultMutateOptions = { returnDocuments: !1 };\nclass BaseTransaction {\n  operations;\n  trxId;\n  constructor(operations = [], transactionId) {\n    this.operations = operations, this.trxId = transactionId;\n  }\n  /**\n   * Creates a new Sanity document. If `_id` is provided and already exists, the mutation will fail. If no `_id` is given, one will automatically be generated by the database.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create. Requires a `_type` property.\n   */\n  create(doc) {\n    return validateObject(\"create\", doc), this._add({ create: doc });\n  }\n  /**\n   * Creates a new Sanity document. If a document with the same `_id` already exists, the create operation will be ignored.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create if it does not already exist. Requires `_id` and `_type` properties.\n   */\n  createIfNotExists(doc) {\n    const op = \"createIfNotExists\";\n    return validateObject(op, doc), requireDocumentId(op, doc), this._add({ [op]: doc });\n  }\n  /**\n   * Creates a new Sanity document, or replaces an existing one if the same `_id` is already used.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create or replace. Requires `_id` and `_type` properties.\n   */\n  createOrReplace(doc) {\n    const op = \"createOrReplace\";\n    return validateObject(op, doc), requireDocumentId(op, doc), this._add({ [op]: doc });\n  }\n  /**\n   * Deletes the document with the given document ID\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param documentId - Document ID to delete\n   */\n  delete(documentId) {\n    return validateDocumentId(\"delete\", documentId), this._add({ delete: { id: documentId } });\n  }\n  transactionId(id) {\n    return id ? (this.trxId = id, this) : this.trxId;\n  }\n  /**\n   * Return a plain JSON representation of the transaction\n   */\n  serialize() {\n    return [...this.operations];\n  }\n  /**\n   * Return a plain JSON representation of the transaction\n   */\n  toJSON() {\n    return this.serialize();\n  }\n  /**\n   * Clears the transaction of all operations\n   */\n  reset() {\n    return this.operations = [], this;\n  }\n  _add(mut) {\n    return this.operations.push(mut), this;\n  }\n}\nclass Transaction extends BaseTransaction {\n  #client;\n  constructor(operations, client, transactionId) {\n    super(operations, transactionId), this.#client = client;\n  }\n  /**\n   * Clones the transaction\n   */\n  clone() {\n    return new Transaction([...this.operations], this.#client, this.trxId);\n  }\n  commit(options) {\n    if (!this.#client)\n      throw new Error(\n        \"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\"\n      );\n    return this.#client.mutate(\n      this.serialize(),\n      Object.assign({ transactionId: this.trxId }, defaultMutateOptions, options || {})\n    );\n  }\n  patch(patchOrDocumentId, patchOps) {\n    const isBuilder = typeof patchOps == \"function\", isPatch = typeof patchOrDocumentId != \"string\" && patchOrDocumentId instanceof Patch, isMutationSelection = typeof patchOrDocumentId == \"object\" && (\"query\" in patchOrDocumentId || \"id\" in patchOrDocumentId);\n    if (isPatch)\n      return this._add({ patch: patchOrDocumentId.serialize() });\n    if (isBuilder) {\n      const patch = patchOps(new Patch(patchOrDocumentId, {}, this.#client));\n      if (!(patch instanceof Patch))\n        throw new Error(\"function passed to `patch()` must return the patch\");\n      return this._add({ patch: patch.serialize() });\n    }\n    if (isMutationSelection) {\n      const patch = new Patch(patchOrDocumentId, patchOps || {}, this.#client);\n      return this._add({ patch: patch.serialize() });\n    }\n    return this._add({ patch: { id: patchOrDocumentId, ...patchOps } });\n  }\n}\nclass ObservableTransaction extends BaseTransaction {\n  #client;\n  constructor(operations, client, transactionId) {\n    super(operations, transactionId), this.#client = client;\n  }\n  /**\n   * Clones the transaction\n   */\n  clone() {\n    return new ObservableTransaction([...this.operations], this.#client, this.trxId);\n  }\n  commit(options) {\n    if (!this.#client)\n      throw new Error(\n        \"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\"\n      );\n    return this.#client.mutate(\n      this.serialize(),\n      Object.assign({ transactionId: this.trxId }, defaultMutateOptions, options || {})\n    );\n  }\n  patch(patchOrDocumentId, patchOps) {\n    const isBuilder = typeof patchOps == \"function\";\n    if (typeof patchOrDocumentId != \"string\" && patchOrDocumentId instanceof ObservablePatch)\n      return this._add({ patch: patchOrDocumentId.serialize() });\n    if (isBuilder) {\n      const patch = patchOps(new ObservablePatch(patchOrDocumentId, {}, this.#client));\n      if (!(patch instanceof ObservablePatch))\n        throw new Error(\"function passed to `patch()` must return the patch\");\n      return this._add({ patch: patch.serialize() });\n    }\n    return this._add({ patch: { id: patchOrDocumentId, ...patchOps } });\n  }\n}\nconst projectHeader = \"X-Sanity-Project-ID\";\nfunction requestOptions(config, overrides = {}) {\n  const headers = {}, token = overrides.token || config.token;\n  token && (headers.Authorization = `Bearer ${token}`), !overrides.useGlobalApi && !config.useProjectHostname && config.projectId && (headers[projectHeader] = config.projectId);\n  const withCredentials = !!(typeof overrides.withCredentials > \"u\" ? config.withCredentials : overrides.withCredentials), timeout = typeof overrides.timeout > \"u\" ? config.timeout : overrides.timeout;\n  return Object.assign({}, overrides, {\n    headers: Object.assign({}, headers, overrides.headers || {}),\n    timeout: typeof timeout > \"u\" ? 5 * 60 * 1e3 : timeout,\n    proxy: overrides.proxy || config.proxy,\n    json: !0,\n    withCredentials,\n    fetch: typeof overrides.fetch == \"object\" && typeof config.fetch == \"object\" ? { ...config.fetch, ...overrides.fetch } : overrides.fetch || config.fetch\n  });\n}\nconst encodeQueryString = ({\n  query,\n  params = {},\n  options = {}\n}) => {\n  const searchParams = new URLSearchParams(), { tag, includeMutations, returnQuery, ...opts } = options;\n  tag && searchParams.append(\"tag\", tag), searchParams.append(\"query\", query);\n  for (const [key, value] of Object.entries(params))\n    searchParams.append(`$${key}`, JSON.stringify(value));\n  for (const [key, value] of Object.entries(opts))\n    value && searchParams.append(key, `${value}`);\n  return returnQuery === !1 && searchParams.append(\"returnQuery\", \"false\"), includeMutations === !1 && searchParams.append(\"includeMutations\", \"false\"), `?${searchParams}`;\n}, excludeFalsey = (param, defValue) => param === !1 ? void 0 : typeof param > \"u\" ? defValue : param, getMutationQuery = (options = {}) => ({\n  dryRun: options.dryRun,\n  returnIds: !0,\n  returnDocuments: excludeFalsey(options.returnDocuments, !0),\n  visibility: options.visibility || \"sync\",\n  autoGenerateArrayKeys: options.autoGenerateArrayKeys,\n  skipCrossDatasetReferenceValidation: options.skipCrossDatasetReferenceValidation\n}), isResponse = (event) => event.type === \"response\", getBody = (event) => event.body, indexBy = (docs, attr) => docs.reduce((indexed, doc) => (indexed[attr(doc)] = doc, indexed), /* @__PURE__ */ Object.create(null)), getQuerySizeLimit = 11264;\nfunction _fetch(client, httpRequest, _stega, query, _params = {}, options = {}) {\n  const stega = \"stega\" in options ? {\n    ..._stega || {},\n    ...typeof options.stega == \"boolean\" ? { enabled: options.stega } : options.stega || {}\n  } : _stega, params = stega.enabled ? (0,_chunks_es_stegaClean_js__WEBPACK_IMPORTED_MODULE_7__.stegaClean)(_params) : _params, mapResponse = options.filterResponse === !1 ? (res) => res : (res) => res.result, { cache, next, ...opts } = {\n    // Opt out of setting a `signal` on an internal `fetch` if one isn't provided.\n    // This is necessary in React Server Components to avoid opting out of Request Memoization.\n    useAbortSignal: typeof options.signal < \"u\",\n    // Set `resultSourceMap' when stega is enabled, as it's required for encoding.\n    resultSourceMap: stega.enabled ? \"withKeyArraySelector\" : options.resultSourceMap,\n    ...options,\n    // Default to not returning the query, unless `filterResponse` is `false`,\n    // or `returnQuery` is explicitly set. `true` is the default in Content Lake, so skip if truthy\n    returnQuery: options.filterResponse === !1 && options.returnQuery !== !1\n  }, reqOpts = typeof cache < \"u\" || typeof next < \"u\" ? { ...opts, fetch: { cache, next } } : opts, $request = _dataRequest(client, httpRequest, \"query\", { query, params }, reqOpts);\n  return stega.enabled ? $request.pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.combineLatestWith)(\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.from)(\n        __webpack_require__.e(/*! import() */ \"vendor-chunks/@sanity+client@6.28.4_debug@4.4.0\").then(__webpack_require__.bind(__webpack_require__, /*! ./_chunks-es/stegaEncodeSourceMap.js */ \"(rsc)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js\")).then(function(n) {\n          return n.stegaEncodeSourceMap$1;\n        }).then(\n          ({ stegaEncodeSourceMap }) => stegaEncodeSourceMap\n        )\n      )\n    ),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(\n      ([res, stegaEncodeSourceMap]) => {\n        const result = stegaEncodeSourceMap(res.result, res.resultSourceMap, stega);\n        return mapResponse({ ...res, result });\n      }\n    )\n  ) : $request.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(mapResponse));\n}\nfunction _getDocument(client, httpRequest, id, opts = {}) {\n  const options = {\n    uri: _getDataUrl(client, \"doc\", id),\n    json: !0,\n    tag: opts.tag,\n    signal: opts.signal\n  };\n  return _requestObservable(client, httpRequest, options).pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)(isResponse),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((event) => event.body.documents && event.body.documents[0])\n  );\n}\nfunction _getDocuments(client, httpRequest, ids, opts = {}) {\n  const options = {\n    uri: _getDataUrl(client, \"doc\", ids.join(\",\")),\n    json: !0,\n    tag: opts.tag,\n    signal: opts.signal\n  };\n  return _requestObservable(client, httpRequest, options).pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)(isResponse),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((event) => {\n      const indexed = indexBy(event.body.documents || [], (doc) => doc._id);\n      return ids.map((id) => indexed[id] || null);\n    })\n  );\n}\nfunction _createIfNotExists(client, httpRequest, doc, options) {\n  return requireDocumentId(\"createIfNotExists\", doc), _create(client, httpRequest, doc, \"createIfNotExists\", options);\n}\nfunction _createOrReplace(client, httpRequest, doc, options) {\n  return requireDocumentId(\"createOrReplace\", doc), _create(client, httpRequest, doc, \"createOrReplace\", options);\n}\nfunction _delete(client, httpRequest, selection, options) {\n  return _dataRequest(\n    client,\n    httpRequest,\n    \"mutate\",\n    { mutations: [{ delete: getSelection(selection) }] },\n    options\n  );\n}\nfunction _mutate(client, httpRequest, mutations, options) {\n  let mut;\n  mutations instanceof Patch || mutations instanceof ObservablePatch ? mut = { patch: mutations.serialize() } : mutations instanceof Transaction || mutations instanceof ObservableTransaction ? mut = mutations.serialize() : mut = mutations;\n  const muts = Array.isArray(mut) ? mut : [mut], transactionId = options && options.transactionId || void 0;\n  return _dataRequest(client, httpRequest, \"mutate\", { mutations: muts, transactionId }, options);\n}\nfunction _action(client, httpRequest, actions, options) {\n  const acts = Array.isArray(actions) ? actions : [actions], transactionId = options && options.transactionId || void 0, skipCrossDatasetReferenceValidation = options && options.skipCrossDatasetReferenceValidation || void 0, dryRun = options && options.dryRun || void 0;\n  return _dataRequest(\n    client,\n    httpRequest,\n    \"actions\",\n    { actions: acts, transactionId, skipCrossDatasetReferenceValidation, dryRun },\n    options\n  );\n}\nfunction _dataRequest(client, httpRequest, endpoint, body, options = {}) {\n  const isMutation = endpoint === \"mutate\", isAction = endpoint === \"actions\", isQuery = endpoint === \"query\", strQuery = isMutation || isAction ? \"\" : encodeQueryString(body), useGet = !isMutation && !isAction && strQuery.length < getQuerySizeLimit, stringQuery = useGet ? strQuery : \"\", returnFirst = options.returnFirst, { timeout, token, tag, headers, returnQuery, lastLiveEventId, cacheMode } = options, uri = _getDataUrl(client, endpoint, stringQuery), reqOptions = {\n    method: useGet ? \"GET\" : \"POST\",\n    uri,\n    json: !0,\n    body: useGet ? void 0 : body,\n    query: isMutation && getMutationQuery(options),\n    timeout,\n    headers,\n    token,\n    tag,\n    returnQuery,\n    perspective: options.perspective,\n    resultSourceMap: options.resultSourceMap,\n    lastLiveEventId: Array.isArray(lastLiveEventId) ? lastLiveEventId[0] : lastLiveEventId,\n    cacheMode,\n    canUseCdn: isQuery,\n    signal: options.signal,\n    fetch: options.fetch,\n    useAbortSignal: options.useAbortSignal,\n    useCdn: options.useCdn\n  };\n  return _requestObservable(client, httpRequest, reqOptions).pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)(isResponse),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(getBody),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((res) => {\n      if (!isMutation)\n        return res;\n      const results = res.results || [];\n      if (options.returnDocuments)\n        return returnFirst ? results[0] && results[0].document : results.map((mut) => mut.document);\n      const key = returnFirst ? \"documentId\" : \"documentIds\", ids = returnFirst ? results[0] && results[0].id : results.map((mut) => mut.id);\n      return {\n        transactionId: res.transactionId,\n        results,\n        [key]: ids\n      };\n    })\n  );\n}\nfunction _create(client, httpRequest, doc, op, options = {}) {\n  const mutation = { [op]: doc }, opts = Object.assign({ returnFirst: !0, returnDocuments: !0 }, options);\n  return _dataRequest(client, httpRequest, \"mutate\", { mutations: [mutation] }, opts);\n}\nfunction _requestObservable(client, httpRequest, options) {\n  const uri = options.url || options.uri, config = client.config(), canUseCdn = typeof options.canUseCdn > \"u\" ? [\"GET\", \"HEAD\"].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/\") === 0 : options.canUseCdn;\n  let useCdn = (options.useCdn ?? config.useCdn) && canUseCdn;\n  const tag = options.tag && config.requestTagPrefix ? [config.requestTagPrefix, options.tag].join(\".\") : options.tag || config.requestTagPrefix;\n  if (tag && options.tag !== null && (options.query = { tag: requestTag(tag), ...options.query }), [\"GET\", \"HEAD\", \"POST\"].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/query/\") === 0) {\n    const resultSourceMap = options.resultSourceMap ?? config.resultSourceMap;\n    resultSourceMap !== void 0 && resultSourceMap !== !1 && (options.query = { resultSourceMap, ...options.query });\n    const perspectiveOption = options.perspective || config.perspective;\n    typeof perspectiveOption < \"u\" && (perspectiveOption === \"previewDrafts\" && printPreviewDraftsDeprecationWarning(), validateApiPerspective(perspectiveOption), options.query = {\n      perspective: Array.isArray(perspectiveOption) ? perspectiveOption.join(\",\") : perspectiveOption,\n      ...options.query\n    }, (Array.isArray(perspectiveOption) && perspectiveOption.length > 0 || // previewDrafts was renamed to drafts, but keep for backwards compat\n    perspectiveOption === \"previewDrafts\" || perspectiveOption === \"drafts\") && useCdn && (useCdn = !1, printCdnPreviewDraftsWarning())), options.lastLiveEventId && (options.query = { ...options.query, lastLiveEventId: options.lastLiveEventId }), options.returnQuery === !1 && (options.query = { returnQuery: \"false\", ...options.query }), useCdn && options.cacheMode == \"noStale\" && (options.query = { cacheMode: \"noStale\", ...options.query });\n  }\n  const reqOptions = requestOptions(\n    config,\n    Object.assign({}, options, {\n      url: _getUrl(client, uri, useCdn)\n    })\n  ), request = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(\n    (subscriber) => httpRequest(reqOptions, config.requester).subscribe(subscriber)\n  );\n  return options.signal ? request.pipe(_withAbortSignal(options.signal)) : request;\n}\nfunction _request(client, httpRequest, options) {\n  return _requestObservable(client, httpRequest, options).pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)((event) => event.type === \"response\"),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((event) => event.body)\n  );\n}\nfunction _getDataUrl(client, operation, path) {\n  const config = client.config(), catalog = hasDataset(config), baseUri = `/${operation}/${catalog}`;\n  return `/data${path ? `${baseUri}/${path}` : baseUri}`.replace(/\\/($|\\?)/, \"$1\");\n}\nfunction _getUrl(client, uri, canUseCdn = !1) {\n  const { url, cdnUrl } = client.config();\n  return `${canUseCdn ? cdnUrl : url}/${uri.replace(/^\\//, \"\")}`;\n}\nfunction _withAbortSignal(signal) {\n  return (input) => new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer) => {\n    const abort = () => observer.error(_createAbortError(signal));\n    if (signal && signal.aborted) {\n      abort();\n      return;\n    }\n    const subscription = input.subscribe(observer);\n    return signal.addEventListener(\"abort\", abort), () => {\n      signal.removeEventListener(\"abort\", abort), subscription.unsubscribe();\n    };\n  });\n}\nconst isDomExceptionSupported = !!globalThis.DOMException;\nfunction _createAbortError(signal) {\n  if (isDomExceptionSupported)\n    return new DOMException(signal?.reason ?? \"The operation was aborted.\", \"AbortError\");\n  const error = new Error(signal?.reason ?? \"The operation was aborted.\");\n  return error.name = \"AbortError\", error;\n}\nclass ObservableAssetsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  upload(assetType, body, options) {\n    return _upload(this.#client, this.#httpRequest, assetType, body, options);\n  }\n}\nclass AssetsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  upload(assetType, body, options) {\n    const observable2 = _upload(this.#client, this.#httpRequest, assetType, body, options);\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      observable2.pipe(\n        (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)((event) => event.type === \"response\"),\n        (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(\n          (event) => event.body.document\n        )\n      )\n    );\n  }\n}\nfunction _upload(client, httpRequest, assetType, body, opts = {}) {\n  validateAssetType(assetType);\n  let meta = opts.extract || void 0;\n  meta && !meta.length && (meta = [\"none\"]);\n  const dataset2 = hasDataset(client.config()), assetEndpoint = assetType === \"image\" ? \"images\" : \"files\", options = optionsFromFile(opts, body), { tag, label, title, description, creditLine, filename, source } = options, query = {\n    label,\n    title,\n    description,\n    filename,\n    meta,\n    creditLine\n  };\n  return source && (query.sourceId = source.id, query.sourceName = source.name, query.sourceUrl = source.url), _requestObservable(client, httpRequest, {\n    tag,\n    method: \"POST\",\n    timeout: options.timeout || 0,\n    uri: `/assets/${assetEndpoint}/${dataset2}`,\n    headers: options.contentType ? { \"Content-Type\": options.contentType } : {},\n    query,\n    body\n  });\n}\nfunction optionsFromFile(opts, file) {\n  return typeof File > \"u\" || !(file instanceof File) ? opts : Object.assign(\n    {\n      filename: opts.preserveFilename === !1 ? void 0 : file.name,\n      contentType: file.type\n    },\n    opts\n  );\n}\nvar defaults = (obj, defaults2) => Object.keys(defaults2).concat(Object.keys(obj)).reduce((target, prop) => (target[prop] = typeof obj[prop] > \"u\" ? defaults2[prop] : obj[prop], target), {});\nconst pick = (obj, props) => props.reduce((selection, prop) => (typeof obj[prop] > \"u\" || (selection[prop] = obj[prop]), selection), {}), eventSourcePolyfill = (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.defer)(() => Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/eventsource@2.0.2\"), __webpack_require__.e(\"vendor-chunks/@sanity+eventsource@5.0.2\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! @sanity/eventsource */ \"(rsc)/./node_modules/.pnpm/@sanity+eventsource@5.0.2/node_modules/@sanity/eventsource/node.js\", 19))).pipe(\n  (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(({ default: EventSource2 }) => EventSource2),\n  (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.shareReplay)(1)\n);\nfunction reconnectOnConnectionFailure() {\n  return function(source) {\n    return source.pipe(\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.catchError)((err, caught) => err instanceof ConnectionFailedError ? (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.concat)((0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)({ type: \"reconnect\" }), (0,rxjs__WEBPACK_IMPORTED_MODULE_14__.timer)(1e3).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)(() => caught))) : (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.throwError)(() => err))\n    );\n  };\n}\nconst MAX_URL_LENGTH = 14800, possibleOptions = [\n  \"includePreviousRevision\",\n  \"includeResult\",\n  \"includeMutations\",\n  \"includeAllVersions\",\n  \"visibility\",\n  \"effectFormat\",\n  \"tag\"\n], defaultOptions = {\n  includeResult: !0\n};\nfunction _listen(query, params, opts = {}) {\n  const { url, token, withCredentials, requestTagPrefix } = this.config(), tag = opts.tag && requestTagPrefix ? [requestTagPrefix, opts.tag].join(\".\") : opts.tag, options = { ...defaults(opts, defaultOptions), tag }, listenOpts = pick(options, possibleOptions), qs = encodeQueryString({ query, params, options: { tag, ...listenOpts } }), uri = `${url}${_getDataUrl(this, \"listen\", qs)}`;\n  if (uri.length > MAX_URL_LENGTH)\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.throwError)(() => new Error(\"Query too large for listener\"));\n  const listenFor = options.events ? options.events : [\"mutation\"], esOptions = {};\n  return withCredentials && (esOptions.withCredentials = !0), token && (esOptions.headers = {\n    Authorization: `Bearer ${token}`\n  }), connectEventSource(() => (\n    // use polyfill if there is no global EventSource or if we need to set headers\n    (typeof EventSource > \"u\" || esOptions.headers ? eventSourcePolyfill : (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(EventSource)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((EventSource2) => new EventSource2(uri, esOptions)))\n  ), listenFor).pipe(\n    reconnectOnConnectionFailure(),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.filter)((event) => listenFor.includes(event.type)),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)(\n      (event) => ({\n        type: event.type,\n        ...\"data\" in event ? event.data : {}\n      })\n    )\n  );\n}\nfunction shareReplayLatest(configOrPredicate, config) {\n  return _shareReplayLatest(\n    typeof configOrPredicate == \"function\" ? { predicate: configOrPredicate, ...config } : configOrPredicate\n  );\n}\nfunction _shareReplayLatest(config) {\n  return (source) => {\n    let latest, emitted = !1;\n    const { predicate, ...shareConfig } = config, wrapped = source.pipe(\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_16__.tap)((value) => {\n        config.predicate(value) && (emitted = !0, latest = value);\n      }),\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_17__.finalize)(() => {\n        emitted = !1, latest = void 0;\n      }),\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_18__.share)(shareConfig)\n    ), emitLatest = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((subscriber) => {\n      emitted && subscriber.next(\n        // this cast is safe because of the emitted check which asserts that we got T from the source\n        latest\n      ), subscriber.complete();\n    });\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_19__.merge)(wrapped, emitLatest);\n  };\n}\nconst requiredApiVersion = \"2021-03-25\";\nclass LiveClient {\n  #client;\n  constructor(client) {\n    this.#client = client;\n  }\n  /**\n   * Requires `apiVersion` to be `2021-03-25` or later.\n   */\n  events({\n    includeDrafts = !1,\n    tag: _tag\n  } = {}) {\n    const {\n      projectId: projectId2,\n      apiVersion: _apiVersion,\n      token,\n      withCredentials,\n      requestTagPrefix\n    } = this.#client.config(), apiVersion = _apiVersion.replace(/^v/, \"\");\n    if (apiVersion !== \"X\" && apiVersion < requiredApiVersion)\n      throw new Error(\n        `The live events API requires API version ${requiredApiVersion} or later. The current API version is ${apiVersion}. Please update your API version to use this feature.`\n      );\n    if (includeDrafts && !token && !withCredentials)\n      throw new Error(\n        \"The live events API requires a token or withCredentials when 'includeDrafts: true'. Please update your client configuration. The token should have the lowest possible access role.\"\n      );\n    const path = _getDataUrl(this.#client, \"live/events\"), url = new URL(this.#client.getUrl(path, !1)), tag = _tag && requestTagPrefix ? [requestTagPrefix, _tag].join(\".\") : _tag;\n    tag && url.searchParams.set(\"tag\", tag), includeDrafts && url.searchParams.set(\"includeDrafts\", \"true\");\n    const esOptions = {};\n    includeDrafts && token && (esOptions.headers = {\n      Authorization: `Bearer ${token}`\n    }), includeDrafts && withCredentials && (esOptions.withCredentials = !0);\n    const key = `${url.href}::${JSON.stringify(esOptions)}`, existing = eventsCache.get(key);\n    if (existing)\n      return existing;\n    const events = connectEventSource(() => (\n      // use polyfill if there is no global EventSource or if we need to set headers\n      (typeof EventSource > \"u\" || esOptions.headers ? eventSourcePolyfill : (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(EventSource)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((EventSource2) => new EventSource2(url.href, esOptions)))\n    ), [\n      \"message\",\n      \"restart\",\n      \"welcome\",\n      \"reconnect\"\n    ]).pipe(\n      reconnectOnConnectionFailure(),\n      (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.map)((event) => {\n        if (event.type === \"message\") {\n          const { data, ...rest } = event;\n          return { ...rest, tags: data.tags };\n        }\n        return event;\n      })\n    ), checkCors = fetchObservable(url, {\n      method: \"OPTIONS\",\n      mode: \"cors\",\n      credentials: esOptions.withCredentials ? \"include\" : \"omit\",\n      headers: esOptions.headers\n    }).pipe(\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)(() => rxjs__WEBPACK_IMPORTED_MODULE_20__.EMPTY),\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.catchError)(() => {\n        throw new CorsOriginError({ projectId: projectId2 });\n      })\n    ), observable2 = (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.concat)(checkCors, events).pipe(\n      (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__.finalize)(() => eventsCache.delete(key)),\n      shareReplayLatest({\n        predicate: (event) => event.type === \"welcome\"\n      })\n    );\n    return eventsCache.set(key, observable2), observable2;\n  }\n}\nfunction fetchObservable(url, init) {\n  return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer) => {\n    const controller = new AbortController(), signal = controller.signal;\n    return fetch(url, { ...init, signal: controller.signal }).then(\n      (response) => {\n        observer.next(response), observer.complete();\n      },\n      (err) => {\n        signal.aborted || observer.error(err);\n      }\n    ), () => controller.abort();\n  });\n}\nconst eventsCache = /* @__PURE__ */ new Map();\nclass ObservableDatasetsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */\n  create(name, options) {\n    return _modify(this.#client, this.#httpRequest, \"PUT\", name, options);\n  }\n  /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */\n  edit(name, options) {\n    return _modify(this.#client, this.#httpRequest, \"PATCH\", name, options);\n  }\n  /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */\n  delete(name) {\n    return _modify(this.#client, this.#httpRequest, \"DELETE\", name);\n  }\n  /**\n   * Fetch a list of datasets for the configured project\n   */\n  list() {\n    return _request(this.#client, this.#httpRequest, {\n      uri: \"/datasets\",\n      tag: null\n    });\n  }\n}\nclass DatasetsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */\n  create(name, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _modify(this.#client, this.#httpRequest, \"PUT\", name, options)\n    );\n  }\n  /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */\n  edit(name, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _modify(this.#client, this.#httpRequest, \"PATCH\", name, options)\n    );\n  }\n  /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */\n  delete(name) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_modify(this.#client, this.#httpRequest, \"DELETE\", name));\n  }\n  /**\n   * Fetch a list of datasets for the configured project\n   */\n  list() {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _request(this.#client, this.#httpRequest, { uri: \"/datasets\", tag: null })\n    );\n  }\n}\nfunction _modify(client, httpRequest, method, name, options) {\n  return dataset(name), _request(client, httpRequest, {\n    method,\n    uri: `/datasets/${name}`,\n    body: options,\n    tag: null\n  });\n}\nclass ObservableProjectsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  list(options) {\n    const uri = options?.includeMembers === !1 ? \"/projects?includeMembers=false\" : \"/projects\";\n    return _request(this.#client, this.#httpRequest, { uri });\n  }\n  /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */\n  getById(projectId2) {\n    return _request(this.#client, this.#httpRequest, { uri: `/projects/${projectId2}` });\n  }\n}\nclass ProjectsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  list(options) {\n    const uri = options?.includeMembers === !1 ? \"/projects?includeMembers=false\" : \"/projects\";\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_request(this.#client, this.#httpRequest, { uri }));\n  }\n  /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */\n  getById(projectId2) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _request(this.#client, this.#httpRequest, { uri: `/projects/${projectId2}` })\n    );\n  }\n}\nclass ObservableUsersClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */\n  getById(id) {\n    return _request(\n      this.#client,\n      this.#httpRequest,\n      { uri: `/users/${id}` }\n    );\n  }\n}\nclass UsersClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */\n  getById(id) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _request(this.#client, this.#httpRequest, {\n        uri: `/users/${id}`\n      })\n    );\n  }\n}\nclass ObservableSanityClient {\n  assets;\n  datasets;\n  live;\n  projects;\n  users;\n  /**\n   * Private properties\n   */\n  #clientConfig;\n  #httpRequest;\n  /**\n   * Instance properties\n   */\n  listen = _listen;\n  constructor(httpRequest, config = defaultConfig) {\n    this.config(config), this.#httpRequest = httpRequest, this.assets = new ObservableAssetsClient(this, this.#httpRequest), this.datasets = new ObservableDatasetsClient(this, this.#httpRequest), this.live = new LiveClient(this), this.projects = new ObservableProjectsClient(this, this.#httpRequest), this.users = new ObservableUsersClient(this, this.#httpRequest);\n  }\n  /**\n   * Clone the client - returns a new instance\n   */\n  clone() {\n    return new ObservableSanityClient(this.#httpRequest, this.config());\n  }\n  config(newConfig) {\n    if (newConfig === void 0)\n      return { ...this.#clientConfig };\n    if (this.#clientConfig && this.#clientConfig.allowReconfigure === !1)\n      throw new Error(\n        \"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\"\n      );\n    return this.#clientConfig = initConfig(newConfig, this.#clientConfig || {}), this;\n  }\n  /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */\n  withConfig(newConfig) {\n    const thisConfig = this.config();\n    return new ObservableSanityClient(this.#httpRequest, {\n      ...thisConfig,\n      ...newConfig,\n      stega: {\n        ...thisConfig.stega || {},\n        ...typeof newConfig?.stega == \"boolean\" ? { enabled: newConfig.stega } : newConfig?.stega || {}\n      }\n    });\n  }\n  fetch(query, params, options) {\n    return _fetch(\n      this,\n      this.#httpRequest,\n      this.#clientConfig.stega,\n      query,\n      params,\n      options\n    );\n  }\n  /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */\n  getDocument(id, options) {\n    return _getDocument(this, this.#httpRequest, id, options);\n  }\n  /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */\n  getDocuments(ids, options) {\n    return _getDocuments(this, this.#httpRequest, ids, options);\n  }\n  create(document, options) {\n    return _create(this, this.#httpRequest, document, \"create\", options);\n  }\n  createIfNotExists(document, options) {\n    return _createIfNotExists(this, this.#httpRequest, document, options);\n  }\n  createOrReplace(document, options) {\n    return _createOrReplace(this, this.#httpRequest, document, options);\n  }\n  delete(selection, options) {\n    return _delete(this, this.#httpRequest, selection, options);\n  }\n  mutate(operations, options) {\n    return _mutate(this, this.#httpRequest, operations, options);\n  }\n  /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */\n  patch(selection, operations) {\n    return new ObservablePatch(selection, operations, this);\n  }\n  /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */\n  transaction(operations) {\n    return new ObservableTransaction(operations, this);\n  }\n  /**\n   * Perform action operations against the configured dataset\n   *\n   * @param operations - Action operation(s) to execute\n   * @param options - Action options\n   */\n  action(operations, options) {\n    return _action(this, this.#httpRequest, operations, options);\n  }\n  /**\n   * Perform an HTTP request against the Sanity API\n   *\n   * @param options - Request options\n   */\n  request(options) {\n    return _request(this, this.#httpRequest, options);\n  }\n  /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */\n  getUrl(uri, canUseCdn) {\n    return _getUrl(this, uri, canUseCdn);\n  }\n  /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */\n  getDataUrl(operation, path) {\n    return _getDataUrl(this, operation, path);\n  }\n}\nclass SanityClient {\n  assets;\n  datasets;\n  live;\n  projects;\n  users;\n  /**\n   * Observable version of the Sanity client, with the same configuration as the promise-based one\n   */\n  observable;\n  /**\n   * Private properties\n   */\n  #clientConfig;\n  #httpRequest;\n  /**\n   * Instance properties\n   */\n  listen = _listen;\n  constructor(httpRequest, config = defaultConfig) {\n    this.config(config), this.#httpRequest = httpRequest, this.assets = new AssetsClient(this, this.#httpRequest), this.datasets = new DatasetsClient(this, this.#httpRequest), this.live = new LiveClient(this), this.projects = new ProjectsClient(this, this.#httpRequest), this.users = new UsersClient(this, this.#httpRequest), this.observable = new ObservableSanityClient(httpRequest, config);\n  }\n  /**\n   * Clone the client - returns a new instance\n   */\n  clone() {\n    return new SanityClient(this.#httpRequest, this.config());\n  }\n  config(newConfig) {\n    if (newConfig === void 0)\n      return { ...this.#clientConfig };\n    if (this.#clientConfig && this.#clientConfig.allowReconfigure === !1)\n      throw new Error(\n        \"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\"\n      );\n    return this.observable && this.observable.config(newConfig), this.#clientConfig = initConfig(newConfig, this.#clientConfig || {}), this;\n  }\n  /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */\n  withConfig(newConfig) {\n    const thisConfig = this.config();\n    return new SanityClient(this.#httpRequest, {\n      ...thisConfig,\n      ...newConfig,\n      stega: {\n        ...thisConfig.stega || {},\n        ...typeof newConfig?.stega == \"boolean\" ? { enabled: newConfig.stega } : newConfig?.stega || {}\n      }\n    });\n  }\n  fetch(query, params, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _fetch(\n        this,\n        this.#httpRequest,\n        this.#clientConfig.stega,\n        query,\n        params,\n        options\n      )\n    );\n  }\n  /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */\n  getDocument(id, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_getDocument(this, this.#httpRequest, id, options));\n  }\n  /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */\n  getDocuments(ids, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_getDocuments(this, this.#httpRequest, ids, options));\n  }\n  create(document, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _create(this, this.#httpRequest, document, \"create\", options)\n    );\n  }\n  createIfNotExists(document, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _createIfNotExists(this, this.#httpRequest, document, options)\n    );\n  }\n  createOrReplace(document, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(\n      _createOrReplace(this, this.#httpRequest, document, options)\n    );\n  }\n  delete(selection, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_delete(this, this.#httpRequest, selection, options));\n  }\n  mutate(operations, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_mutate(this, this.#httpRequest, operations, options));\n  }\n  /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */\n  patch(documentId, operations) {\n    return new Patch(documentId, operations, this);\n  }\n  /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */\n  transaction(operations) {\n    return new Transaction(operations, this);\n  }\n  /**\n   * Perform action operations against the configured dataset\n   * Returns a promise that resolves to the transaction result\n   *\n   * @param operations - Action operation(s) to execute\n   * @param options - Action options\n   */\n  action(operations, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_action(this, this.#httpRequest, operations, options));\n  }\n  /**\n   * Perform a request against the Sanity API\n   * NOTE: Only use this for Sanity API endpoints, not for your own APIs!\n   *\n   * @param options - Request options\n   * @returns Promise resolving to the response body\n   */\n  request(options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_request(this, this.#httpRequest, options));\n  }\n  /**\n   * Perform an HTTP request a `/data` sub-endpoint\n   * NOTE: Considered internal, thus marked as deprecated. Use `request` instead.\n   *\n   * @deprecated - Use `request()` or your own HTTP library instead\n   * @param endpoint - Endpoint to hit (mutate, query etc)\n   * @param body - Request body\n   * @param options - Request options\n   * @internal\n   */\n  dataRequest(endpoint, body, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.lastValueFrom)(_dataRequest(this, this.#httpRequest, endpoint, body, options));\n  }\n  /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */\n  getUrl(uri, canUseCdn) {\n    return _getUrl(this, uri, canUseCdn);\n  }\n  /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */\n  getDataUrl(operation, path) {\n    return _getDataUrl(this, operation, path);\n  }\n}\nfunction defineCreateClientExports(envMiddleware2, ClassConstructor) {\n  return { requester: defineHttpRequest(envMiddleware2), createClient: (config) => {\n    const clientRequester = defineHttpRequest(envMiddleware2);\n    return new ClassConstructor(\n      (options, requester2) => (requester2 || clientRequester)({\n        maxRedirects: 0,\n        maxRetries: config.maxRetries,\n        retryDelay: config.retryDelay,\n        ...options\n      }),\n      config\n    );\n  } };\n}\nfunction defineDeprecatedCreateClient(createClient2) {\n  return function(config) {\n    return printNoDefaultExport(), createClient2(config);\n  };\n}\nvar envMiddleware = [];\nconst exp = defineCreateClientExports(envMiddleware, SanityClient), requester = exp.requester, createClient = exp.createClient, deprecatedCreateClient = defineDeprecatedCreateClient(createClient);\n\n//# sourceMappingURL=index.browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/index.browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/config.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/config.js ***!
  \********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dataset: () => (/* binding */ dataset),\n/* harmony export */   defaultConfig: () => (/* binding */ defaultConfig),\n/* harmony export */   hasDataset: () => (/* binding */ hasDataset),\n/* harmony export */   initConfig: () => (/* binding */ initConfig),\n/* harmony export */   printCdnPreviewDraftsWarning: () => (/* binding */ printCdnPreviewDraftsWarning),\n/* harmony export */   printNoDefaultExport: () => (/* binding */ printNoDefaultExport),\n/* harmony export */   printPreviewDraftsDeprecationWarning: () => (/* binding */ printPreviewDraftsDeprecationWarning),\n/* harmony export */   requestTag: () => (/* binding */ requestTag),\n/* harmony export */   requireDocumentId: () => (/* binding */ requireDocumentId),\n/* harmony export */   validateApiPerspective: () => (/* binding */ validateApiPerspective),\n/* harmony export */   validateAssetType: () => (/* binding */ validateAssetType),\n/* harmony export */   validateDocumentId: () => (/* binding */ validateDocumentId),\n/* harmony export */   validateInsert: () => (/* binding */ validateInsert),\n/* harmony export */   validateObject: () => (/* binding */ validateObject)\n/* harmony export */ });\nconst BASE_URL = \"https://www.sanity.io/help/\";\nfunction generateHelpUrl(slug) {\n  return BASE_URL + slug;\n}\nconst VALID_ASSET_TYPES = [\"image\", \"file\"], VALID_INSERT_LOCATIONS = [\"before\", \"after\", \"replace\"], dataset = (name) => {\n  if (!/^(~[a-z0-9]{1}[-\\w]{0,63}|[a-z0-9]{1}[-\\w]{0,63})$/.test(name))\n    throw new Error(\n      \"Datasets can only contain lowercase characters, numbers, underscores and dashes, and start with tilde, and be maximum 64 characters\"\n    );\n}, projectId = (id) => {\n  if (!/^[-a-z0-9]+$/i.test(id))\n    throw new Error(\"`projectId` can only contain only a-z, 0-9 and dashes\");\n}, validateAssetType = (type) => {\n  if (VALID_ASSET_TYPES.indexOf(type) === -1)\n    throw new Error(`Invalid asset type: ${type}. Must be one of ${VALID_ASSET_TYPES.join(\", \")}`);\n}, validateObject = (op, val) => {\n  if (val === null || typeof val != \"object\" || Array.isArray(val))\n    throw new Error(`${op}() takes an object of properties`);\n}, validateDocumentId = (op, id) => {\n  if (typeof id != \"string\" || !/^[a-z0-9_][a-z0-9_.-]{0,127}$/i.test(id) || id.includes(\"..\"))\n    throw new Error(`${op}(): \"${id}\" is not a valid document ID`);\n}, requireDocumentId = (op, doc) => {\n  if (!doc._id)\n    throw new Error(`${op}() requires that the document contains an ID (\"_id\" property)`);\n  validateDocumentId(op, doc._id);\n}, validateInsert = (at, selector, items) => {\n  const signature = \"insert(at, selector, items)\";\n  if (VALID_INSERT_LOCATIONS.indexOf(at) === -1) {\n    const valid = VALID_INSERT_LOCATIONS.map((loc) => `\"${loc}\"`).join(\", \");\n    throw new Error(`${signature} takes an \"at\"-argument which is one of: ${valid}`);\n  }\n  if (typeof selector != \"string\")\n    throw new Error(`${signature} takes a \"selector\"-argument which must be a string`);\n  if (!Array.isArray(items))\n    throw new Error(`${signature} takes an \"items\"-argument which must be an array`);\n}, hasDataset = (config) => {\n  if (!config.dataset)\n    throw new Error(\"`dataset` must be provided to perform queries\");\n  return config.dataset || \"\";\n}, requestTag = (tag) => {\n  if (typeof tag != \"string\" || !/^[a-z0-9._-]{1,75}$/i.test(tag))\n    throw new Error(\n      \"Tag can only contain alphanumeric characters, underscores, dashes and dots, and be between one and 75 characters long.\"\n    );\n  return tag;\n};\nfunction once(fn) {\n  let didCall = !1, returnValue;\n  return (...args) => (didCall || (returnValue = fn(...args), didCall = !0), returnValue);\n}\nconst createWarningPrinter = (message) => (\n  // eslint-disable-next-line no-console\n  once((...args) => console.warn(message.join(\" \"), ...args))\n), printCdnAndWithCredentialsWarning = createWarningPrinter([\n  \"Because you set `withCredentials` to true, we will override your `useCdn`\",\n  \"setting to be false since (cookie-based) credentials are never set on the CDN\"\n]), printCdnWarning = createWarningPrinter([\n  \"Since you haven't set a value for `useCdn`, we will deliver content using our\",\n  \"global, edge-cached API-CDN. If you wish to have content delivered faster, set\",\n  \"`useCdn: false` to use the Live API. Note: You may incur higher costs using the live API.\"\n]), printCdnPreviewDraftsWarning = createWarningPrinter([\n  \"The Sanity client is configured with the `perspective` set to `drafts` or `previewDrafts`, which doesn't support the API-CDN.\",\n  \"The Live API will be used instead. Set `useCdn: false` in your configuration to hide this warning.\"\n]), printPreviewDraftsDeprecationWarning = createWarningPrinter([\n  \"The `previewDrafts` perspective has been renamed to  `drafts` and will be removed in a future API version\"\n]), printBrowserTokenWarning = createWarningPrinter([\n  \"You have configured Sanity client to use a token in the browser. This may cause unintentional security issues.\",\n  `See ${generateHelpUrl(\n    \"js-client-browser-token\"\n  )} for more information and how to hide this warning.`\n]), printCredentialedTokenWarning = createWarningPrinter([\n  \"You have configured Sanity client to use a token, but also provided `withCredentials: true`.\",\n  \"This is no longer supported - only token will be used - remove `withCredentials: true`.\"\n]), printNoApiVersionSpecifiedWarning = createWarningPrinter([\n  \"Using the Sanity client without specifying an API version is deprecated.\",\n  `See ${generateHelpUrl(\"js-client-api-version\")}`\n]), printNoDefaultExport = createWarningPrinter([\n  \"The default export of @sanity/client has been deprecated. Use the named export `createClient` instead.\"\n]), defaultCdnHost = \"apicdn.sanity.io\", defaultConfig = {\n  apiHost: \"https://api.sanity.io\",\n  apiVersion: \"1\",\n  useProjectHostname: !0,\n  stega: { enabled: !1 }\n}, LOCALHOSTS = [\"localhost\", \"127.0.0.1\", \"0.0.0.0\"], isLocal = (host) => LOCALHOSTS.indexOf(host) !== -1;\nfunction validateApiVersion(apiVersion) {\n  if (apiVersion === \"1\" || apiVersion === \"X\")\n    return;\n  const apiDate = new Date(apiVersion);\n  if (!(/^\\d{4}-\\d{2}-\\d{2}$/.test(apiVersion) && apiDate instanceof Date && apiDate.getTime() > 0))\n    throw new Error(\"Invalid API version string, expected `1` or date in format `YYYY-MM-DD`\");\n}\nfunction validateApiPerspective(perspective) {\n  if (Array.isArray(perspective) && perspective.length > 1 && perspective.includes(\"raw\"))\n    throw new TypeError(\n      'Invalid API perspective value: \"raw\". The raw-perspective can not be combined with other perspectives'\n    );\n}\nconst initConfig = (config, prevConfig) => {\n  const specifiedConfig = {\n    ...prevConfig,\n    ...config,\n    stega: {\n      ...typeof prevConfig.stega == \"boolean\" ? { enabled: prevConfig.stega } : prevConfig.stega || defaultConfig.stega,\n      ...typeof config.stega == \"boolean\" ? { enabled: config.stega } : config.stega || {}\n    }\n  };\n  specifiedConfig.apiVersion || printNoApiVersionSpecifiedWarning();\n  const newConfig = {\n    ...defaultConfig,\n    ...specifiedConfig\n  }, projectBased = newConfig.useProjectHostname;\n  if (typeof Promise > \"u\") {\n    const helpUrl = generateHelpUrl(\"js-client-promise-polyfill\");\n    throw new Error(`No native Promise-implementation found, polyfill needed - see ${helpUrl}`);\n  }\n  if (projectBased && !newConfig.projectId)\n    throw new Error(\"Configuration must contain `projectId`\");\n  if (typeof newConfig.perspective < \"u\" && validateApiPerspective(newConfig.perspective), \"encodeSourceMap\" in newConfig)\n    throw new Error(\n      \"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMap' is not supported in '@sanity/client'. Did you mean 'stega.enabled'?\"\n    );\n  if (\"encodeSourceMapAtPath\" in newConfig)\n    throw new Error(\n      \"It looks like you're using options meant for '@sanity/preview-kit/client'. 'encodeSourceMapAtPath' is not supported in '@sanity/client'. Did you mean 'stega.filter'?\"\n    );\n  if (typeof newConfig.stega.enabled != \"boolean\")\n    throw new Error(`stega.enabled must be a boolean, received ${newConfig.stega.enabled}`);\n  if (newConfig.stega.enabled && newConfig.stega.studioUrl === void 0)\n    throw new Error(\"stega.studioUrl must be defined when stega.enabled is true\");\n  if (newConfig.stega.enabled && typeof newConfig.stega.studioUrl != \"string\" && typeof newConfig.stega.studioUrl != \"function\")\n    throw new Error(\n      `stega.studioUrl must be a string or a function, received ${newConfig.stega.studioUrl}`\n    );\n  const isBrowser = typeof window < \"u\" && window.location && window.location.hostname, isLocalhost = isBrowser && isLocal(window.location.hostname), hasToken = !!newConfig.token;\n  newConfig.withCredentials && hasToken && (printCredentialedTokenWarning(), newConfig.withCredentials = !1), isBrowser && isLocalhost && hasToken && newConfig.ignoreBrowserTokenWarning !== !0 ? printBrowserTokenWarning() : typeof newConfig.useCdn > \"u\" && printCdnWarning(), projectBased && projectId(newConfig.projectId), newConfig.dataset && dataset(newConfig.dataset), \"requestTagPrefix\" in newConfig && (newConfig.requestTagPrefix = newConfig.requestTagPrefix ? requestTag(newConfig.requestTagPrefix).replace(/\\.+$/, \"\") : void 0), newConfig.apiVersion = `${newConfig.apiVersion}`.replace(/^v/, \"\"), newConfig.isDefaultApi = newConfig.apiHost === defaultConfig.apiHost, newConfig.useCdn === !0 && newConfig.withCredentials && printCdnAndWithCredentialsWarning(), newConfig.useCdn = newConfig.useCdn !== !1 && !newConfig.withCredentials, validateApiVersion(newConfig.apiVersion);\n  const hostParts = newConfig.apiHost.split(\"://\", 2), protocol = hostParts[0], host = hostParts[1], cdnHost = newConfig.isDefaultApi ? defaultCdnHost : host;\n  return newConfig.useProjectHostname ? (newConfig.url = `${protocol}://${newConfig.projectId}.${host}/v${newConfig.apiVersion}`, newConfig.cdnUrl = `${protocol}://${newConfig.projectId}.${cdnHost}/v${newConfig.apiVersion}`) : (newConfig.url = `${newConfig.apiHost}/v${newConfig.apiVersion}`, newConfig.cdnUrl = newConfig.url), newConfig;\n};\n\n//# sourceMappingURL=config.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/resolveEditInfo.js":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/resolveEditInfo.js ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DRAFTS_FOLDER: () => (/* binding */ DRAFTS_FOLDER),\n/* harmony export */   VERSION_FOLDER: () => (/* binding */ VERSION_FOLDER),\n/* harmony export */   createEditUrl: () => (/* binding */ createEditUrl),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getDraftId: () => (/* binding */ getDraftId),\n/* harmony export */   getPublishedId: () => (/* binding */ getPublishedId),\n/* harmony export */   getVersionFromId: () => (/* binding */ getVersionFromId),\n/* harmony export */   getVersionId: () => (/* binding */ getVersionId),\n/* harmony export */   isDraftId: () => (/* binding */ isDraftId),\n/* harmony export */   isPublishedId: () => (/* binding */ isPublishedId),\n/* harmony export */   isVersionId: () => (/* binding */ isVersionId),\n/* harmony export */   jsonPath: () => (/* binding */ jsonPath),\n/* harmony export */   jsonPathToStudioPath: () => (/* binding */ jsonPathToStudioPath),\n/* harmony export */   parseJsonPath: () => (/* binding */ parseJsonPath),\n/* harmony export */   reKeySegment: () => (/* binding */ reKeySegment),\n/* harmony export */   resolveEditInfo: () => (/* binding */ resolveEditInfo),\n/* harmony export */   resolveMapping: () => (/* binding */ resolveMapping),\n/* harmony export */   resolveStudioBaseRoute: () => (/* binding */ resolveStudioBaseRoute),\n/* harmony export */   studioPath: () => (/* binding */ studioPath),\n/* harmony export */   studioPathToJsonPath: () => (/* binding */ studioPathToJsonPath),\n/* harmony export */   toString: () => (/* binding */ toString),\n/* harmony export */   walkMap: () => (/* binding */ walkMap)\n/* harmony export */ });\nconst rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g, reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/, reIndexTuple = /^\\d*:\\d*$/;\nfunction isIndexSegment(segment) {\n  return typeof segment == \"number\" || typeof segment == \"string\" && /^\\[\\d+\\]$/.test(segment);\n}\nfunction isKeySegment(segment) {\n  return typeof segment == \"string\" ? reKeySegment.test(segment.trim()) : typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction isIndexTuple(segment) {\n  if (typeof segment == \"string\" && reIndexTuple.test(segment))\n    return !0;\n  if (!Array.isArray(segment) || segment.length !== 2)\n    return !1;\n  const [from, to] = segment;\n  return (typeof from == \"number\" || from === \"\") && (typeof to == \"number\" || to === \"\");\n}\nfunction get(obj, path, defaultVal) {\n  const select = typeof path == \"string\" ? fromString(path) : path;\n  if (!Array.isArray(select))\n    throw new Error(\"Path must be an array or a string\");\n  let acc = obj;\n  for (let i = 0; i < select.length; i++) {\n    const segment = select[i];\n    if (isIndexSegment(segment)) {\n      if (!Array.isArray(acc))\n        return defaultVal;\n      acc = acc[segment];\n    }\n    if (isKeySegment(segment)) {\n      if (!Array.isArray(acc))\n        return defaultVal;\n      acc = acc.find((item) => item._key === segment._key);\n    }\n    if (typeof segment == \"string\" && (acc = typeof acc == \"object\" && acc !== null ? acc[segment] : void 0), typeof acc > \"u\")\n      return defaultVal;\n  }\n  return acc;\n}\nfunction toString(path) {\n  if (!Array.isArray(path))\n    throw new Error(\"Path is not an array\");\n  return path.reduce((target, segment, i) => {\n    const segmentType = typeof segment;\n    if (segmentType === \"number\")\n      return `${target}[${segment}]`;\n    if (segmentType === \"string\")\n      return `${target}${i === 0 ? \"\" : \".\"}${segment}`;\n    if (isKeySegment(segment) && segment._key)\n      return `${target}[_key==\"${segment._key}\"]`;\n    if (Array.isArray(segment)) {\n      const [from, to] = segment;\n      return `${target}[${from}:${to}]`;\n    }\n    throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``);\n  }, \"\");\n}\nfunction fromString(path) {\n  if (typeof path != \"string\")\n    throw new Error(\"Path is not a string\");\n  const segments = path.match(rePropName);\n  if (!segments)\n    throw new Error(\"Invalid path string\");\n  return segments.map(parsePathSegment);\n}\nfunction parsePathSegment(segment) {\n  return isIndexSegment(segment) ? parseIndexSegment(segment) : isKeySegment(segment) ? parseKeySegment(segment) : isIndexTuple(segment) ? parseIndexTupleSegment(segment) : segment;\n}\nfunction parseIndexSegment(segment) {\n  return Number(segment.replace(/[^\\d]/g, \"\"));\n}\nfunction parseKeySegment(segment) {\n  return { _key: segment.match(reKeySegment)[1] };\n}\nfunction parseIndexTupleSegment(segment) {\n  const [from, to] = segment.split(\":\").map((seg) => seg === \"\" ? seg : Number(seg));\n  return [from, to];\n}\nvar studioPath = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  fromString,\n  get,\n  isIndexSegment,\n  isIndexTuple,\n  isKeySegment,\n  reKeySegment,\n  toString\n});\nconst DRAFTS_FOLDER = \"drafts\", VERSION_FOLDER = \"versions\", PATH_SEPARATOR = \".\", DRAFTS_PREFIX = `${DRAFTS_FOLDER}${PATH_SEPARATOR}`, VERSION_PREFIX = `${VERSION_FOLDER}${PATH_SEPARATOR}`;\nfunction isDraftId(id) {\n  return id.startsWith(DRAFTS_PREFIX);\n}\nfunction isVersionId(id) {\n  return id.startsWith(VERSION_PREFIX);\n}\nfunction isPublishedId(id) {\n  return !isDraftId(id) && !isVersionId(id);\n}\nfunction getDraftId(id) {\n  if (isVersionId(id)) {\n    const publishedId = getPublishedId(id);\n    return DRAFTS_PREFIX + publishedId;\n  }\n  return isDraftId(id) ? id : DRAFTS_PREFIX + id;\n}\nfunction getVersionId(id, version) {\n  if (version === \"drafts\" || version === \"published\")\n    throw new Error('Version can not be \"published\" or \"drafts\"');\n  return `${VERSION_PREFIX}${version}${PATH_SEPARATOR}${getPublishedId(id)}`;\n}\nfunction getVersionFromId(id) {\n  if (!isVersionId(id)) return;\n  const [_versionPrefix, versionId, ..._publishedId] = id.split(PATH_SEPARATOR);\n  return versionId;\n}\nfunction getPublishedId(id) {\n  return isVersionId(id) ? id.split(PATH_SEPARATOR).slice(2).join(PATH_SEPARATOR) : isDraftId(id) ? id.slice(DRAFTS_PREFIX.length) : id;\n}\nconst ESCAPE = {\n  \"\\f\": \"\\\\f\",\n  \"\\n\": \"\\\\n\",\n  \"\\r\": \"\\\\r\",\n  \"\t\": \"\\\\t\",\n  \"'\": \"\\\\'\",\n  \"\\\\\": \"\\\\\\\\\"\n}, UNESCAPE = {\n  \"\\\\f\": \"\\f\",\n  \"\\\\n\": `\n`,\n  \"\\\\r\": \"\\r\",\n  \"\\\\t\": \"\t\",\n  \"\\\\'\": \"'\",\n  \"\\\\\\\\\": \"\\\\\"\n};\nfunction jsonPath(path) {\n  return `$${path.map((segment) => typeof segment == \"string\" ? `['${segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match) => ESCAPE[match])}']` : typeof segment == \"number\" ? `[${segment}]` : segment._key !== \"\" ? `[?(@._key=='${segment._key.replace(/['\\\\]/g, (match) => ESCAPE[match])}')]` : `[${segment._index}]`).join(\"\")}`;\n}\nfunction parseJsonPath(path) {\n  const parsed = [], parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g;\n  let match;\n  for (; (match = parseRe.exec(path)) !== null; ) {\n    if (match[1] !== void 0) {\n      const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m) => UNESCAPE[m]);\n      parsed.push(key);\n      continue;\n    }\n    if (match[2] !== void 0) {\n      parsed.push(parseInt(match[2], 10));\n      continue;\n    }\n    if (match[3] !== void 0) {\n      const _key = match[3].replace(/\\\\(\\\\')/g, (m) => UNESCAPE[m]);\n      parsed.push({\n        _key,\n        _index: -1\n      });\n      continue;\n    }\n  }\n  return parsed;\n}\nfunction jsonPathToStudioPath(path) {\n  return path.map((segment) => {\n    if (typeof segment == \"string\" || typeof segment == \"number\")\n      return segment;\n    if (segment._key !== \"\")\n      return { _key: segment._key };\n    if (segment._index !== -1)\n      return segment._index;\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n  });\n}\nfunction studioPathToJsonPath(path) {\n  return (typeof path == \"string\" ? fromString(path) : path).map((segment) => {\n    if (typeof segment == \"string\" || typeof segment == \"number\")\n      return segment;\n    if (Array.isArray(segment))\n      throw new Error(`IndexTuple segments aren't supported:${JSON.stringify(segment)}`);\n    if (isContentSourceMapParsedPathKeyedSegment(segment))\n      return segment;\n    if (segment._key)\n      return { _key: segment._key, _index: -1 };\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n  });\n}\nfunction isContentSourceMapParsedPathKeyedSegment(segment) {\n  return typeof segment == \"object\" && \"_key\" in segment && \"_index\" in segment;\n}\nfunction jsonPathToMappingPath(path) {\n  return path.map((segment) => {\n    if (typeof segment == \"string\" || typeof segment == \"number\")\n      return segment;\n    if (segment._index !== -1)\n      return segment._index;\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n  });\n}\nfunction resolveMapping(resultPath, csm) {\n  if (!csm?.mappings)\n    return;\n  const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));\n  if (csm.mappings[resultMappingPath] !== void 0)\n    return {\n      mapping: csm.mappings[resultMappingPath],\n      matchedPath: resultMappingPath,\n      pathSuffix: \"\"\n    };\n  const mappings = Object.entries(csm.mappings).filter(([key]) => resultMappingPath.startsWith(key)).sort(([key1], [key2]) => key2.length - key1.length);\n  if (mappings.length == 0)\n    return;\n  const [matchedPath, mapping] = mappings[0], pathSuffix = resultMappingPath.substring(matchedPath.length);\n  return { mapping, matchedPath, pathSuffix };\n}\nfunction isArray(value) {\n  return value !== null && Array.isArray(value);\n}\nfunction isRecord(value) {\n  return typeof value == \"object\" && value !== null;\n}\nfunction walkMap(value, mappingFn, path = []) {\n  if (isArray(value))\n    return value.map((v, idx) => {\n      if (isRecord(v)) {\n        const _key = v._key;\n        if (typeof _key == \"string\")\n          return walkMap(v, mappingFn, path.concat({ _key, _index: idx }));\n      }\n      return walkMap(v, mappingFn, path.concat(idx));\n    });\n  if (isRecord(value)) {\n    if (value._type === \"block\" || value._type === \"span\") {\n      const result = { ...value };\n      return value._type === \"block\" ? result.children = walkMap(value.children, mappingFn, path.concat(\"children\")) : value._type === \"span\" && (result.text = walkMap(value.text, mappingFn, path.concat(\"text\"))), result;\n    }\n    return Object.fromEntries(\n      Object.entries(value).map(([k, v]) => [k, walkMap(v, mappingFn, path.concat(k))])\n    );\n  }\n  return mappingFn(value, path);\n}\nfunction createEditUrl(options) {\n  const {\n    baseUrl,\n    workspace: _workspace = \"default\",\n    tool: _tool = \"default\",\n    id: _id,\n    type,\n    path,\n    projectId,\n    dataset\n  } = options;\n  if (!baseUrl)\n    throw new Error(\"baseUrl is required\");\n  if (!path)\n    throw new Error(\"path is required\");\n  if (!_id)\n    throw new Error(\"id is required\");\n  if (baseUrl !== \"/\" && baseUrl.endsWith(\"/\"))\n    throw new Error(\"baseUrl must not end with a slash\");\n  const workspace = _workspace === \"default\" ? void 0 : _workspace, tool = _tool === \"default\" ? void 0 : _tool, id = getPublishedId(_id), stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path, searchParams = new URLSearchParams({\n    baseUrl,\n    id,\n    type,\n    path: stringifiedPath\n  });\n  if (workspace && searchParams.set(\"workspace\", workspace), tool && searchParams.set(\"tool\", tool), projectId && searchParams.set(\"projectId\", projectId), dataset && searchParams.set(\"dataset\", dataset), isPublishedId(_id))\n    searchParams.set(\"perspective\", \"published\");\n  else if (isVersionId(_id)) {\n    const versionId = getVersionFromId(_id);\n    searchParams.set(\"perspective\", versionId);\n  }\n  const segments = [baseUrl === \"/\" ? \"\" : baseUrl];\n  workspace && segments.push(workspace);\n  const routerParams = [\n    \"mode=presentation\",\n    `id=${id}`,\n    `type=${type}`,\n    `path=${encodeURIComponent(stringifiedPath)}`\n  ];\n  return tool && routerParams.push(`tool=${tool}`), segments.push(\"intent\", \"edit\", `${routerParams.join(\";\")}?${searchParams}`), segments.join(\"/\");\n}\nfunction resolveEditInfo(options) {\n  const { resultSourceMap: csm, resultPath } = options, { mapping, pathSuffix } = resolveMapping(resultPath, csm) || {};\n  if (!mapping || mapping.source.type === \"literal\" || mapping.source.type === \"unknown\")\n    return;\n  const sourceDoc = csm.documents[mapping.source.document], sourcePath = csm.paths[mapping.source.path];\n  if (sourceDoc && sourcePath) {\n    const { baseUrl, workspace, tool } = resolveStudioBaseRoute(\n      typeof options.studioUrl == \"function\" ? options.studioUrl(sourceDoc) : options.studioUrl\n    );\n    if (!baseUrl) return;\n    const { _id, _type, _projectId, _dataset } = sourceDoc;\n    return {\n      baseUrl,\n      workspace,\n      tool,\n      id: _id,\n      type: _type,\n      path: parseJsonPath(sourcePath + pathSuffix),\n      projectId: _projectId,\n      dataset: _dataset\n    };\n  }\n}\nfunction resolveStudioBaseRoute(studioUrl) {\n  let baseUrl = typeof studioUrl == \"string\" ? studioUrl : studioUrl.baseUrl;\n  return baseUrl !== \"/\" && (baseUrl = baseUrl.replace(/\\/$/, \"\")), typeof studioUrl == \"string\" ? { baseUrl } : { ...studioUrl, baseUrl };\n}\n\n//# sourceMappingURL=resolveEditInfo.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/resolveEditInfo.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js ***!
  \************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ C),\n/* harmony export */   stegaClean: () => (/* binding */ stegaClean),\n/* harmony export */   vercelStegaCleanAll: () => (/* binding */ vercelStegaCleanAll)\n/* harmony export */ });\nvar s = { 0: 8203, 1: 8204, 2: 8205, 3: 8290, 4: 8291, 5: 8288, 6: 65279, 7: 8289, 8: 119155, 9: 119156, a: 119157, b: 119158, c: 119159, d: 119160, e: 119161, f: 119162 }, c = { 0: 8203, 1: 8204, 2: 8205, 3: 65279 }, u = new Array(4).fill(String.fromCodePoint(c[0])).join(\"\");\nfunction E(t) {\n  let e = JSON.stringify(t);\n  return `${u}${Array.from(e).map((r) => {\n    let n = r.charCodeAt(0);\n    if (n > 255) throw new Error(`Only ASCII edit info can be encoded. Error attempting to encode ${e} on character ${r} (${n})`);\n    return Array.from(n.toString(4).padStart(4, \"0\")).map((o) => String.fromCodePoint(c[o])).join(\"\");\n  }).join(\"\")}`;\n}\nfunction I(t) {\n  return !Number.isNaN(Number(t)) || /[a-z]/i.test(t) && !/\\d+(?:[-:\\/]\\d+){2}(?:T\\d+(?:[-:\\/]\\d+){1,2}(\\.\\d+)?Z?)?/.test(t) ? !1 : !!Date.parse(t);\n}\nfunction T(t) {\n  try {\n    new URL(t, t.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n  } catch {\n    return !1;\n  }\n  return !0;\n}\nfunction C(t, e, r = \"auto\") {\n  return r === !0 || r === \"auto\" && (I(t) || T(t)) ? t : `${t}${E(e)}`;\n}\nObject.fromEntries(Object.entries(c).map((t) => t.reverse()));\nObject.fromEntries(Object.entries(s).map((t) => t.reverse()));\nvar S = `${Object.values(s).map((t) => `\\\\u{${t.toString(16)}}`).join(\"\")}`, f = new RegExp(`[${S}]{4,}`, \"gu\");\nfunction _(t) {\n  var e;\n  return { cleaned: t.replace(f, \"\"), encoded: ((e = t.match(f)) == null ? void 0 : e[0]) || \"\" };\n}\nfunction O(t) {\n  return t && JSON.parse(_(JSON.stringify(t)).cleaned);\n}\nfunction stegaClean(result) {\n  return O(result);\n}\nconst vercelStegaCleanAll = stegaClean;\n\n//# sourceMappingURL=stegaClean.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhbml0eStjbGllbnRANi4yOC40X2RlYnVnQDQuNC4wL25vZGVfbW9kdWxlcy9Ac2FuaXR5L2NsaWVudC9kaXN0L19jaHVua3MtZXMvc3RlZ2FDbGVhbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxVQUFVLGlLQUFpSyxRQUFRLHFDQUFxQztBQUN4TjtBQUNBO0FBQ0EsWUFBWSxFQUFFLEVBQUU7QUFDaEI7QUFDQSxvR0FBb0csR0FBRyxlQUFlLEdBQUcsR0FBRyxFQUFFO0FBQzlIO0FBQ0EsR0FBRyxXQUFXO0FBQ2Q7QUFDQTtBQUNBLDRFQUE0RSxFQUFFLHFCQUFxQixJQUFJO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsRUFBRSxFQUFFLEtBQUs7QUFDdEU7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQ0FBaUMsRUFBRSxnQkFBZ0IsWUFBWSxzQkFBc0IsRUFBRSxFQUFFLEdBQUc7QUFDdkc7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBS0U7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3BldHJva3ZhcnRzaWFueWkvY29kZS9nZW9tdW5kdXMtd2Vic2l0ZS9ub2RlX21vZHVsZXMvLnBucG0vQHNhbml0eStjbGllbnRANi4yOC40X2RlYnVnQDQuNC4wL25vZGVfbW9kdWxlcy9Ac2FuaXR5L2NsaWVudC9kaXN0L19jaHVua3MtZXMvc3RlZ2FDbGVhbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcyA9IHsgMDogODIwMywgMTogODIwNCwgMjogODIwNSwgMzogODI5MCwgNDogODI5MSwgNTogODI4OCwgNjogNjUyNzksIDc6IDgyODksIDg6IDExOTE1NSwgOTogMTE5MTU2LCBhOiAxMTkxNTcsIGI6IDExOTE1OCwgYzogMTE5MTU5LCBkOiAxMTkxNjAsIGU6IDExOTE2MSwgZjogMTE5MTYyIH0sIGMgPSB7IDA6IDgyMDMsIDE6IDgyMDQsIDI6IDgyMDUsIDM6IDY1Mjc5IH0sIHUgPSBuZXcgQXJyYXkoNCkuZmlsbChTdHJpbmcuZnJvbUNvZGVQb2ludChjWzBdKSkuam9pbihcIlwiKTtcbmZ1bmN0aW9uIEUodCkge1xuICBsZXQgZSA9IEpTT04uc3RyaW5naWZ5KHQpO1xuICByZXR1cm4gYCR7dX0ke0FycmF5LmZyb20oZSkubWFwKChyKSA9PiB7XG4gICAgbGV0IG4gPSByLmNoYXJDb2RlQXQoMCk7XG4gICAgaWYgKG4gPiAyNTUpIHRocm93IG5ldyBFcnJvcihgT25seSBBU0NJSSBlZGl0IGluZm8gY2FuIGJlIGVuY29kZWQuIEVycm9yIGF0dGVtcHRpbmcgdG8gZW5jb2RlICR7ZX0gb24gY2hhcmFjdGVyICR7cn0gKCR7bn0pYCk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20obi50b1N0cmluZyg0KS5wYWRTdGFydCg0LCBcIjBcIikpLm1hcCgobykgPT4gU3RyaW5nLmZyb21Db2RlUG9pbnQoY1tvXSkpLmpvaW4oXCJcIik7XG4gIH0pLmpvaW4oXCJcIil9YDtcbn1cbmZ1bmN0aW9uIEkodCkge1xuICByZXR1cm4gIU51bWJlci5pc05hTihOdW1iZXIodCkpIHx8IC9bYS16XS9pLnRlc3QodCkgJiYgIS9cXGQrKD86Wy06XFwvXVxcZCspezJ9KD86VFxcZCsoPzpbLTpcXC9dXFxkKyl7MSwyfShcXC5cXGQrKT9aPyk/Ly50ZXN0KHQpID8gITEgOiAhIURhdGUucGFyc2UodCk7XG59XG5mdW5jdGlvbiBUKHQpIHtcbiAgdHJ5IHtcbiAgICBuZXcgVVJMKHQsIHQuc3RhcnRzV2l0aChcIi9cIikgPyBcImh0dHBzOi8vYWNtZS5jb21cIiA6IHZvaWQgMCk7XG4gIH0gY2F0Y2gge1xuICAgIHJldHVybiAhMTtcbiAgfVxuICByZXR1cm4gITA7XG59XG5mdW5jdGlvbiBDKHQsIGUsIHIgPSBcImF1dG9cIikge1xuICByZXR1cm4gciA9PT0gITAgfHwgciA9PT0gXCJhdXRvXCIgJiYgKEkodCkgfHwgVCh0KSkgPyB0IDogYCR7dH0ke0UoZSl9YDtcbn1cbk9iamVjdC5mcm9tRW50cmllcyhPYmplY3QuZW50cmllcyhjKS5tYXAoKHQpID0+IHQucmV2ZXJzZSgpKSk7XG5PYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMocykubWFwKCh0KSA9PiB0LnJldmVyc2UoKSkpO1xudmFyIFMgPSBgJHtPYmplY3QudmFsdWVzKHMpLm1hcCgodCkgPT4gYFxcXFx1eyR7dC50b1N0cmluZygxNil9fWApLmpvaW4oXCJcIil9YCwgZiA9IG5ldyBSZWdFeHAoYFske1N9XXs0LH1gLCBcImd1XCIpO1xuZnVuY3Rpb24gXyh0KSB7XG4gIHZhciBlO1xuICByZXR1cm4geyBjbGVhbmVkOiB0LnJlcGxhY2UoZiwgXCJcIiksIGVuY29kZWQ6ICgoZSA9IHQubWF0Y2goZikpID09IG51bGwgPyB2b2lkIDAgOiBlWzBdKSB8fCBcIlwiIH07XG59XG5mdW5jdGlvbiBPKHQpIHtcbiAgcmV0dXJuIHQgJiYgSlNPTi5wYXJzZShfKEpTT04uc3RyaW5naWZ5KHQpKS5jbGVhbmVkKTtcbn1cbmZ1bmN0aW9uIHN0ZWdhQ2xlYW4ocmVzdWx0KSB7XG4gIHJldHVybiBPKHJlc3VsdCk7XG59XG5jb25zdCB2ZXJjZWxTdGVnYUNsZWFuQWxsID0gc3RlZ2FDbGVhbjtcbmV4cG9ydCB7XG4gIEMsXG4gIHN0ZWdhQ2xlYW4sXG4gIHZlcmNlbFN0ZWdhQ2xlYW5BbGxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGVnYUNsZWFuLmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js":
/*!**********************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js ***!
  \**********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   encodeIntoResult: () => (/* binding */ encodeIntoResult),\n/* harmony export */   stegaEncodeSourceMap: () => (/* binding */ stegaEncodeSourceMap),\n/* harmony export */   stegaEncodeSourceMap$1: () => (/* binding */ stegaEncodeSourceMap$1)\n/* harmony export */ });\n/* harmony import */ var _stegaClean_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stegaClean.js */ \"(ssr)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\");\n\nconst reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/;\nfunction isKeySegment(segment) {\n  return typeof segment == \"string\" ? reKeySegment.test(segment.trim()) : typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction toString(path) {\n  if (!Array.isArray(path))\n    throw new Error(\"Path is not an array\");\n  return path.reduce((target, segment, i) => {\n    const segmentType = typeof segment;\n    if (segmentType === \"number\")\n      return `${target}[${segment}]`;\n    if (segmentType === \"string\")\n      return `${target}${i === 0 ? \"\" : \".\"}${segment}`;\n    if (isKeySegment(segment) && segment._key)\n      return `${target}[_key==\"${segment._key}\"]`;\n    if (Array.isArray(segment)) {\n      const [from, to] = segment;\n      return `${target}[${from}:${to}]`;\n    }\n    throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``);\n  }, \"\");\n}\nconst ESCAPE = {\n  \"\\f\": \"\\\\f\",\n  \"\\n\": \"\\\\n\",\n  \"\\r\": \"\\\\r\",\n  \"\t\": \"\\\\t\",\n  \"'\": \"\\\\'\",\n  \"\\\\\": \"\\\\\\\\\"\n}, UNESCAPE = {\n  \"\\\\f\": \"\\f\",\n  \"\\\\n\": `\n`,\n  \"\\\\r\": \"\\r\",\n  \"\\\\t\": \"\t\",\n  \"\\\\'\": \"'\",\n  \"\\\\\\\\\": \"\\\\\"\n};\nfunction jsonPath(path) {\n  return `$${path.map((segment) => typeof segment == \"string\" ? `['${segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match) => ESCAPE[match])}']` : typeof segment == \"number\" ? `[${segment}]` : segment._key !== \"\" ? `[?(@._key=='${segment._key.replace(/['\\\\]/g, (match) => ESCAPE[match])}')]` : `[${segment._index}]`).join(\"\")}`;\n}\nfunction parseJsonPath(path) {\n  const parsed = [], parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g;\n  let match;\n  for (; (match = parseRe.exec(path)) !== null; ) {\n    if (match[1] !== void 0) {\n      const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m) => UNESCAPE[m]);\n      parsed.push(key);\n      continue;\n    }\n    if (match[2] !== void 0) {\n      parsed.push(parseInt(match[2], 10));\n      continue;\n    }\n    if (match[3] !== void 0) {\n      const _key = match[3].replace(/\\\\(\\\\')/g, (m) => UNESCAPE[m]);\n      parsed.push({\n        _key,\n        _index: -1\n      });\n      continue;\n    }\n  }\n  return parsed;\n}\nfunction jsonPathToStudioPath(path) {\n  return path.map((segment) => {\n    if (typeof segment == \"string\" || typeof segment == \"number\")\n      return segment;\n    if (segment._key !== \"\")\n      return { _key: segment._key };\n    if (segment._index !== -1)\n      return segment._index;\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n  });\n}\nfunction jsonPathToMappingPath(path) {\n  return path.map((segment) => {\n    if (typeof segment == \"string\" || typeof segment == \"number\")\n      return segment;\n    if (segment._index !== -1)\n      return segment._index;\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n  });\n}\nfunction resolveMapping(resultPath, csm) {\n  if (!csm?.mappings)\n    return;\n  const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));\n  if (csm.mappings[resultMappingPath] !== void 0)\n    return {\n      mapping: csm.mappings[resultMappingPath],\n      matchedPath: resultMappingPath,\n      pathSuffix: \"\"\n    };\n  const mappings = Object.entries(csm.mappings).filter(([key]) => resultMappingPath.startsWith(key)).sort(([key1], [key2]) => key2.length - key1.length);\n  if (mappings.length == 0)\n    return;\n  const [matchedPath, mapping] = mappings[0], pathSuffix = resultMappingPath.substring(matchedPath.length);\n  return { mapping, matchedPath, pathSuffix };\n}\nfunction isArray(value) {\n  return value !== null && Array.isArray(value);\n}\nfunction isRecord(value) {\n  return typeof value == \"object\" && value !== null;\n}\nfunction walkMap(value, mappingFn, path = []) {\n  if (isArray(value))\n    return value.map((v, idx) => {\n      if (isRecord(v)) {\n        const _key = v._key;\n        if (typeof _key == \"string\")\n          return walkMap(v, mappingFn, path.concat({ _key, _index: idx }));\n      }\n      return walkMap(v, mappingFn, path.concat(idx));\n    });\n  if (isRecord(value)) {\n    if (value._type === \"block\" || value._type === \"span\") {\n      const result = { ...value };\n      return value._type === \"block\" ? result.children = walkMap(value.children, mappingFn, path.concat(\"children\")) : value._type === \"span\" && (result.text = walkMap(value.text, mappingFn, path.concat(\"text\"))), result;\n    }\n    return Object.fromEntries(\n      Object.entries(value).map(([k, v]) => [k, walkMap(v, mappingFn, path.concat(k))])\n    );\n  }\n  return mappingFn(value, path);\n}\nfunction encodeIntoResult(result, csm, encoder) {\n  return walkMap(result, (value, path) => {\n    if (typeof value != \"string\")\n      return value;\n    const resolveMappingResult = resolveMapping(path, csm);\n    if (!resolveMappingResult)\n      return value;\n    const { mapping, matchedPath } = resolveMappingResult;\n    if (mapping.type !== \"value\" || mapping.source.type !== \"documentValue\")\n      return value;\n    const sourceDocument = csm.documents[mapping.source.document], sourcePath = csm.paths[mapping.source.path], matchPathSegments = parseJsonPath(matchedPath), fullSourceSegments = parseJsonPath(sourcePath).concat(path.slice(matchPathSegments.length));\n    return encoder({\n      sourcePath: fullSourceSegments,\n      sourceDocument,\n      resultPath: path,\n      value\n    });\n  });\n}\nconst DRAFTS_FOLDER = \"drafts\", VERSION_FOLDER = \"versions\", PATH_SEPARATOR = \".\", DRAFTS_PREFIX = `${DRAFTS_FOLDER}${PATH_SEPARATOR}`, VERSION_PREFIX = `${VERSION_FOLDER}${PATH_SEPARATOR}`;\nfunction isDraftId(id) {\n  return id.startsWith(DRAFTS_PREFIX);\n}\nfunction isVersionId(id) {\n  return id.startsWith(VERSION_PREFIX);\n}\nfunction isPublishedId(id) {\n  return !isDraftId(id) && !isVersionId(id);\n}\nfunction getVersionFromId(id) {\n  if (!isVersionId(id)) return;\n  const [_versionPrefix, versionId, ..._publishedId] = id.split(PATH_SEPARATOR);\n  return versionId;\n}\nfunction getPublishedId(id) {\n  return isVersionId(id) ? id.split(PATH_SEPARATOR).slice(2).join(PATH_SEPARATOR) : isDraftId(id) ? id.slice(DRAFTS_PREFIX.length) : id;\n}\nfunction createEditUrl(options) {\n  const {\n    baseUrl,\n    workspace: _workspace = \"default\",\n    tool: _tool = \"default\",\n    id: _id,\n    type,\n    path,\n    projectId,\n    dataset\n  } = options;\n  if (!baseUrl)\n    throw new Error(\"baseUrl is required\");\n  if (!path)\n    throw new Error(\"path is required\");\n  if (!_id)\n    throw new Error(\"id is required\");\n  if (baseUrl !== \"/\" && baseUrl.endsWith(\"/\"))\n    throw new Error(\"baseUrl must not end with a slash\");\n  const workspace = _workspace === \"default\" ? void 0 : _workspace, tool = _tool === \"default\" ? void 0 : _tool, id = getPublishedId(_id), stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path, searchParams = new URLSearchParams({\n    baseUrl,\n    id,\n    type,\n    path: stringifiedPath\n  });\n  if (workspace && searchParams.set(\"workspace\", workspace), tool && searchParams.set(\"tool\", tool), projectId && searchParams.set(\"projectId\", projectId), dataset && searchParams.set(\"dataset\", dataset), isPublishedId(_id))\n    searchParams.set(\"perspective\", \"published\");\n  else if (isVersionId(_id)) {\n    const versionId = getVersionFromId(_id);\n    searchParams.set(\"perspective\", versionId);\n  }\n  const segments = [baseUrl === \"/\" ? \"\" : baseUrl];\n  workspace && segments.push(workspace);\n  const routerParams = [\n    \"mode=presentation\",\n    `id=${id}`,\n    `type=${type}`,\n    `path=${encodeURIComponent(stringifiedPath)}`\n  ];\n  return tool && routerParams.push(`tool=${tool}`), segments.push(\"intent\", \"edit\", `${routerParams.join(\";\")}?${searchParams}`), segments.join(\"/\");\n}\nfunction resolveStudioBaseRoute(studioUrl) {\n  let baseUrl = typeof studioUrl == \"string\" ? studioUrl : studioUrl.baseUrl;\n  return baseUrl !== \"/\" && (baseUrl = baseUrl.replace(/\\/$/, \"\")), typeof studioUrl == \"string\" ? { baseUrl } : { ...studioUrl, baseUrl };\n}\nconst filterDefault = ({ sourcePath, resultPath, value }) => {\n  if (isValidDate(value) || isValidURL(value))\n    return !1;\n  const endPath = sourcePath.at(-1);\n  return !(sourcePath.at(-2) === \"slug\" && endPath === \"current\" || typeof endPath == \"string\" && (endPath.startsWith(\"_\") || endPath.endsWith(\"Id\")) || sourcePath.some(\n    (path) => path === \"meta\" || path === \"metadata\" || path === \"openGraph\" || path === \"seo\"\n  ) || hasTypeLike(sourcePath) || hasTypeLike(resultPath) || typeof endPath == \"string\" && denylist.has(endPath));\n}, denylist = /* @__PURE__ */ new Set([\n  \"color\",\n  \"colour\",\n  \"currency\",\n  \"email\",\n  \"format\",\n  \"gid\",\n  \"hex\",\n  \"href\",\n  \"hsl\",\n  \"hsla\",\n  \"icon\",\n  \"id\",\n  \"index\",\n  \"key\",\n  \"language\",\n  \"layout\",\n  \"link\",\n  \"linkAction\",\n  \"locale\",\n  \"lqip\",\n  \"page\",\n  \"path\",\n  \"ref\",\n  \"rgb\",\n  \"rgba\",\n  \"route\",\n  \"secret\",\n  \"slug\",\n  \"status\",\n  \"tag\",\n  \"template\",\n  \"theme\",\n  \"type\",\n  \"textTheme\",\n  \"unit\",\n  \"url\",\n  \"username\",\n  \"variant\",\n  \"website\"\n]);\nfunction isValidDate(dateString) {\n  return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? !!Date.parse(dateString) : !1;\n}\nfunction isValidURL(url) {\n  try {\n    new URL(url, url.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n  } catch {\n    return !1;\n  }\n  return !0;\n}\nfunction hasTypeLike(path) {\n  return path.some((segment) => typeof segment == \"string\" && segment.match(/type/i) !== null);\n}\nconst TRUNCATE_LENGTH = 20;\nfunction stegaEncodeSourceMap(result, resultSourceMap, config) {\n  const { filter, logger, enabled } = config;\n  if (!enabled) {\n    const msg = \"config.enabled must be true, don't call this function otherwise\";\n    throw logger?.error?.(`[@sanity/client]: ${msg}`, { result, resultSourceMap, config }), new TypeError(msg);\n  }\n  if (!resultSourceMap)\n    return logger?.error?.(\"[@sanity/client]: Missing Content Source Map from response body\", {\n      result,\n      resultSourceMap,\n      config\n    }), result;\n  if (!config.studioUrl) {\n    const msg = \"config.studioUrl must be defined\";\n    throw logger?.error?.(`[@sanity/client]: ${msg}`, { result, resultSourceMap, config }), new TypeError(msg);\n  }\n  const report = {\n    encoded: [],\n    skipped: []\n  }, resultWithStega = encodeIntoResult(\n    result,\n    resultSourceMap,\n    ({ sourcePath, sourceDocument, resultPath, value }) => {\n      if ((typeof filter == \"function\" ? filter({ sourcePath, resultPath, filterDefault, sourceDocument, value }) : filterDefault({ sourcePath, resultPath, value })) === !1)\n        return logger && report.skipped.push({\n          path: prettyPathForLogging(sourcePath),\n          value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n          length: value.length\n        }), value;\n      logger && report.encoded.push({\n        path: prettyPathForLogging(sourcePath),\n        value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n        length: value.length\n      });\n      const { baseUrl, workspace, tool } = resolveStudioBaseRoute(\n        typeof config.studioUrl == \"function\" ? config.studioUrl(sourceDocument) : config.studioUrl\n      );\n      if (!baseUrl) return value;\n      const { _id: id, _type: type, _projectId: projectId, _dataset: dataset } = sourceDocument;\n      return (0,_stegaClean_js__WEBPACK_IMPORTED_MODULE_0__.C)(\n        value,\n        {\n          origin: \"sanity.io\",\n          href: createEditUrl({\n            baseUrl,\n            workspace,\n            tool,\n            id,\n            type,\n            path: sourcePath,\n            ...!config.omitCrossDatasetReferenceData && { dataset, projectId }\n          })\n        },\n        // We use custom logic to determine if we should skip encoding\n        !1\n      );\n    }\n  );\n  if (logger) {\n    const isSkipping = report.skipped.length, isEncoding = report.encoded.length;\n    if ((isSkipping || isEncoding) && ((logger?.groupCollapsed || logger.log)?.(\"[@sanity/client]: Encoding source map into result\"), logger.log?.(\n      `[@sanity/client]: Paths encoded: ${report.encoded.length}, skipped: ${report.skipped.length}`\n    )), report.encoded.length > 0 && (logger?.log?.(\"[@sanity/client]: Table of encoded paths\"), (logger?.table || logger.log)?.(report.encoded)), report.skipped.length > 0) {\n      const skipped = /* @__PURE__ */ new Set();\n      for (const { path } of report.skipped)\n        skipped.add(path.replace(reKeySegment, \"0\").replace(/\\[\\d+\\]/g, \"[]\"));\n      logger?.log?.(\"[@sanity/client]: List of skipped paths\", [...skipped.values()]);\n    }\n    (isSkipping || isEncoding) && logger?.groupEnd?.();\n  }\n  return resultWithStega;\n}\nfunction prettyPathForLogging(path) {\n  return toString(jsonPathToStudioPath(path));\n}\nvar stegaEncodeSourceMap$1 = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  stegaEncodeSourceMap\n});\n\n//# sourceMappingURL=stegaEncodeSourceMap.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/index.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/index.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePatch: () => (/* binding */ BasePatch),\n/* harmony export */   BaseTransaction: () => (/* binding */ BaseTransaction),\n/* harmony export */   ChannelError: () => (/* binding */ ChannelError),\n/* harmony export */   ClientError: () => (/* binding */ ClientError),\n/* harmony export */   ConnectionFailedError: () => (/* binding */ ConnectionFailedError),\n/* harmony export */   CorsOriginError: () => (/* binding */ CorsOriginError),\n/* harmony export */   DisconnectError: () => (/* binding */ DisconnectError),\n/* harmony export */   MessageError: () => (/* binding */ MessageError),\n/* harmony export */   MessageParseError: () => (/* binding */ MessageParseError),\n/* harmony export */   ObservablePatch: () => (/* binding */ ObservablePatch),\n/* harmony export */   ObservableSanityClient: () => (/* binding */ ObservableSanityClient),\n/* harmony export */   ObservableTransaction: () => (/* binding */ ObservableTransaction),\n/* harmony export */   Patch: () => (/* binding */ Patch),\n/* harmony export */   SanityClient: () => (/* binding */ SanityClient),\n/* harmony export */   ServerError: () => (/* binding */ ServerError),\n/* harmony export */   Transaction: () => (/* binding */ Transaction),\n/* harmony export */   connectEventSource: () => (/* binding */ connectEventSource),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   \"default\": () => (/* binding */ deprecatedCreateClient),\n/* harmony export */   requester: () => (/* binding */ requester),\n/* harmony export */   unstable__adapter: () => (/* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_22__.a),\n/* harmony export */   unstable__environment: () => (/* reexport safe */ get_it__WEBPACK_IMPORTED_MODULE_0__.environment),\n/* harmony export */   validateApiPerspective: () => (/* reexport safe */ _chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.validateApiPerspective)\n/* harmony export */ });\n/* harmony import */ var get_it__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! get-it */ \"(ssr)/./node_modules/.pnpm/get-it@8.6.7_debug@4.4.0/node_modules/get-it/dist/index.js\");\n/* harmony import */ var get_it__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! get-it */ \"(ssr)/./node_modules/.pnpm/get-it@8.6.7_debug@4.4.0/node_modules/get-it/dist/_chunks-es/node-request.js\");\n/* harmony import */ var get_it_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! get-it/middleware */ \"(ssr)/./node_modules/.pnpm/get-it@8.6.7_debug@4.4.0/node_modules/get-it/dist/middleware.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/Observable.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/defer.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/util/isObservable.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/of.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/from.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/lastValueFrom.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/catchError.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/concat.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/timer.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/throwError.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/tap.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/finalize.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/operators/share.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/merge.js\");\n/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! rxjs */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/esm5/internal/observable/empty.js\");\n/* harmony import */ var _chunks_es_stegaClean_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./_chunks-es/stegaClean.js */ \"(ssr)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaClean.js\");\n/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! rxjs/operators */ \"(ssr)/./node_modules/.pnpm/rxjs@7.8.2/node_modules/rxjs/dist/cjs/operators/index.js\");\n/* harmony import */ var _chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./_chunks-es/config.js */ \"(ssr)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/config.js\");\n\n\n\n\n\n\n\nclass ClientError extends Error {\n  response;\n  statusCode = 400;\n  responseBody;\n  details;\n  constructor(res) {\n    const props = extractErrorProps(res);\n    super(props.message), Object.assign(this, props);\n  }\n}\nclass ServerError extends Error {\n  response;\n  statusCode = 500;\n  responseBody;\n  details;\n  constructor(res) {\n    const props = extractErrorProps(res);\n    super(props.message), Object.assign(this, props);\n  }\n}\nfunction extractErrorProps(res) {\n  const body = res.body, props = {\n    response: res,\n    statusCode: res.statusCode,\n    responseBody: stringifyBody(body, res),\n    message: \"\",\n    details: void 0\n  };\n  if (body.error && body.message)\n    return props.message = `${body.error} - ${body.message}`, props;\n  if (isMutationError(body) || isActionError(body)) {\n    const allItems = body.error.items || [], items = allItems.slice(0, 5).map((item) => item.error?.description).filter(Boolean);\n    let itemsStr = items.length ? `:\n- ${items.join(`\n- `)}` : \"\";\n    return allItems.length > 5 && (itemsStr += `\n...and ${allItems.length - 5} more`), props.message = `${body.error.description}${itemsStr}`, props.details = body.error, props;\n  }\n  return body.error && body.error.description ? (props.message = body.error.description, props.details = body.error, props) : (props.message = body.error || body.message || httpErrorMessage(res), props);\n}\nfunction isMutationError(body) {\n  return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"mutationError\" && typeof body.error.description == \"string\";\n}\nfunction isActionError(body) {\n  return isPlainObject(body) && isPlainObject(body.error) && body.error.type === \"actionError\" && typeof body.error.description == \"string\";\n}\nfunction isPlainObject(obj) {\n  return typeof obj == \"object\" && obj !== null && !Array.isArray(obj);\n}\nfunction httpErrorMessage(res) {\n  const statusMessage = res.statusMessage ? ` ${res.statusMessage}` : \"\";\n  return `${res.method}-request to ${res.url} resulted in HTTP ${res.statusCode}${statusMessage}`;\n}\nfunction stringifyBody(body, res) {\n  return (res.headers[\"content-type\"] || \"\").toLowerCase().indexOf(\"application/json\") !== -1 ? JSON.stringify(body, null, 2) : body;\n}\nclass CorsOriginError extends Error {\n  projectId;\n  addOriginUrl;\n  constructor({ projectId }) {\n    super(\"CorsOriginError\"), this.name = \"CorsOriginError\", this.projectId = projectId;\n    const url = new URL(`https://sanity.io/manage/project/${projectId}/api`);\n    if (typeof location < \"u\") {\n      const { origin } = location;\n      url.searchParams.set(\"cors\", \"add\"), url.searchParams.set(\"origin\", origin), this.addOriginUrl = url, this.message = `The current origin is not allowed to connect to the Live Content API. Add it here: ${url}`;\n    } else\n      this.message = `The current origin is not allowed to connect to the Live Content API. Change your configuration here: ${url}`;\n  }\n}\nconst httpError = {\n  onResponse: (res) => {\n    if (res.statusCode >= 500)\n      throw new ServerError(res);\n    if (res.statusCode >= 400)\n      throw new ClientError(res);\n    return res;\n  }\n};\nfunction printWarnings() {\n  const seen = {};\n  return {\n    onResponse: (res) => {\n      const warn = res.headers[\"x-sanity-warning\"], warnings = Array.isArray(warn) ? warn : [warn];\n      for (const msg of warnings)\n        !msg || seen[msg] || (seen[msg] = !0, console.warn(msg));\n      return res;\n    }\n  };\n}\nfunction defineHttpRequest(envMiddleware) {\n  return (0,get_it__WEBPACK_IMPORTED_MODULE_0__.getIt)([\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.retry)({ shouldRetry }),\n    ...envMiddleware,\n    printWarnings(),\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.jsonRequest)(),\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.jsonResponse)(),\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.progress)(),\n    httpError,\n    (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.observable)({ implementation: rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable })\n  ]);\n}\nfunction shouldRetry(err, attempt, options) {\n  if (options.maxRetries === 0) return !1;\n  const isSafe = options.method === \"GET\" || options.method === \"HEAD\", isQuery = (options.uri || options.url).startsWith(\"/data/query\"), isRetriableResponse = err.response && (err.response.statusCode === 429 || err.response.statusCode === 502 || err.response.statusCode === 503);\n  return (isSafe || isQuery) && isRetriableResponse ? !0 : get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.retry.shouldRetry(err, attempt, options);\n}\nclass ConnectionFailedError extends Error {\n  name = \"ConnectionFailedError\";\n}\nclass DisconnectError extends Error {\n  name = \"DisconnectError\";\n  reason;\n  constructor(message, reason, options = {}) {\n    super(message, options), this.reason = reason;\n  }\n}\nclass ChannelError extends Error {\n  name = \"ChannelError\";\n  data;\n  constructor(message, data) {\n    super(message), this.data = data;\n  }\n}\nclass MessageError extends Error {\n  name = \"MessageError\";\n  data;\n  constructor(message, data, options = {}) {\n    super(message, options), this.data = data;\n  }\n}\nclass MessageParseError extends Error {\n  name = \"MessageParseError\";\n}\nconst REQUIRED_EVENTS = [\"channelError\", \"disconnect\"];\nfunction connectEventSource(initEventSource, events) {\n  return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.defer)(() => {\n    const es = initEventSource();\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__.isObservable)(es) ? es : (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(es);\n  }).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)((es) => connectWithESInstance(es, events)));\n}\nfunction connectWithESInstance(es, events) {\n  return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer) => {\n    const emitOpen = events.includes(\"open\"), emitReconnect = events.includes(\"reconnect\");\n    function onError(evt) {\n      if (\"data\" in evt) {\n        const [parseError, event] = parseEvent(evt);\n        observer.error(\n          parseError ? new MessageParseError(\"Unable to parse EventSource error message\", { cause: event }) : new MessageError((event?.data).message, event)\n        );\n        return;\n      }\n      es.readyState === es.CLOSED ? observer.error(new ConnectionFailedError(\"EventSource connection failed\")) : emitReconnect && observer.next({ type: \"reconnect\" });\n    }\n    function onOpen() {\n      observer.next({ type: \"open\" });\n    }\n    function onMessage(message) {\n      const [parseError, event] = parseEvent(message);\n      if (parseError) {\n        observer.error(\n          new MessageParseError(\"Unable to parse EventSource message\", { cause: parseError })\n        );\n        return;\n      }\n      if (message.type === \"channelError\") {\n        observer.error(new ChannelError(extractErrorMessage(event?.data), event.data));\n        return;\n      }\n      if (message.type === \"disconnect\") {\n        observer.error(\n          new DisconnectError(\n            `Server disconnected client: ${event.data?.reason || \"unknown error\"}`\n          )\n        );\n        return;\n      }\n      observer.next({\n        type: message.type,\n        id: message.lastEventId,\n        ...event.data ? { data: event.data } : {}\n      });\n    }\n    es.addEventListener(\"error\", onError), emitOpen && es.addEventListener(\"open\", onOpen);\n    const cleanedEvents = [.../* @__PURE__ */ new Set([...REQUIRED_EVENTS, ...events])].filter((type) => type !== \"error\" && type !== \"open\" && type !== \"reconnect\");\n    return cleanedEvents.forEach((type) => es.addEventListener(type, onMessage)), () => {\n      es.removeEventListener(\"error\", onError), emitOpen && es.removeEventListener(\"open\", onOpen), cleanedEvents.forEach((type) => es.removeEventListener(type, onMessage)), es.close();\n    };\n  });\n}\nfunction parseEvent(message) {\n  try {\n    const data = typeof message.data == \"string\" && JSON.parse(message.data);\n    return [\n      null,\n      {\n        type: message.type,\n        id: message.lastEventId,\n        ...isEmptyObject(data) ? {} : { data }\n      }\n    ];\n  } catch (err) {\n    return [err, null];\n  }\n}\nfunction extractErrorMessage(err) {\n  return err.error ? err.error.description ? err.error.description : typeof err.error == \"string\" ? err.error : JSON.stringify(err.error, null, 2) : err.message || \"Unknown listener error\";\n}\nfunction isEmptyObject(data) {\n  for (const _ in data)\n    return !1;\n  return !0;\n}\nfunction getSelection(sel) {\n  if (typeof sel == \"string\")\n    return { id: sel };\n  if (Array.isArray(sel))\n    return { query: \"*[_id in $ids]\", params: { ids: sel } };\n  if (typeof sel == \"object\" && sel !== null && \"query\" in sel && typeof sel.query == \"string\")\n    return \"params\" in sel && typeof sel.params == \"object\" && sel.params !== null ? { query: sel.query, params: sel.params } : { query: sel.query };\n  const selectionOpts = [\n    \"* Document ID (<docId>)\",\n    \"* Array of document IDs\",\n    \"* Object containing `query`\"\n  ].join(`\n`);\n  throw new Error(`Unknown selection - must be one of:\n\n${selectionOpts}`);\n}\nclass BasePatch {\n  selection;\n  operations;\n  constructor(selection, operations = {}) {\n    this.selection = selection, this.operations = operations;\n  }\n  /**\n   * Sets the given attributes to the document. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */\n  set(attrs) {\n    return this._assign(\"set\", attrs);\n  }\n  /**\n   * Sets the given attributes to the document if they are not currently set. Does NOT merge objects.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to set. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"value\"\\}\n   */\n  setIfMissing(attrs) {\n    return this._assign(\"setIfMissing\", attrs);\n  }\n  /**\n   * Performs a \"diff-match-patch\" operation on the string attributes provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attributes to perform operation on. To set a deep attribute, use JSONMatch, eg: \\{\"nested.prop\": \"dmp\"\\}\n   */\n  diffMatchPatch(attrs) {\n    return (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.validateObject)(\"diffMatchPatch\", attrs), this._assign(\"diffMatchPatch\", attrs);\n  }\n  /**\n   * Unsets the attribute paths provided.\n   * The operation is added to the current patch, ready to be commited by `commit()`\n   *\n   * @param attrs - Attribute paths to unset.\n   */\n  unset(attrs) {\n    if (!Array.isArray(attrs))\n      throw new Error(\"unset(attrs) takes an array of attributes to unset, non-array given\");\n    return this.operations = Object.assign({}, this.operations, { unset: attrs }), this;\n  }\n  /**\n   * Increment a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to increment, values representing the number to increment by.\n   */\n  inc(attrs) {\n    return this._assign(\"inc\", attrs);\n  }\n  /**\n   * Decrement a numeric value. Each entry in the argument is either an attribute or a JSON path. The value may be a positive or negative integer or floating-point value. The operation will fail if target value is not a numeric value, or doesn't exist.\n   *\n   * @param attrs - Object of attribute paths to decrement, values representing the number to decrement by.\n   */\n  dec(attrs) {\n    return this._assign(\"dec\", attrs);\n  }\n  /**\n   * Provides methods for modifying arrays, by inserting, appending and replacing elements via a JSONPath expression.\n   *\n   * @param at - Location to insert at, relative to the given selector, or 'replace' the matched path\n   * @param selector - JSONPath expression, eg `comments[-1]` or `blocks[_key==\"abc123\"]`\n   * @param items - Array of items to insert/replace\n   */\n  insert(at, selector, items) {\n    return (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.validateInsert)(at, selector, items), this._assign(\"insert\", { [at]: selector, items });\n  }\n  /**\n   * Append the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to append to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to append to the array\n   */\n  append(selector, items) {\n    return this.insert(\"after\", `${selector}[-1]`, items);\n  }\n  /**\n   * Prepend the given items to the array at the given JSONPath\n   *\n   * @param selector - Attribute/path to prepend to, eg `comments` or `person.hobbies`\n   * @param items - Array of items to prepend to the array\n   */\n  prepend(selector, items) {\n    return this.insert(\"before\", `${selector}[0]`, items);\n  }\n  /**\n   * Change the contents of an array by removing existing elements and/or adding new elements.\n   *\n   * @param selector - Attribute or JSONPath expression for array\n   * @param start - Index at which to start changing the array (with origin 0). If greater than the length of the array, actual starting index will be set to the length of the array. If negative, will begin that many elements from the end of the array (with origin -1) and will be set to 0 if absolute value is greater than the length of the array.x\n   * @param deleteCount - An integer indicating the number of old array elements to remove.\n   * @param items - The elements to add to the array, beginning at the start index. If you don't specify any elements, splice() will only remove elements from the array.\n   */\n  splice(selector, start, deleteCount, items) {\n    const delAll = typeof deleteCount > \"u\" || deleteCount === -1, startIndex = start < 0 ? start - 1 : start, delCount = delAll ? -1 : Math.max(0, start + deleteCount), delRange = startIndex < 0 && delCount >= 0 ? \"\" : delCount, rangeSelector = `${selector}[${startIndex}:${delRange}]`;\n    return this.insert(\"replace\", rangeSelector, items || []);\n  }\n  /**\n   * Adds a revision clause, preventing the document from being patched if the `_rev` property does not match the given value\n   *\n   * @param rev - Revision to lock the patch to\n   */\n  ifRevisionId(rev) {\n    return this.operations.ifRevisionID = rev, this;\n  }\n  /**\n   * Return a plain JSON representation of the patch\n   */\n  serialize() {\n    return { ...getSelection(this.selection), ...this.operations };\n  }\n  /**\n   * Return a plain JSON representation of the patch\n   */\n  toJSON() {\n    return this.serialize();\n  }\n  /**\n   * Clears the patch of all operations\n   */\n  reset() {\n    return this.operations = {}, this;\n  }\n  _assign(op, props, merge2 = !0) {\n    return (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.validateObject)(op, props), this.operations = Object.assign({}, this.operations, {\n      [op]: Object.assign({}, merge2 && this.operations[op] || {}, props)\n    }), this;\n  }\n  _set(op, props) {\n    return this._assign(op, props, !1);\n  }\n}\nclass ObservablePatch extends BasePatch {\n  #client;\n  constructor(selection, operations, client) {\n    super(selection, operations), this.#client = client;\n  }\n  /**\n   * Clones the patch\n   */\n  clone() {\n    return new ObservablePatch(this.selection, { ...this.operations }, this.#client);\n  }\n  commit(options) {\n    if (!this.#client)\n      throw new Error(\n        \"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\"\n      );\n    const returnFirst = typeof this.selection == \"string\", opts = Object.assign({ returnFirst, returnDocuments: !0 }, options);\n    return this.#client.mutate({ patch: this.serialize() }, opts);\n  }\n}\nclass Patch extends BasePatch {\n  #client;\n  constructor(selection, operations, client) {\n    super(selection, operations), this.#client = client;\n  }\n  /**\n   * Clones the patch\n   */\n  clone() {\n    return new Patch(this.selection, { ...this.operations }, this.#client);\n  }\n  commit(options) {\n    if (!this.#client)\n      throw new Error(\n        \"No `client` passed to patch, either provide one or pass the patch to a clients `mutate()` method\"\n      );\n    const returnFirst = typeof this.selection == \"string\", opts = Object.assign({ returnFirst, returnDocuments: !0 }, options);\n    return this.#client.mutate({ patch: this.serialize() }, opts);\n  }\n}\nconst defaultMutateOptions = { returnDocuments: !1 };\nclass BaseTransaction {\n  operations;\n  trxId;\n  constructor(operations = [], transactionId) {\n    this.operations = operations, this.trxId = transactionId;\n  }\n  /**\n   * Creates a new Sanity document. If `_id` is provided and already exists, the mutation will fail. If no `_id` is given, one will automatically be generated by the database.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create. Requires a `_type` property.\n   */\n  create(doc) {\n    return (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.validateObject)(\"create\", doc), this._add({ create: doc });\n  }\n  /**\n   * Creates a new Sanity document. If a document with the same `_id` already exists, the create operation will be ignored.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create if it does not already exist. Requires `_id` and `_type` properties.\n   */\n  createIfNotExists(doc) {\n    const op = \"createIfNotExists\";\n    return (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.validateObject)(op, doc), (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.requireDocumentId)(op, doc), this._add({ [op]: doc });\n  }\n  /**\n   * Creates a new Sanity document, or replaces an existing one if the same `_id` is already used.\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param doc - Document to create or replace. Requires `_id` and `_type` properties.\n   */\n  createOrReplace(doc) {\n    const op = \"createOrReplace\";\n    return (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.validateObject)(op, doc), (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.requireDocumentId)(op, doc), this._add({ [op]: doc });\n  }\n  /**\n   * Deletes the document with the given document ID\n   * The operation is added to the current transaction, ready to be commited by `commit()`\n   *\n   * @param documentId - Document ID to delete\n   */\n  delete(documentId) {\n    return (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.validateDocumentId)(\"delete\", documentId), this._add({ delete: { id: documentId } });\n  }\n  transactionId(id) {\n    return id ? (this.trxId = id, this) : this.trxId;\n  }\n  /**\n   * Return a plain JSON representation of the transaction\n   */\n  serialize() {\n    return [...this.operations];\n  }\n  /**\n   * Return a plain JSON representation of the transaction\n   */\n  toJSON() {\n    return this.serialize();\n  }\n  /**\n   * Clears the transaction of all operations\n   */\n  reset() {\n    return this.operations = [], this;\n  }\n  _add(mut) {\n    return this.operations.push(mut), this;\n  }\n}\nclass Transaction extends BaseTransaction {\n  #client;\n  constructor(operations, client, transactionId) {\n    super(operations, transactionId), this.#client = client;\n  }\n  /**\n   * Clones the transaction\n   */\n  clone() {\n    return new Transaction([...this.operations], this.#client, this.trxId);\n  }\n  commit(options) {\n    if (!this.#client)\n      throw new Error(\n        \"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\"\n      );\n    return this.#client.mutate(\n      this.serialize(),\n      Object.assign({ transactionId: this.trxId }, defaultMutateOptions, options || {})\n    );\n  }\n  patch(patchOrDocumentId, patchOps) {\n    const isBuilder = typeof patchOps == \"function\", isPatch = typeof patchOrDocumentId != \"string\" && patchOrDocumentId instanceof Patch, isMutationSelection = typeof patchOrDocumentId == \"object\" && (\"query\" in patchOrDocumentId || \"id\" in patchOrDocumentId);\n    if (isPatch)\n      return this._add({ patch: patchOrDocumentId.serialize() });\n    if (isBuilder) {\n      const patch = patchOps(new Patch(patchOrDocumentId, {}, this.#client));\n      if (!(patch instanceof Patch))\n        throw new Error(\"function passed to `patch()` must return the patch\");\n      return this._add({ patch: patch.serialize() });\n    }\n    if (isMutationSelection) {\n      const patch = new Patch(patchOrDocumentId, patchOps || {}, this.#client);\n      return this._add({ patch: patch.serialize() });\n    }\n    return this._add({ patch: { id: patchOrDocumentId, ...patchOps } });\n  }\n}\nclass ObservableTransaction extends BaseTransaction {\n  #client;\n  constructor(operations, client, transactionId) {\n    super(operations, transactionId), this.#client = client;\n  }\n  /**\n   * Clones the transaction\n   */\n  clone() {\n    return new ObservableTransaction([...this.operations], this.#client, this.trxId);\n  }\n  commit(options) {\n    if (!this.#client)\n      throw new Error(\n        \"No `client` passed to transaction, either provide one or pass the transaction to a clients `mutate()` method\"\n      );\n    return this.#client.mutate(\n      this.serialize(),\n      Object.assign({ transactionId: this.trxId }, defaultMutateOptions, options || {})\n    );\n  }\n  patch(patchOrDocumentId, patchOps) {\n    const isBuilder = typeof patchOps == \"function\";\n    if (typeof patchOrDocumentId != \"string\" && patchOrDocumentId instanceof ObservablePatch)\n      return this._add({ patch: patchOrDocumentId.serialize() });\n    if (isBuilder) {\n      const patch = patchOps(new ObservablePatch(patchOrDocumentId, {}, this.#client));\n      if (!(patch instanceof ObservablePatch))\n        throw new Error(\"function passed to `patch()` must return the patch\");\n      return this._add({ patch: patch.serialize() });\n    }\n    return this._add({ patch: { id: patchOrDocumentId, ...patchOps } });\n  }\n}\nconst projectHeader = \"X-Sanity-Project-ID\";\nfunction requestOptions(config, overrides = {}) {\n  const headers2 = {}, token = overrides.token || config.token;\n  token && (headers2.Authorization = `Bearer ${token}`), !overrides.useGlobalApi && !config.useProjectHostname && config.projectId && (headers2[projectHeader] = config.projectId);\n  const withCredentials = !!(typeof overrides.withCredentials > \"u\" ? config.withCredentials : overrides.withCredentials), timeout = typeof overrides.timeout > \"u\" ? config.timeout : overrides.timeout;\n  return Object.assign({}, overrides, {\n    headers: Object.assign({}, headers2, overrides.headers || {}),\n    timeout: typeof timeout > \"u\" ? 5 * 60 * 1e3 : timeout,\n    proxy: overrides.proxy || config.proxy,\n    json: !0,\n    withCredentials,\n    fetch: typeof overrides.fetch == \"object\" && typeof config.fetch == \"object\" ? { ...config.fetch, ...overrides.fetch } : overrides.fetch || config.fetch\n  });\n}\nconst encodeQueryString = ({\n  query,\n  params = {},\n  options = {}\n}) => {\n  const searchParams = new URLSearchParams(), { tag, includeMutations, returnQuery, ...opts } = options;\n  tag && searchParams.append(\"tag\", tag), searchParams.append(\"query\", query);\n  for (const [key, value] of Object.entries(params))\n    searchParams.append(`$${key}`, JSON.stringify(value));\n  for (const [key, value] of Object.entries(opts))\n    value && searchParams.append(key, `${value}`);\n  return returnQuery === !1 && searchParams.append(\"returnQuery\", \"false\"), includeMutations === !1 && searchParams.append(\"includeMutations\", \"false\"), `?${searchParams}`;\n}, excludeFalsey = (param, defValue) => param === !1 ? void 0 : typeof param > \"u\" ? defValue : param, getMutationQuery = (options = {}) => ({\n  dryRun: options.dryRun,\n  returnIds: !0,\n  returnDocuments: excludeFalsey(options.returnDocuments, !0),\n  visibility: options.visibility || \"sync\",\n  autoGenerateArrayKeys: options.autoGenerateArrayKeys,\n  skipCrossDatasetReferenceValidation: options.skipCrossDatasetReferenceValidation\n}), isResponse = (event) => event.type === \"response\", getBody = (event) => event.body, indexBy = (docs, attr) => docs.reduce((indexed, doc) => (indexed[attr(doc)] = doc, indexed), /* @__PURE__ */ Object.create(null)), getQuerySizeLimit = 11264;\nfunction _fetch(client, httpRequest, _stega, query, _params = {}, options = {}) {\n  const stega = \"stega\" in options ? {\n    ..._stega || {},\n    ...typeof options.stega == \"boolean\" ? { enabled: options.stega } : options.stega || {}\n  } : _stega, params = stega.enabled ? (0,_chunks_es_stegaClean_js__WEBPACK_IMPORTED_MODULE_8__.stegaClean)(_params) : _params, mapResponse = options.filterResponse === !1 ? (res) => res : (res) => res.result, { cache, next, ...opts } = {\n    // Opt out of setting a `signal` on an internal `fetch` if one isn't provided.\n    // This is necessary in React Server Components to avoid opting out of Request Memoization.\n    useAbortSignal: typeof options.signal < \"u\",\n    // Set `resultSourceMap' when stega is enabled, as it's required for encoding.\n    resultSourceMap: stega.enabled ? \"withKeyArraySelector\" : options.resultSourceMap,\n    ...options,\n    // Default to not returning the query, unless `filterResponse` is `false`,\n    // or `returnQuery` is explicitly set. `true` is the default in Content Lake, so skip if truthy\n    returnQuery: options.filterResponse === !1 && options.returnQuery !== !1\n  }, reqOpts = typeof cache < \"u\" || typeof next < \"u\" ? { ...opts, fetch: { cache, next } } : opts, $request = _dataRequest(client, httpRequest, \"query\", { query, params }, reqOpts);\n  return stega.enabled ? $request.pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.combineLatestWith)(\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_10__.from)(\n        __webpack_require__.e(/*! import() */ \"vendor-chunks/@sanity+client@6.28.4_debug@4.4.0\").then(__webpack_require__.bind(__webpack_require__, /*! ./_chunks-es/stegaEncodeSourceMap.js */ \"(ssr)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/_chunks-es/stegaEncodeSourceMap.js\")).then(function(n) {\n          return n.stegaEncodeSourceMap$1;\n        }).then(\n          ({ stegaEncodeSourceMap }) => stegaEncodeSourceMap\n        )\n      )\n    ),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(\n      ([res, stegaEncodeSourceMap]) => {\n        const result = stegaEncodeSourceMap(res.result, res.resultSourceMap, stega);\n        return mapResponse({ ...res, result });\n      }\n    )\n  ) : $request.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(mapResponse));\n}\nfunction _getDocument(client, httpRequest, id, opts = {}) {\n  const options = {\n    uri: _getDataUrl(client, \"doc\", id),\n    json: !0,\n    tag: opts.tag,\n    signal: opts.signal\n  };\n  return _requestObservable(client, httpRequest, options).pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.filter)(isResponse),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((event) => event.body.documents && event.body.documents[0])\n  );\n}\nfunction _getDocuments(client, httpRequest, ids, opts = {}) {\n  const options = {\n    uri: _getDataUrl(client, \"doc\", ids.join(\",\")),\n    json: !0,\n    tag: opts.tag,\n    signal: opts.signal\n  };\n  return _requestObservable(client, httpRequest, options).pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.filter)(isResponse),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((event) => {\n      const indexed = indexBy(event.body.documents || [], (doc) => doc._id);\n      return ids.map((id) => indexed[id] || null);\n    })\n  );\n}\nfunction _createIfNotExists(client, httpRequest, doc, options) {\n  return (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.requireDocumentId)(\"createIfNotExists\", doc), _create(client, httpRequest, doc, \"createIfNotExists\", options);\n}\nfunction _createOrReplace(client, httpRequest, doc, options) {\n  return (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.requireDocumentId)(\"createOrReplace\", doc), _create(client, httpRequest, doc, \"createOrReplace\", options);\n}\nfunction _delete(client, httpRequest, selection, options) {\n  return _dataRequest(\n    client,\n    httpRequest,\n    \"mutate\",\n    { mutations: [{ delete: getSelection(selection) }] },\n    options\n  );\n}\nfunction _mutate(client, httpRequest, mutations, options) {\n  let mut;\n  mutations instanceof Patch || mutations instanceof ObservablePatch ? mut = { patch: mutations.serialize() } : mutations instanceof Transaction || mutations instanceof ObservableTransaction ? mut = mutations.serialize() : mut = mutations;\n  const muts = Array.isArray(mut) ? mut : [mut], transactionId = options && options.transactionId || void 0;\n  return _dataRequest(client, httpRequest, \"mutate\", { mutations: muts, transactionId }, options);\n}\nfunction _action(client, httpRequest, actions, options) {\n  const acts = Array.isArray(actions) ? actions : [actions], transactionId = options && options.transactionId || void 0, skipCrossDatasetReferenceValidation = options && options.skipCrossDatasetReferenceValidation || void 0, dryRun = options && options.dryRun || void 0;\n  return _dataRequest(\n    client,\n    httpRequest,\n    \"actions\",\n    { actions: acts, transactionId, skipCrossDatasetReferenceValidation, dryRun },\n    options\n  );\n}\nfunction _dataRequest(client, httpRequest, endpoint, body, options = {}) {\n  const isMutation = endpoint === \"mutate\", isAction = endpoint === \"actions\", isQuery = endpoint === \"query\", strQuery = isMutation || isAction ? \"\" : encodeQueryString(body), useGet = !isMutation && !isAction && strQuery.length < getQuerySizeLimit, stringQuery = useGet ? strQuery : \"\", returnFirst = options.returnFirst, { timeout, token, tag, headers: headers2, returnQuery, lastLiveEventId, cacheMode } = options, uri = _getDataUrl(client, endpoint, stringQuery), reqOptions = {\n    method: useGet ? \"GET\" : \"POST\",\n    uri,\n    json: !0,\n    body: useGet ? void 0 : body,\n    query: isMutation && getMutationQuery(options),\n    timeout,\n    headers: headers2,\n    token,\n    tag,\n    returnQuery,\n    perspective: options.perspective,\n    resultSourceMap: options.resultSourceMap,\n    lastLiveEventId: Array.isArray(lastLiveEventId) ? lastLiveEventId[0] : lastLiveEventId,\n    cacheMode,\n    canUseCdn: isQuery,\n    signal: options.signal,\n    fetch: options.fetch,\n    useAbortSignal: options.useAbortSignal,\n    useCdn: options.useCdn\n  };\n  return _requestObservable(client, httpRequest, reqOptions).pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.filter)(isResponse),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(getBody),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((res) => {\n      if (!isMutation)\n        return res;\n      const results = res.results || [];\n      if (options.returnDocuments)\n        return returnFirst ? results[0] && results[0].document : results.map((mut) => mut.document);\n      const key = returnFirst ? \"documentId\" : \"documentIds\", ids = returnFirst ? results[0] && results[0].id : results.map((mut) => mut.id);\n      return {\n        transactionId: res.transactionId,\n        results,\n        [key]: ids\n      };\n    })\n  );\n}\nfunction _create(client, httpRequest, doc, op, options = {}) {\n  const mutation = { [op]: doc }, opts = Object.assign({ returnFirst: !0, returnDocuments: !0 }, options);\n  return _dataRequest(client, httpRequest, \"mutate\", { mutations: [mutation] }, opts);\n}\nfunction _requestObservable(client, httpRequest, options) {\n  const uri = options.url || options.uri, config = client.config(), canUseCdn = typeof options.canUseCdn > \"u\" ? [\"GET\", \"HEAD\"].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/\") === 0 : options.canUseCdn;\n  let useCdn = (options.useCdn ?? config.useCdn) && canUseCdn;\n  const tag = options.tag && config.requestTagPrefix ? [config.requestTagPrefix, options.tag].join(\".\") : options.tag || config.requestTagPrefix;\n  if (tag && options.tag !== null && (options.query = { tag: (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.requestTag)(tag), ...options.query }), [\"GET\", \"HEAD\", \"POST\"].indexOf(options.method || \"GET\") >= 0 && uri.indexOf(\"/data/query/\") === 0) {\n    const resultSourceMap = options.resultSourceMap ?? config.resultSourceMap;\n    resultSourceMap !== void 0 && resultSourceMap !== !1 && (options.query = { resultSourceMap, ...options.query });\n    const perspectiveOption = options.perspective || config.perspective;\n    typeof perspectiveOption < \"u\" && (perspectiveOption === \"previewDrafts\" && (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.printPreviewDraftsDeprecationWarning)(), (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.validateApiPerspective)(perspectiveOption), options.query = {\n      perspective: Array.isArray(perspectiveOption) ? perspectiveOption.join(\",\") : perspectiveOption,\n      ...options.query\n    }, (Array.isArray(perspectiveOption) && perspectiveOption.length > 0 || // previewDrafts was renamed to drafts, but keep for backwards compat\n    perspectiveOption === \"previewDrafts\" || perspectiveOption === \"drafts\") && useCdn && (useCdn = !1, (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.printCdnPreviewDraftsWarning)())), options.lastLiveEventId && (options.query = { ...options.query, lastLiveEventId: options.lastLiveEventId }), options.returnQuery === !1 && (options.query = { returnQuery: \"false\", ...options.query }), useCdn && options.cacheMode == \"noStale\" && (options.query = { cacheMode: \"noStale\", ...options.query });\n  }\n  const reqOptions = requestOptions(\n    config,\n    Object.assign({}, options, {\n      url: _getUrl(client, uri, useCdn)\n    })\n  ), request = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable(\n    (subscriber) => httpRequest(reqOptions, config.requester).subscribe(subscriber)\n  );\n  return options.signal ? request.pipe(_withAbortSignal(options.signal)) : request;\n}\nfunction _request(client, httpRequest, options) {\n  return _requestObservable(client, httpRequest, options).pipe(\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.filter)((event) => event.type === \"response\"),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((event) => event.body)\n  );\n}\nfunction _getDataUrl(client, operation, path) {\n  const config = client.config(), catalog = (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.hasDataset)(config), baseUri = `/${operation}/${catalog}`;\n  return `/data${path ? `${baseUri}/${path}` : baseUri}`.replace(/\\/($|\\?)/, \"$1\");\n}\nfunction _getUrl(client, uri, canUseCdn = !1) {\n  const { url, cdnUrl } = client.config();\n  return `${canUseCdn ? cdnUrl : url}/${uri.replace(/^\\//, \"\")}`;\n}\nfunction _withAbortSignal(signal) {\n  return (input) => new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer) => {\n    const abort = () => observer.error(_createAbortError(signal));\n    if (signal && signal.aborted) {\n      abort();\n      return;\n    }\n    const subscription = input.subscribe(observer);\n    return signal.addEventListener(\"abort\", abort), () => {\n      signal.removeEventListener(\"abort\", abort), subscription.unsubscribe();\n    };\n  });\n}\nconst isDomExceptionSupported = !!globalThis.DOMException;\nfunction _createAbortError(signal) {\n  if (isDomExceptionSupported)\n    return new DOMException(signal?.reason ?? \"The operation was aborted.\", \"AbortError\");\n  const error = new Error(signal?.reason ?? \"The operation was aborted.\");\n  return error.name = \"AbortError\", error;\n}\nclass ObservableAssetsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  upload(assetType, body, options) {\n    return _upload(this.#client, this.#httpRequest, assetType, body, options);\n  }\n}\nclass AssetsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  upload(assetType, body, options) {\n    const observable2 = _upload(this.#client, this.#httpRequest, assetType, body, options);\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(\n      observable2.pipe(\n        (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.filter)((event) => event.type === \"response\"),\n        (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(\n          (event) => event.body.document\n        )\n      )\n    );\n  }\n}\nfunction _upload(client, httpRequest, assetType, body, opts = {}) {\n  (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.validateAssetType)(assetType);\n  let meta = opts.extract || void 0;\n  meta && !meta.length && (meta = [\"none\"]);\n  const dataset2 = (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.hasDataset)(client.config()), assetEndpoint = assetType === \"image\" ? \"images\" : \"files\", options = optionsFromFile(opts, body), { tag, label, title, description, creditLine, filename, source } = options, query = {\n    label,\n    title,\n    description,\n    filename,\n    meta,\n    creditLine\n  };\n  return source && (query.sourceId = source.id, query.sourceName = source.name, query.sourceUrl = source.url), _requestObservable(client, httpRequest, {\n    tag,\n    method: \"POST\",\n    timeout: options.timeout || 0,\n    uri: `/assets/${assetEndpoint}/${dataset2}`,\n    headers: options.contentType ? { \"Content-Type\": options.contentType } : {},\n    query,\n    body\n  });\n}\nfunction optionsFromFile(opts, file) {\n  return typeof File > \"u\" || !(file instanceof File) ? opts : Object.assign(\n    {\n      filename: opts.preserveFilename === !1 ? void 0 : file.name,\n      contentType: file.type\n    },\n    opts\n  );\n}\nvar defaults = (obj, defaults2) => Object.keys(defaults2).concat(Object.keys(obj)).reduce((target, prop) => (target[prop] = typeof obj[prop] > \"u\" ? defaults2[prop] : obj[prop], target), {});\nconst pick = (obj, props) => props.reduce((selection, prop) => (typeof obj[prop] > \"u\" || (selection[prop] = obj[prop]), selection), {}), eventSourcePolyfill = (0,rxjs__WEBPACK_IMPORTED_MODULE_3__.defer)(() => Promise.all(/*! import() */[__webpack_require__.e(\"vendor-chunks/eventsource@2.0.2\"), __webpack_require__.e(\"vendor-chunks/@sanity+eventsource@5.0.2\")]).then(__webpack_require__.t.bind(__webpack_require__, /*! @sanity/eventsource */ \"(ssr)/./node_modules/.pnpm/@sanity+eventsource@5.0.2/node_modules/@sanity/eventsource/node.js\", 19))).pipe(\n  (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(({ default: EventSource2 }) => EventSource2),\n  (0,rxjs__WEBPACK_IMPORTED_MODULE_12__.shareReplay)(1)\n);\nfunction reconnectOnConnectionFailure() {\n  return function(source) {\n    return source.pipe(\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.catchError)((err, caught) => err instanceof ConnectionFailedError ? (0,rxjs__WEBPACK_IMPORTED_MODULE_14__.concat)((0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)({ type: \"reconnect\" }), (0,rxjs__WEBPACK_IMPORTED_MODULE_15__.timer)(1e3).pipe((0,rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)(() => caught))) : (0,rxjs__WEBPACK_IMPORTED_MODULE_16__.throwError)(() => err))\n    );\n  };\n}\nconst MAX_URL_LENGTH = 14800, possibleOptions = [\n  \"includePreviousRevision\",\n  \"includeResult\",\n  \"includeMutations\",\n  \"includeAllVersions\",\n  \"visibility\",\n  \"effectFormat\",\n  \"tag\"\n], defaultOptions = {\n  includeResult: !0\n};\nfunction _listen(query, params, opts = {}) {\n  const { url, token, withCredentials, requestTagPrefix } = this.config(), tag = opts.tag && requestTagPrefix ? [requestTagPrefix, opts.tag].join(\".\") : opts.tag, options = { ...defaults(opts, defaultOptions), tag }, listenOpts = pick(options, possibleOptions), qs = encodeQueryString({ query, params, options: { tag, ...listenOpts } }), uri = `${url}${_getDataUrl(this, \"listen\", qs)}`;\n  if (uri.length > MAX_URL_LENGTH)\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_16__.throwError)(() => new Error(\"Query too large for listener\"));\n  const listenFor = options.events ? options.events : [\"mutation\"], esOptions = {};\n  return withCredentials && (esOptions.withCredentials = !0), token && (esOptions.headers = {\n    Authorization: `Bearer ${token}`\n  }), connectEventSource(() => (\n    // use polyfill if there is no global EventSource or if we need to set headers\n    (typeof EventSource > \"u\" || esOptions.headers ? eventSourcePolyfill : (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(EventSource)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((EventSource2) => new EventSource2(uri, esOptions)))\n  ), listenFor).pipe(\n    reconnectOnConnectionFailure(),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.filter)((event) => listenFor.includes(event.type)),\n    (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)(\n      (event) => ({\n        type: event.type,\n        ...\"data\" in event ? event.data : {}\n      })\n    )\n  );\n}\nfunction shareReplayLatest(configOrPredicate, config) {\n  return _shareReplayLatest(\n    typeof configOrPredicate == \"function\" ? { predicate: configOrPredicate, ...config } : configOrPredicate\n  );\n}\nfunction _shareReplayLatest(config) {\n  return (source) => {\n    let latest, emitted = !1;\n    const { predicate, ...shareConfig } = config, wrapped = source.pipe(\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_17__.tap)((value) => {\n        config.predicate(value) && (emitted = !0, latest = value);\n      }),\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_18__.finalize)(() => {\n        emitted = !1, latest = void 0;\n      }),\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_19__.share)(shareConfig)\n    ), emitLatest = new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((subscriber) => {\n      emitted && subscriber.next(\n        // this cast is safe because of the emitted check which asserts that we got T from the source\n        latest\n      ), subscriber.complete();\n    });\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_20__.merge)(wrapped, emitLatest);\n  };\n}\nconst requiredApiVersion = \"2021-03-25\";\nclass LiveClient {\n  #client;\n  constructor(client) {\n    this.#client = client;\n  }\n  /**\n   * Requires `apiVersion` to be `2021-03-25` or later.\n   */\n  events({\n    includeDrafts = !1,\n    tag: _tag\n  } = {}) {\n    const {\n      projectId,\n      apiVersion: _apiVersion,\n      token,\n      withCredentials,\n      requestTagPrefix\n    } = this.#client.config(), apiVersion = _apiVersion.replace(/^v/, \"\");\n    if (apiVersion !== \"X\" && apiVersion < requiredApiVersion)\n      throw new Error(\n        `The live events API requires API version ${requiredApiVersion} or later. The current API version is ${apiVersion}. Please update your API version to use this feature.`\n      );\n    if (includeDrafts && !token && !withCredentials)\n      throw new Error(\n        \"The live events API requires a token or withCredentials when 'includeDrafts: true'. Please update your client configuration. The token should have the lowest possible access role.\"\n      );\n    const path = _getDataUrl(this.#client, \"live/events\"), url = new URL(this.#client.getUrl(path, !1)), tag = _tag && requestTagPrefix ? [requestTagPrefix, _tag].join(\".\") : _tag;\n    tag && url.searchParams.set(\"tag\", tag), includeDrafts && url.searchParams.set(\"includeDrafts\", \"true\");\n    const esOptions = {};\n    includeDrafts && token && (esOptions.headers = {\n      Authorization: `Bearer ${token}`\n    }), includeDrafts && withCredentials && (esOptions.withCredentials = !0);\n    const key = `${url.href}::${JSON.stringify(esOptions)}`, existing = eventsCache.get(key);\n    if (existing)\n      return existing;\n    const events = connectEventSource(() => (\n      // use polyfill if there is no global EventSource or if we need to set headers\n      (typeof EventSource > \"u\" || esOptions.headers ? eventSourcePolyfill : (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(EventSource)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((EventSource2) => new EventSource2(url.href, esOptions)))\n    ), [\n      \"message\",\n      \"restart\",\n      \"welcome\",\n      \"reconnect\"\n    ]).pipe(\n      reconnectOnConnectionFailure(),\n      (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.map)((event) => {\n        if (event.type === \"message\") {\n          const { data, ...rest } = event;\n          return { ...rest, tags: data.tags };\n        }\n        return event;\n      })\n    ), checkCors = fetchObservable(url, {\n      method: \"OPTIONS\",\n      mode: \"cors\",\n      credentials: esOptions.withCredentials ? \"include\" : \"omit\",\n      headers: esOptions.headers\n    }).pipe(\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_6__.mergeMap)(() => rxjs__WEBPACK_IMPORTED_MODULE_21__.EMPTY),\n      (0,rxjs__WEBPACK_IMPORTED_MODULE_13__.catchError)(() => {\n        throw new CorsOriginError({ projectId });\n      })\n    ), observable2 = (0,rxjs__WEBPACK_IMPORTED_MODULE_14__.concat)(checkCors, events).pipe(\n      (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__.finalize)(() => eventsCache.delete(key)),\n      shareReplayLatest({\n        predicate: (event) => event.type === \"welcome\"\n      })\n    );\n    return eventsCache.set(key, observable2), observable2;\n  }\n}\nfunction fetchObservable(url, init) {\n  return new rxjs__WEBPACK_IMPORTED_MODULE_2__.Observable((observer) => {\n    const controller = new AbortController(), signal = controller.signal;\n    return fetch(url, { ...init, signal: controller.signal }).then(\n      (response) => {\n        observer.next(response), observer.complete();\n      },\n      (err) => {\n        signal.aborted || observer.error(err);\n      }\n    ), () => controller.abort();\n  });\n}\nconst eventsCache = /* @__PURE__ */ new Map();\nclass ObservableDatasetsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */\n  create(name2, options) {\n    return _modify(this.#client, this.#httpRequest, \"PUT\", name2, options);\n  }\n  /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */\n  edit(name2, options) {\n    return _modify(this.#client, this.#httpRequest, \"PATCH\", name2, options);\n  }\n  /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */\n  delete(name2) {\n    return _modify(this.#client, this.#httpRequest, \"DELETE\", name2);\n  }\n  /**\n   * Fetch a list of datasets for the configured project\n   */\n  list() {\n    return _request(this.#client, this.#httpRequest, {\n      uri: \"/datasets\",\n      tag: null\n    });\n  }\n}\nclass DatasetsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  /**\n   * Create a new dataset with the given name\n   *\n   * @param name - Name of the dataset to create\n   * @param options - Options for the dataset\n   */\n  create(name2, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(\n      _modify(this.#client, this.#httpRequest, \"PUT\", name2, options)\n    );\n  }\n  /**\n   * Edit a dataset with the given name\n   *\n   * @param name - Name of the dataset to edit\n   * @param options - New options for the dataset\n   */\n  edit(name2, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(\n      _modify(this.#client, this.#httpRequest, \"PATCH\", name2, options)\n    );\n  }\n  /**\n   * Delete a dataset with the given name\n   *\n   * @param name - Name of the dataset to delete\n   */\n  delete(name2) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_modify(this.#client, this.#httpRequest, \"DELETE\", name2));\n  }\n  /**\n   * Fetch a list of datasets for the configured project\n   */\n  list() {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(\n      _request(this.#client, this.#httpRequest, { uri: \"/datasets\", tag: null })\n    );\n  }\n}\nfunction _modify(client, httpRequest, method, name2, options) {\n  return (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.dataset)(name2), _request(client, httpRequest, {\n    method,\n    uri: `/datasets/${name2}`,\n    body: options,\n    tag: null\n  });\n}\nclass ObservableProjectsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  list(options) {\n    const uri = options?.includeMembers === !1 ? \"/projects?includeMembers=false\" : \"/projects\";\n    return _request(this.#client, this.#httpRequest, { uri });\n  }\n  /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */\n  getById(projectId) {\n    return _request(this.#client, this.#httpRequest, { uri: `/projects/${projectId}` });\n  }\n}\nclass ProjectsClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  list(options) {\n    const uri = options?.includeMembers === !1 ? \"/projects?includeMembers=false\" : \"/projects\";\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_request(this.#client, this.#httpRequest, { uri }));\n  }\n  /**\n   * Fetch a project by project ID\n   *\n   * @param projectId - ID of the project to fetch\n   */\n  getById(projectId) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(\n      _request(this.#client, this.#httpRequest, { uri: `/projects/${projectId}` })\n    );\n  }\n}\nclass ObservableUsersClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */\n  getById(id) {\n    return _request(\n      this.#client,\n      this.#httpRequest,\n      { uri: `/users/${id}` }\n    );\n  }\n}\nclass UsersClient {\n  #client;\n  #httpRequest;\n  constructor(client, httpRequest) {\n    this.#client = client, this.#httpRequest = httpRequest;\n  }\n  /**\n   * Fetch a user by user ID\n   *\n   * @param id - User ID of the user to fetch. If `me` is provided, a minimal response including the users role is returned.\n   */\n  getById(id) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(\n      _request(this.#client, this.#httpRequest, {\n        uri: `/users/${id}`\n      })\n    );\n  }\n}\nclass ObservableSanityClient {\n  assets;\n  datasets;\n  live;\n  projects;\n  users;\n  /**\n   * Private properties\n   */\n  #clientConfig;\n  #httpRequest;\n  /**\n   * Instance properties\n   */\n  listen = _listen;\n  constructor(httpRequest, config = _chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.defaultConfig) {\n    this.config(config), this.#httpRequest = httpRequest, this.assets = new ObservableAssetsClient(this, this.#httpRequest), this.datasets = new ObservableDatasetsClient(this, this.#httpRequest), this.live = new LiveClient(this), this.projects = new ObservableProjectsClient(this, this.#httpRequest), this.users = new ObservableUsersClient(this, this.#httpRequest);\n  }\n  /**\n   * Clone the client - returns a new instance\n   */\n  clone() {\n    return new ObservableSanityClient(this.#httpRequest, this.config());\n  }\n  config(newConfig) {\n    if (newConfig === void 0)\n      return { ...this.#clientConfig };\n    if (this.#clientConfig && this.#clientConfig.allowReconfigure === !1)\n      throw new Error(\n        \"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\"\n      );\n    return this.#clientConfig = (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.initConfig)(newConfig, this.#clientConfig || {}), this;\n  }\n  /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */\n  withConfig(newConfig) {\n    const thisConfig = this.config();\n    return new ObservableSanityClient(this.#httpRequest, {\n      ...thisConfig,\n      ...newConfig,\n      stega: {\n        ...thisConfig.stega || {},\n        ...typeof newConfig?.stega == \"boolean\" ? { enabled: newConfig.stega } : newConfig?.stega || {}\n      }\n    });\n  }\n  fetch(query, params, options) {\n    return _fetch(\n      this,\n      this.#httpRequest,\n      this.#clientConfig.stega,\n      query,\n      params,\n      options\n    );\n  }\n  /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */\n  getDocument(id, options) {\n    return _getDocument(this, this.#httpRequest, id, options);\n  }\n  /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */\n  getDocuments(ids, options) {\n    return _getDocuments(this, this.#httpRequest, ids, options);\n  }\n  create(document, options) {\n    return _create(this, this.#httpRequest, document, \"create\", options);\n  }\n  createIfNotExists(document, options) {\n    return _createIfNotExists(this, this.#httpRequest, document, options);\n  }\n  createOrReplace(document, options) {\n    return _createOrReplace(this, this.#httpRequest, document, options);\n  }\n  delete(selection, options) {\n    return _delete(this, this.#httpRequest, selection, options);\n  }\n  mutate(operations, options) {\n    return _mutate(this, this.#httpRequest, operations, options);\n  }\n  /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */\n  patch(selection, operations) {\n    return new ObservablePatch(selection, operations, this);\n  }\n  /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */\n  transaction(operations) {\n    return new ObservableTransaction(operations, this);\n  }\n  /**\n   * Perform action operations against the configured dataset\n   *\n   * @param operations - Action operation(s) to execute\n   * @param options - Action options\n   */\n  action(operations, options) {\n    return _action(this, this.#httpRequest, operations, options);\n  }\n  /**\n   * Perform an HTTP request against the Sanity API\n   *\n   * @param options - Request options\n   */\n  request(options) {\n    return _request(this, this.#httpRequest, options);\n  }\n  /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */\n  getUrl(uri, canUseCdn) {\n    return _getUrl(this, uri, canUseCdn);\n  }\n  /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */\n  getDataUrl(operation, path) {\n    return _getDataUrl(this, operation, path);\n  }\n}\nclass SanityClient {\n  assets;\n  datasets;\n  live;\n  projects;\n  users;\n  /**\n   * Observable version of the Sanity client, with the same configuration as the promise-based one\n   */\n  observable;\n  /**\n   * Private properties\n   */\n  #clientConfig;\n  #httpRequest;\n  /**\n   * Instance properties\n   */\n  listen = _listen;\n  constructor(httpRequest, config = _chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.defaultConfig) {\n    this.config(config), this.#httpRequest = httpRequest, this.assets = new AssetsClient(this, this.#httpRequest), this.datasets = new DatasetsClient(this, this.#httpRequest), this.live = new LiveClient(this), this.projects = new ProjectsClient(this, this.#httpRequest), this.users = new UsersClient(this, this.#httpRequest), this.observable = new ObservableSanityClient(httpRequest, config);\n  }\n  /**\n   * Clone the client - returns a new instance\n   */\n  clone() {\n    return new SanityClient(this.#httpRequest, this.config());\n  }\n  config(newConfig) {\n    if (newConfig === void 0)\n      return { ...this.#clientConfig };\n    if (this.#clientConfig && this.#clientConfig.allowReconfigure === !1)\n      throw new Error(\n        \"Existing client instance cannot be reconfigured - use `withConfig(newConfig)` to return a new client\"\n      );\n    return this.observable && this.observable.config(newConfig), this.#clientConfig = (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.initConfig)(newConfig, this.#clientConfig || {}), this;\n  }\n  /**\n   * Clone the client with a new (partial) configuration.\n   *\n   * @param newConfig - New client configuration properties, shallowly merged with existing configuration\n   */\n  withConfig(newConfig) {\n    const thisConfig = this.config();\n    return new SanityClient(this.#httpRequest, {\n      ...thisConfig,\n      ...newConfig,\n      stega: {\n        ...thisConfig.stega || {},\n        ...typeof newConfig?.stega == \"boolean\" ? { enabled: newConfig.stega } : newConfig?.stega || {}\n      }\n    });\n  }\n  fetch(query, params, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(\n      _fetch(\n        this,\n        this.#httpRequest,\n        this.#clientConfig.stega,\n        query,\n        params,\n        options\n      )\n    );\n  }\n  /**\n   * Fetch a single document with the given ID.\n   *\n   * @param id - Document ID to fetch\n   * @param options - Request options\n   */\n  getDocument(id, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_getDocument(this, this.#httpRequest, id, options));\n  }\n  /**\n   * Fetch multiple documents in one request.\n   * Should be used sparingly - performing a query is usually a better option.\n   * The order/position of documents is preserved based on the original array of IDs.\n   * If any of the documents are missing, they will be replaced by a `null` entry in the returned array\n   *\n   * @param ids - Document IDs to fetch\n   * @param options - Request options\n   */\n  getDocuments(ids, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_getDocuments(this, this.#httpRequest, ids, options));\n  }\n  create(document, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(\n      _create(this, this.#httpRequest, document, \"create\", options)\n    );\n  }\n  createIfNotExists(document, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(\n      _createIfNotExists(this, this.#httpRequest, document, options)\n    );\n  }\n  createOrReplace(document, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(\n      _createOrReplace(this, this.#httpRequest, document, options)\n    );\n  }\n  delete(selection, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_delete(this, this.#httpRequest, selection, options));\n  }\n  mutate(operations, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_mutate(this, this.#httpRequest, operations, options));\n  }\n  /**\n   * Create a new buildable patch of operations to perform\n   *\n   * @param selection - Document ID, an array of document IDs, or an object with `query` and optional `params`, defining which document(s) to patch\n   * @param operations - Optional object of patch operations to initialize the patch instance with\n   * @returns Patch instance - call `.commit()` to perform the operations defined\n   */\n  patch(documentId, operations) {\n    return new Patch(documentId, operations, this);\n  }\n  /**\n   * Create a new transaction of mutations\n   *\n   * @param operations - Optional array of mutation operations to initialize the transaction instance with\n   */\n  transaction(operations) {\n    return new Transaction(operations, this);\n  }\n  /**\n   * Perform action operations against the configured dataset\n   * Returns a promise that resolves to the transaction result\n   *\n   * @param operations - Action operation(s) to execute\n   * @param options - Action options\n   */\n  action(operations, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_action(this, this.#httpRequest, operations, options));\n  }\n  /**\n   * Perform a request against the Sanity API\n   * NOTE: Only use this for Sanity API endpoints, not for your own APIs!\n   *\n   * @param options - Request options\n   * @returns Promise resolving to the response body\n   */\n  request(options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_request(this, this.#httpRequest, options));\n  }\n  /**\n   * Perform an HTTP request a `/data` sub-endpoint\n   * NOTE: Considered internal, thus marked as deprecated. Use `request` instead.\n   *\n   * @deprecated - Use `request()` or your own HTTP library instead\n   * @param endpoint - Endpoint to hit (mutate, query etc)\n   * @param body - Request body\n   * @param options - Request options\n   * @internal\n   */\n  dataRequest(endpoint, body, options) {\n    return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__.lastValueFrom)(_dataRequest(this, this.#httpRequest, endpoint, body, options));\n  }\n  /**\n   * Get a Sanity API URL for the URI provided\n   *\n   * @param uri - URI/path to build URL for\n   * @param canUseCdn - Whether or not to allow using the API CDN for this route\n   */\n  getUrl(uri, canUseCdn) {\n    return _getUrl(this, uri, canUseCdn);\n  }\n  /**\n   * Get a Sanity API URL for the data operation and path provided\n   *\n   * @param operation - Data operation (eg `query`, `mutate`, `listen` or similar)\n   * @param path - Path to append after the operation\n   */\n  getDataUrl(operation, path) {\n    return _getDataUrl(this, operation, path);\n  }\n}\nfunction defineCreateClientExports(envMiddleware, ClassConstructor) {\n  return { requester: defineHttpRequest(envMiddleware), createClient: (config) => {\n    const clientRequester = defineHttpRequest(envMiddleware);\n    return new ClassConstructor(\n      (options, requester2) => (requester2 || clientRequester)({\n        maxRedirects: 0,\n        maxRetries: config.maxRetries,\n        retryDelay: config.retryDelay,\n        ...options\n      }),\n      config\n    );\n  } };\n}\nfunction defineDeprecatedCreateClient(createClient2) {\n  return function(config) {\n    return (0,_chunks_es_config_js__WEBPACK_IMPORTED_MODULE_7__.printNoDefaultExport)(), createClient2(config);\n  };\n}\nvar name = \"@sanity/client\", version = \"6.28.4\";\nconst middleware = [\n  (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.debug)({ verbose: !0, namespace: \"sanity:client\" }),\n  (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.headers)({ \"User-Agent\": `${name} ${version}` }),\n  // Enable keep-alive, and in addition limit the number of sockets that can be opened.\n  // This avoids opening too many connections to the server if someone tries to execute\n  // a bunch of requests in parallel. It's recommended to have a concurrency limit\n  // at a \"higher limit\" (i.e. you shouldn't actually execute hundreds of requests in parallel),\n  // and this is mainly to minimize the impact for the network and server.\n  //\n  // We're currently matching the same defaults as browsers:\n  // https://stackoverflow.com/questions/26003756/is-there-a-limit-practical-or-otherwise-to-the-number-of-web-sockets-a-page-op\n  (0,get_it_middleware__WEBPACK_IMPORTED_MODULE_1__.agent)({\n    keepAlive: !0,\n    maxSockets: 30,\n    maxTotalSockets: 256\n  })\n], exp = defineCreateClientExports(middleware, SanityClient), requester = exp.requester, createClient = exp.createClient, deprecatedCreateClient = defineDeprecatedCreateClient(createClient);\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvLnBucG0vQHNhbml0eStjbGllbnRANi4yOC40X2RlYnVnQDQuNC4wL25vZGVfbW9kdWxlcy9Ac2FuaXR5L2NsaWVudC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0I7QUFDZTtBQUNvRTtBQUNnRTtBQUMxSDtBQUNnQztBQUN3TjtBQUNoVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLFlBQVksSUFBSSxhQUFhO0FBQzNEO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixLQUFLO0FBQ0w7QUFDQSxTQUFTLHFCQUFxQiwyQkFBMkIsdUJBQXVCLEVBQUUsU0FBUztBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxrQkFBa0I7QUFDbEUsWUFBWSxXQUFXLGNBQWMsU0FBUyxtQkFBbUIsZUFBZSxFQUFFLGNBQWM7QUFDaEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBLDREQUE0RCxVQUFVO0FBQ3RFO0FBQ0EsY0FBYyxTQUFTO0FBQ3ZCLGlOQUFpTixJQUFJO0FBQ3JOLE1BQU07QUFDTiw4SEFBOEgsSUFBSTtBQUNsSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyw2Q0FBSztBQUNkLElBQUksd0RBQUssR0FBRyxhQUFhO0FBQ3pCO0FBQ0E7QUFDQSxJQUFJLDhEQUFXO0FBQ2YsSUFBSSwrREFBWTtBQUNoQixJQUFJLDJEQUFRO0FBQ1o7QUFDQSxJQUFJLDZEQUFVLEdBQUcsZ0JBQWdCLDRDQUFVLEVBQUU7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxvREFBSztBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUywyQ0FBSztBQUNkO0FBQ0EsV0FBVyxrREFBWSxZQUFZLHdDQUFFO0FBQ3JDLEdBQUcsT0FBTyw4Q0FBUTtBQUNsQjtBQUNBO0FBQ0EsYUFBYSw0Q0FBVTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEZBQTRGLGNBQWM7QUFDMUc7QUFDQTtBQUNBO0FBQ0Esa0pBQWtKLG1CQUFtQjtBQUNySztBQUNBO0FBQ0Esc0JBQXNCLGNBQWM7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxtQkFBbUI7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsc0NBQXNDO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLG1CQUFtQjtBQUM3QyxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxJQUFJO0FBQ3hDO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxhQUFhLG1DQUFtQztBQUNoRDtBQUNBLHVGQUF1Rix1Q0FBdUMsSUFBSTtBQUNsSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFLGNBQWM7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUY7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNHQUFzRztBQUN0RztBQUNBO0FBQ0EsV0FBVyxvRUFBYztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxxQkFBcUIsY0FBYztBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0VBQWMsZ0RBQWdELHVCQUF1QjtBQUNoRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFNBQVM7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxTQUFTO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseVBBQXlQLFNBQVMsR0FBRyxXQUFXLEdBQUcsU0FBUztBQUM1UjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBLFdBQVcsb0VBQWMsK0NBQStDO0FBQ3hFLDRCQUE0QixxQ0FBcUM7QUFDakUsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsb0JBQW9CO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRixrQ0FBa0M7QUFDcEgsaUNBQWlDLHlCQUF5QjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLG9CQUFvQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBa0Ysa0NBQWtDO0FBQ3BILGlDQUFpQyx5QkFBeUI7QUFDMUQ7QUFDQTtBQUNBLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0VBQWMsNkJBQTZCLGFBQWE7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvRUFBYyxXQUFXLHVFQUFpQix1QkFBdUIsV0FBVztBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9FQUFjLFdBQVcsdUVBQWlCLHVCQUF1QixXQUFXO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHdFQUFrQixvQ0FBb0MsVUFBVSxrQkFBa0I7QUFDN0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwyQkFBMkIscUNBQXFDO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsc0NBQXNDO0FBQy9EO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0E7QUFDQSx5QkFBeUIsMEJBQTBCO0FBQ25EO0FBQ0E7QUFDQSwrREFBK0Q7QUFDL0QseUJBQXlCLDBCQUEwQjtBQUNuRDtBQUNBLHVCQUF1QixTQUFTLHNDQUFzQztBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDJCQUEyQixxQ0FBcUM7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixzQ0FBc0M7QUFDL0Q7QUFDQSxzRUFBc0U7QUFDdEU7QUFDQTtBQUNBLHlCQUF5QiwwQkFBMEI7QUFDbkQ7QUFDQSx1QkFBdUIsU0FBUyxzQ0FBc0M7QUFDdEU7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDLHFCQUFxQjtBQUNyQiwrQ0FBK0MsTUFBTTtBQUNyRDtBQUNBLHlCQUF5QjtBQUN6Qiw2QkFBNkIsbUNBQW1DO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUZBQXFGLHNDQUFzQztBQUMzSCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsQ0FBQztBQUNELGdEQUFnRCw4Q0FBOEM7QUFDOUY7QUFDQTtBQUNBLDRCQUE0QixJQUFJO0FBQ2hDO0FBQ0EseUNBQXlDLE1BQU07QUFDL0MsNkpBQTZKLGFBQWE7QUFDMUssQ0FBQyxzSUFBc0k7QUFDdkk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGdFQUFnRSxjQUFjO0FBQzlFO0FBQ0EsbUJBQW1CO0FBQ25CLDZDQUE2Qyx5QkFBeUI7QUFDdEUsSUFBSSxtQ0FBbUMsb0VBQVUseUdBQXlHLHVCQUF1QjtBQUNqTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLHdEQUF3RCxrQkFBa0IsZ0JBQWdCLGdFQUFnRSxlQUFlO0FBQzVLO0FBQ0EsSUFBSSxpRUFBaUI7QUFDckIsTUFBTSwyQ0FBSTtBQUNWLFFBQVEsNFRBQThDO0FBQ3REO0FBQ0EsU0FBUztBQUNULGFBQWEsc0JBQXNCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLElBQUksbURBQUc7QUFDUDtBQUNBO0FBQ0EsNkJBQTZCLGdCQUFnQjtBQUM3QztBQUNBO0FBQ0Esb0JBQW9CLG1EQUFHO0FBQ3ZCO0FBQ0Esd0RBQXdEO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxzREFBTTtBQUNWLElBQUksbURBQUc7QUFDUDtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxzREFBTTtBQUNWLElBQUksbURBQUc7QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVMsdUVBQWlCO0FBQzFCO0FBQ0E7QUFDQSxTQUFTLHVFQUFpQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNLGNBQWMsaUNBQWlDLEdBQUc7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRSwrQkFBK0I7QUFDOUc7QUFDQSx1REFBdUQsZ0NBQWdDO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTSwyRUFBMkU7QUFDakY7QUFDQTtBQUNBO0FBQ0EsdUVBQXVFO0FBQ3ZFLHNVQUFzVSxrRkFBa0Y7QUFDeFo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxzREFBTTtBQUNWLElBQUksbURBQUc7QUFDUCxJQUFJLG1EQUFHO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsMkRBQTJEO0FBQzNELHFCQUFxQixXQUFXLHlCQUF5QixzQ0FBc0M7QUFDL0YsdURBQXVELHVCQUF1QjtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELEtBQUssZ0VBQVUseUJBQXlCO0FBQ2hHO0FBQ0EsK0VBQStFLG1DQUFtQztBQUNsSDtBQUNBLGdGQUFnRiwwRkFBb0MsSUFBSSw0RUFBc0I7QUFDOUk7QUFDQTtBQUNBLEtBQUs7QUFDTCx3R0FBd0csa0ZBQTRCLG9EQUFvRCw0REFBNEQsb0RBQW9ELHdDQUF3QyxrRUFBa0Usd0NBQXdDO0FBQzFiO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBLEtBQUs7QUFDTCxtQkFBbUIsNENBQVU7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSxzREFBTTtBQUNWLElBQUksbURBQUc7QUFDUDtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsZ0VBQVUsd0JBQXdCLFVBQVUsR0FBRyxRQUFRO0FBQ25HLGlCQUFpQixVQUFVLFFBQVEsR0FBRyxLQUFLLFlBQVk7QUFDdkQ7QUFDQTtBQUNBLFVBQVUsY0FBYztBQUN4QixZQUFZLHlCQUF5QixHQUFHLHVCQUF1QjtBQUMvRDtBQUNBO0FBQ0Esd0JBQXdCLDRDQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvREFBYTtBQUN4QjtBQUNBLFFBQVEsc0RBQU07QUFDZCxRQUFRLG1EQUFHO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFO0FBQ2hFLEVBQUUsdUVBQWlCO0FBQ25CO0FBQ0E7QUFDQSxtQkFBbUIsZ0VBQVUsd0hBQXdILCtEQUErRDtBQUNwTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGNBQWMsR0FBRyxTQUFTO0FBQzlDLHFDQUFxQyxzQ0FBc0MsSUFBSTtBQUMvRTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSw2TEFBNkw7QUFDN0wsdUlBQXVJLHlCQUF5QiwyQ0FBSyxPQUFPLDhVQUE2QjtBQUN6TSxFQUFFLG1EQUFHLElBQUksdUJBQXVCO0FBQ2hDLEVBQUUsa0RBQVc7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0saURBQVUseURBQXlELDZDQUFNLENBQUMsd0NBQUUsR0FBRyxtQkFBbUIsR0FBRyw0Q0FBSyxXQUFXLDhDQUFRLG1CQUFtQixpREFBVTtBQUNoSztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLFVBQVUsZ0RBQWdELHFIQUFxSCx3Q0FBd0Msd0VBQXdFLDBCQUEwQixzQkFBc0IsWUFBWSxJQUFJLEVBQUUsZ0NBQWdDO0FBQ2pZO0FBQ0EsV0FBVyxpREFBVTtBQUNyQjtBQUNBO0FBQ0EsNkJBQTZCLE1BQU07QUFDbkMsR0FBRztBQUNIO0FBQ0EsMkVBQTJFLHdDQUFFLG9CQUFvQixtREFBRztBQUNwRztBQUNBO0FBQ0EsSUFBSSxzREFBTTtBQUNWLElBQUksbURBQUc7QUFDUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQywwQ0FBMEM7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksNEJBQTRCO0FBQ3hDLE1BQU0sMENBQUc7QUFDVDtBQUNBLE9BQU87QUFDUCxNQUFNLCtDQUFRO0FBQ2Q7QUFDQSxPQUFPO0FBQ1AsTUFBTSw0Q0FBSztBQUNYLHdCQUF3Qiw0Q0FBVTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxXQUFXLDRDQUFLO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJLElBQUk7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLG9EQUFvRCxvQkFBb0IsdUNBQXVDLFdBQVc7QUFDMUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLE1BQU07QUFDckMsS0FBSztBQUNMLG1CQUFtQixTQUFTLElBQUksMEJBQTBCO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFLHdDQUFFLG9CQUFvQixtREFBRztBQUN0RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sbURBQUc7QUFDVDtBQUNBLGtCQUFrQixnQkFBZ0I7QUFDbEMsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxNQUFNLDhDQUFRLE9BQU8sd0NBQUs7QUFDMUIsTUFBTSxpREFBVTtBQUNoQixvQ0FBb0MsV0FBVztBQUMvQyxPQUFPO0FBQ1AscUJBQXFCLDZDQUFNO0FBQzNCLE1BQU0sd0RBQVU7QUFDaEI7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSw0Q0FBVTtBQUN2QjtBQUNBLHdCQUF3QixvQ0FBb0M7QUFDNUQ7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0RBQWE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9EQUFhO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0RBQWE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0RBQWE7QUFDeEIsa0RBQWtELDZCQUE2QjtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsNkRBQU87QUFDaEI7QUFDQSxzQkFBc0IsTUFBTTtBQUM1QjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxLQUFLO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGtCQUFrQixVQUFVLEdBQUc7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9EQUFhLDZDQUE2QyxLQUFLO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvREFBYTtBQUN4QixrREFBa0Qsa0JBQWtCLFVBQVUsR0FBRztBQUNqRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGVBQWUsR0FBRztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9EQUFhO0FBQ3hCO0FBQ0EsdUJBQXVCLEdBQUc7QUFDMUIsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywrREFBYTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxnRUFBVSxvQ0FBb0M7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDLG9EQUFvRCwyQkFBMkI7QUFDL0U7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLCtEQUFhO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0ZBQXNGLGdFQUFVLG9DQUFvQztBQUNwSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakMsb0RBQW9ELDJCQUEyQjtBQUMvRTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsV0FBVyxvREFBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvREFBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvREFBYTtBQUN4QjtBQUNBO0FBQ0EsV0FBVyxvREFBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0RBQWE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9EQUFhO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvREFBYTtBQUN4QjtBQUNBO0FBQ0EsV0FBVyxvREFBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9EQUFhO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsb0RBQWE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvREFBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVywwRUFBb0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFLHdEQUFLLEdBQUcseUNBQXlDO0FBQ25ELEVBQUUsMERBQU8sR0FBRyxpQkFBaUIsTUFBTSxFQUFFLFFBQVEsR0FBRztBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSx3REFBSztBQUNQO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQXlCRTtBQUNGIiwic291cmNlcyI6WyIvVXNlcnMvcGV0cm9rdmFydHNpYW55aS9jb2RlL2dlb211bmR1cy13ZWJzaXRlL25vZGVfbW9kdWxlcy8ucG5wbS9Ac2FuaXR5K2NsaWVudEA2LjI4LjRfZGVidWdANC40LjAvbm9kZV9tb2R1bGVzL0BzYW5pdHkvY2xpZW50L2Rpc3QvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0SXQgfSBmcm9tIFwiZ2V0LWl0XCI7XG5pbXBvcnQgeyBhZGFwdGVyLCBlbnZpcm9ubWVudCB9IGZyb20gXCJnZXQtaXRcIjtcbmltcG9ydCB7IHJldHJ5LCBqc29uUmVxdWVzdCwganNvblJlc3BvbnNlLCBwcm9ncmVzcywgb2JzZXJ2YWJsZSwgZGVidWcsIGhlYWRlcnMsIGFnZW50IH0gZnJvbSBcImdldC1pdC9taWRkbGV3YXJlXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBkZWZlciwgb2YsIGlzT2JzZXJ2YWJsZSwgbWVyZ2VNYXAsIGZyb20sIGxhc3RWYWx1ZUZyb20sIHNoYXJlUmVwbGF5LCBjYXRjaEVycm9yLCBjb25jYXQsIHRocm93RXJyb3IsIHRpbWVyLCB0YXAsIGZpbmFsaXplLCBzaGFyZSwgbWVyZ2UsIEVNUFRZIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IHN0ZWdhQ2xlYW4gfSBmcm9tIFwiLi9fY2h1bmtzLWVzL3N0ZWdhQ2xlYW4uanNcIjtcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3RXaXRoLCBtYXAsIGZpbHRlciwgZmluYWxpemUgYXMgZmluYWxpemUkMSB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xuaW1wb3J0IHsgdmFsaWRhdGVPYmplY3QsIHZhbGlkYXRlSW5zZXJ0LCByZXF1aXJlRG9jdW1lbnRJZCwgdmFsaWRhdGVEb2N1bWVudElkLCBoYXNEYXRhc2V0LCByZXF1ZXN0VGFnLCBwcmludFByZXZpZXdEcmFmdHNEZXByZWNhdGlvbldhcm5pbmcsIHZhbGlkYXRlQXBpUGVyc3BlY3RpdmUsIHByaW50Q2RuUHJldmlld0RyYWZ0c1dhcm5pbmcsIHZhbGlkYXRlQXNzZXRUeXBlLCBkYXRhc2V0LCBkZWZhdWx0Q29uZmlnLCBpbml0Q29uZmlnLCBwcmludE5vRGVmYXVsdEV4cG9ydCB9IGZyb20gXCIuL19jaHVua3MtZXMvY29uZmlnLmpzXCI7XG5jbGFzcyBDbGllbnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgcmVzcG9uc2U7XG4gIHN0YXR1c0NvZGUgPSA0MDA7XG4gIHJlc3BvbnNlQm9keTtcbiAgZGV0YWlscztcbiAgY29uc3RydWN0b3IocmVzKSB7XG4gICAgY29uc3QgcHJvcHMgPSBleHRyYWN0RXJyb3JQcm9wcyhyZXMpO1xuICAgIHN1cGVyKHByb3BzLm1lc3NhZ2UpLCBPYmplY3QuYXNzaWduKHRoaXMsIHByb3BzKTtcbiAgfVxufVxuY2xhc3MgU2VydmVyRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIHJlc3BvbnNlO1xuICBzdGF0dXNDb2RlID0gNTAwO1xuICByZXNwb25zZUJvZHk7XG4gIGRldGFpbHM7XG4gIGNvbnN0cnVjdG9yKHJlcykge1xuICAgIGNvbnN0IHByb3BzID0gZXh0cmFjdEVycm9yUHJvcHMocmVzKTtcbiAgICBzdXBlcihwcm9wcy5tZXNzYWdlKSwgT2JqZWN0LmFzc2lnbih0aGlzLCBwcm9wcyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGV4dHJhY3RFcnJvclByb3BzKHJlcykge1xuICBjb25zdCBib2R5ID0gcmVzLmJvZHksIHByb3BzID0ge1xuICAgIHJlc3BvbnNlOiByZXMsXG4gICAgc3RhdHVzQ29kZTogcmVzLnN0YXR1c0NvZGUsXG4gICAgcmVzcG9uc2VCb2R5OiBzdHJpbmdpZnlCb2R5KGJvZHksIHJlcyksXG4gICAgbWVzc2FnZTogXCJcIixcbiAgICBkZXRhaWxzOiB2b2lkIDBcbiAgfTtcbiAgaWYgKGJvZHkuZXJyb3IgJiYgYm9keS5tZXNzYWdlKVxuICAgIHJldHVybiBwcm9wcy5tZXNzYWdlID0gYCR7Ym9keS5lcnJvcn0gLSAke2JvZHkubWVzc2FnZX1gLCBwcm9wcztcbiAgaWYgKGlzTXV0YXRpb25FcnJvcihib2R5KSB8fCBpc0FjdGlvbkVycm9yKGJvZHkpKSB7XG4gICAgY29uc3QgYWxsSXRlbXMgPSBib2R5LmVycm9yLml0ZW1zIHx8IFtdLCBpdGVtcyA9IGFsbEl0ZW1zLnNsaWNlKDAsIDUpLm1hcCgoaXRlbSkgPT4gaXRlbS5lcnJvcj8uZGVzY3JpcHRpb24pLmZpbHRlcihCb29sZWFuKTtcbiAgICBsZXQgaXRlbXNTdHIgPSBpdGVtcy5sZW5ndGggPyBgOlxuLSAke2l0ZW1zLmpvaW4oYFxuLSBgKX1gIDogXCJcIjtcbiAgICByZXR1cm4gYWxsSXRlbXMubGVuZ3RoID4gNSAmJiAoaXRlbXNTdHIgKz0gYFxuLi4uYW5kICR7YWxsSXRlbXMubGVuZ3RoIC0gNX0gbW9yZWApLCBwcm9wcy5tZXNzYWdlID0gYCR7Ym9keS5lcnJvci5kZXNjcmlwdGlvbn0ke2l0ZW1zU3RyfWAsIHByb3BzLmRldGFpbHMgPSBib2R5LmVycm9yLCBwcm9wcztcbiAgfVxuICByZXR1cm4gYm9keS5lcnJvciAmJiBib2R5LmVycm9yLmRlc2NyaXB0aW9uID8gKHByb3BzLm1lc3NhZ2UgPSBib2R5LmVycm9yLmRlc2NyaXB0aW9uLCBwcm9wcy5kZXRhaWxzID0gYm9keS5lcnJvciwgcHJvcHMpIDogKHByb3BzLm1lc3NhZ2UgPSBib2R5LmVycm9yIHx8IGJvZHkubWVzc2FnZSB8fCBodHRwRXJyb3JNZXNzYWdlKHJlcyksIHByb3BzKTtcbn1cbmZ1bmN0aW9uIGlzTXV0YXRpb25FcnJvcihib2R5KSB7XG4gIHJldHVybiBpc1BsYWluT2JqZWN0KGJvZHkpICYmIGlzUGxhaW5PYmplY3QoYm9keS5lcnJvcikgJiYgYm9keS5lcnJvci50eXBlID09PSBcIm11dGF0aW9uRXJyb3JcIiAmJiB0eXBlb2YgYm9keS5lcnJvci5kZXNjcmlwdGlvbiA9PSBcInN0cmluZ1wiO1xufVxuZnVuY3Rpb24gaXNBY3Rpb25FcnJvcihib2R5KSB7XG4gIHJldHVybiBpc1BsYWluT2JqZWN0KGJvZHkpICYmIGlzUGxhaW5PYmplY3QoYm9keS5lcnJvcikgJiYgYm9keS5lcnJvci50eXBlID09PSBcImFjdGlvbkVycm9yXCIgJiYgdHlwZW9mIGJvZHkuZXJyb3IuZGVzY3JpcHRpb24gPT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3Qob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqID09IFwib2JqZWN0XCIgJiYgb2JqICE9PSBudWxsICYmICFBcnJheS5pc0FycmF5KG9iaik7XG59XG5mdW5jdGlvbiBodHRwRXJyb3JNZXNzYWdlKHJlcykge1xuICBjb25zdCBzdGF0dXNNZXNzYWdlID0gcmVzLnN0YXR1c01lc3NhZ2UgPyBgICR7cmVzLnN0YXR1c01lc3NhZ2V9YCA6IFwiXCI7XG4gIHJldHVybiBgJHtyZXMubWV0aG9kfS1yZXF1ZXN0IHRvICR7cmVzLnVybH0gcmVzdWx0ZWQgaW4gSFRUUCAke3Jlcy5zdGF0dXNDb2RlfSR7c3RhdHVzTWVzc2FnZX1gO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5Qm9keShib2R5LCByZXMpIHtcbiAgcmV0dXJuIChyZXMuaGVhZGVyc1tcImNvbnRlbnQtdHlwZVwiXSB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi9qc29uXCIpICE9PSAtMSA/IEpTT04uc3RyaW5naWZ5KGJvZHksIG51bGwsIDIpIDogYm9keTtcbn1cbmNsYXNzIENvcnNPcmlnaW5FcnJvciBleHRlbmRzIEVycm9yIHtcbiAgcHJvamVjdElkO1xuICBhZGRPcmlnaW5Vcmw7XG4gIGNvbnN0cnVjdG9yKHsgcHJvamVjdElkIH0pIHtcbiAgICBzdXBlcihcIkNvcnNPcmlnaW5FcnJvclwiKSwgdGhpcy5uYW1lID0gXCJDb3JzT3JpZ2luRXJyb3JcIiwgdGhpcy5wcm9qZWN0SWQgPSBwcm9qZWN0SWQ7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChgaHR0cHM6Ly9zYW5pdHkuaW8vbWFuYWdlL3Byb2plY3QvJHtwcm9qZWN0SWR9L2FwaWApO1xuICAgIGlmICh0eXBlb2YgbG9jYXRpb24gPCBcInVcIikge1xuICAgICAgY29uc3QgeyBvcmlnaW4gfSA9IGxvY2F0aW9uO1xuICAgICAgdXJsLnNlYXJjaFBhcmFtcy5zZXQoXCJjb3JzXCIsIFwiYWRkXCIpLCB1cmwuc2VhcmNoUGFyYW1zLnNldChcIm9yaWdpblwiLCBvcmlnaW4pLCB0aGlzLmFkZE9yaWdpblVybCA9IHVybCwgdGhpcy5tZXNzYWdlID0gYFRoZSBjdXJyZW50IG9yaWdpbiBpcyBub3QgYWxsb3dlZCB0byBjb25uZWN0IHRvIHRoZSBMaXZlIENvbnRlbnQgQVBJLiBBZGQgaXQgaGVyZTogJHt1cmx9YDtcbiAgICB9IGVsc2VcbiAgICAgIHRoaXMubWVzc2FnZSA9IGBUaGUgY3VycmVudCBvcmlnaW4gaXMgbm90IGFsbG93ZWQgdG8gY29ubmVjdCB0byB0aGUgTGl2ZSBDb250ZW50IEFQSS4gQ2hhbmdlIHlvdXIgY29uZmlndXJhdGlvbiBoZXJlOiAke3VybH1gO1xuICB9XG59XG5jb25zdCBodHRwRXJyb3IgPSB7XG4gIG9uUmVzcG9uc2U6IChyZXMpID0+IHtcbiAgICBpZiAocmVzLnN0YXR1c0NvZGUgPj0gNTAwKVxuICAgICAgdGhyb3cgbmV3IFNlcnZlckVycm9yKHJlcyk7XG4gICAgaWYgKHJlcy5zdGF0dXNDb2RlID49IDQwMClcbiAgICAgIHRocm93IG5ldyBDbGllbnRFcnJvcihyZXMpO1xuICAgIHJldHVybiByZXM7XG4gIH1cbn07XG5mdW5jdGlvbiBwcmludFdhcm5pbmdzKCkge1xuICBjb25zdCBzZWVuID0ge307XG4gIHJldHVybiB7XG4gICAgb25SZXNwb25zZTogKHJlcykgPT4ge1xuICAgICAgY29uc3Qgd2FybiA9IHJlcy5oZWFkZXJzW1wieC1zYW5pdHktd2FybmluZ1wiXSwgd2FybmluZ3MgPSBBcnJheS5pc0FycmF5KHdhcm4pID8gd2FybiA6IFt3YXJuXTtcbiAgICAgIGZvciAoY29uc3QgbXNnIG9mIHdhcm5pbmdzKVxuICAgICAgICAhbXNnIHx8IHNlZW5bbXNnXSB8fCAoc2Vlblttc2ddID0gITAsIGNvbnNvbGUud2Fybihtc2cpKTtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gZGVmaW5lSHR0cFJlcXVlc3QoZW52TWlkZGxld2FyZSkge1xuICByZXR1cm4gZ2V0SXQoW1xuICAgIHJldHJ5KHsgc2hvdWxkUmV0cnkgfSksXG4gICAgLi4uZW52TWlkZGxld2FyZSxcbiAgICBwcmludFdhcm5pbmdzKCksXG4gICAganNvblJlcXVlc3QoKSxcbiAgICBqc29uUmVzcG9uc2UoKSxcbiAgICBwcm9ncmVzcygpLFxuICAgIGh0dHBFcnJvcixcbiAgICBvYnNlcnZhYmxlKHsgaW1wbGVtZW50YXRpb246IE9ic2VydmFibGUgfSlcbiAgXSk7XG59XG5mdW5jdGlvbiBzaG91bGRSZXRyeShlcnIsIGF0dGVtcHQsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMubWF4UmV0cmllcyA9PT0gMCkgcmV0dXJuICExO1xuICBjb25zdCBpc1NhZmUgPSBvcHRpb25zLm1ldGhvZCA9PT0gXCJHRVRcIiB8fCBvcHRpb25zLm1ldGhvZCA9PT0gXCJIRUFEXCIsIGlzUXVlcnkgPSAob3B0aW9ucy51cmkgfHwgb3B0aW9ucy51cmwpLnN0YXJ0c1dpdGgoXCIvZGF0YS9xdWVyeVwiKSwgaXNSZXRyaWFibGVSZXNwb25zZSA9IGVyci5yZXNwb25zZSAmJiAoZXJyLnJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDQyOSB8fCBlcnIucmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gNTAyIHx8IGVyci5yZXNwb25zZS5zdGF0dXNDb2RlID09PSA1MDMpO1xuICByZXR1cm4gKGlzU2FmZSB8fCBpc1F1ZXJ5KSAmJiBpc1JldHJpYWJsZVJlc3BvbnNlID8gITAgOiByZXRyeS5zaG91bGRSZXRyeShlcnIsIGF0dGVtcHQsIG9wdGlvbnMpO1xufVxuY2xhc3MgQ29ubmVjdGlvbkZhaWxlZEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBuYW1lID0gXCJDb25uZWN0aW9uRmFpbGVkRXJyb3JcIjtcbn1cbmNsYXNzIERpc2Nvbm5lY3RFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgbmFtZSA9IFwiRGlzY29ubmVjdEVycm9yXCI7XG4gIHJlYXNvbjtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgcmVhc29uLCBvcHRpb25zID0ge30pIHtcbiAgICBzdXBlcihtZXNzYWdlLCBvcHRpb25zKSwgdGhpcy5yZWFzb24gPSByZWFzb247XG4gIH1cbn1cbmNsYXNzIENoYW5uZWxFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgbmFtZSA9IFwiQ2hhbm5lbEVycm9yXCI7XG4gIGRhdGE7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGRhdGEpIHtcbiAgICBzdXBlcihtZXNzYWdlKSwgdGhpcy5kYXRhID0gZGF0YTtcbiAgfVxufVxuY2xhc3MgTWVzc2FnZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBuYW1lID0gXCJNZXNzYWdlRXJyb3JcIjtcbiAgZGF0YTtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgZGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIobWVzc2FnZSwgb3B0aW9ucyksIHRoaXMuZGF0YSA9IGRhdGE7XG4gIH1cbn1cbmNsYXNzIE1lc3NhZ2VQYXJzZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBuYW1lID0gXCJNZXNzYWdlUGFyc2VFcnJvclwiO1xufVxuY29uc3QgUkVRVUlSRURfRVZFTlRTID0gW1wiY2hhbm5lbEVycm9yXCIsIFwiZGlzY29ubmVjdFwiXTtcbmZ1bmN0aW9uIGNvbm5lY3RFdmVudFNvdXJjZShpbml0RXZlbnRTb3VyY2UsIGV2ZW50cykge1xuICByZXR1cm4gZGVmZXIoKCkgPT4ge1xuICAgIGNvbnN0IGVzID0gaW5pdEV2ZW50U291cmNlKCk7XG4gICAgcmV0dXJuIGlzT2JzZXJ2YWJsZShlcykgPyBlcyA6IG9mKGVzKTtcbiAgfSkucGlwZShtZXJnZU1hcCgoZXMpID0+IGNvbm5lY3RXaXRoRVNJbnN0YW5jZShlcywgZXZlbnRzKSkpO1xufVxuZnVuY3Rpb24gY29ubmVjdFdpdGhFU0luc3RhbmNlKGVzLCBldmVudHMpIHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcikgPT4ge1xuICAgIGNvbnN0IGVtaXRPcGVuID0gZXZlbnRzLmluY2x1ZGVzKFwib3BlblwiKSwgZW1pdFJlY29ubmVjdCA9IGV2ZW50cy5pbmNsdWRlcyhcInJlY29ubmVjdFwiKTtcbiAgICBmdW5jdGlvbiBvbkVycm9yKGV2dCkge1xuICAgICAgaWYgKFwiZGF0YVwiIGluIGV2dCkge1xuICAgICAgICBjb25zdCBbcGFyc2VFcnJvciwgZXZlbnRdID0gcGFyc2VFdmVudChldnQpO1xuICAgICAgICBvYnNlcnZlci5lcnJvcihcbiAgICAgICAgICBwYXJzZUVycm9yID8gbmV3IE1lc3NhZ2VQYXJzZUVycm9yKFwiVW5hYmxlIHRvIHBhcnNlIEV2ZW50U291cmNlIGVycm9yIG1lc3NhZ2VcIiwgeyBjYXVzZTogZXZlbnQgfSkgOiBuZXcgTWVzc2FnZUVycm9yKChldmVudD8uZGF0YSkubWVzc2FnZSwgZXZlbnQpXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGVzLnJlYWR5U3RhdGUgPT09IGVzLkNMT1NFRCA/IG9ic2VydmVyLmVycm9yKG5ldyBDb25uZWN0aW9uRmFpbGVkRXJyb3IoXCJFdmVudFNvdXJjZSBjb25uZWN0aW9uIGZhaWxlZFwiKSkgOiBlbWl0UmVjb25uZWN0ICYmIG9ic2VydmVyLm5leHQoeyB0eXBlOiBcInJlY29ubmVjdFwiIH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbk9wZW4oKSB7XG4gICAgICBvYnNlcnZlci5uZXh0KHsgdHlwZTogXCJvcGVuXCIgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uTWVzc2FnZShtZXNzYWdlKSB7XG4gICAgICBjb25zdCBbcGFyc2VFcnJvciwgZXZlbnRdID0gcGFyc2VFdmVudChtZXNzYWdlKTtcbiAgICAgIGlmIChwYXJzZUVycm9yKSB7XG4gICAgICAgIG9ic2VydmVyLmVycm9yKFxuICAgICAgICAgIG5ldyBNZXNzYWdlUGFyc2VFcnJvcihcIlVuYWJsZSB0byBwYXJzZSBFdmVudFNvdXJjZSBtZXNzYWdlXCIsIHsgY2F1c2U6IHBhcnNlRXJyb3IgfSlcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKG1lc3NhZ2UudHlwZSA9PT0gXCJjaGFubmVsRXJyb3JcIikge1xuICAgICAgICBvYnNlcnZlci5lcnJvcihuZXcgQ2hhbm5lbEVycm9yKGV4dHJhY3RFcnJvck1lc3NhZ2UoZXZlbnQ/LmRhdGEpLCBldmVudC5kYXRhKSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChtZXNzYWdlLnR5cGUgPT09IFwiZGlzY29ubmVjdFwiKSB7XG4gICAgICAgIG9ic2VydmVyLmVycm9yKFxuICAgICAgICAgIG5ldyBEaXNjb25uZWN0RXJyb3IoXG4gICAgICAgICAgICBgU2VydmVyIGRpc2Nvbm5lY3RlZCBjbGllbnQ6ICR7ZXZlbnQuZGF0YT8ucmVhc29uIHx8IFwidW5rbm93biBlcnJvclwifWBcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG9ic2VydmVyLm5leHQoe1xuICAgICAgICB0eXBlOiBtZXNzYWdlLnR5cGUsXG4gICAgICAgIGlkOiBtZXNzYWdlLmxhc3RFdmVudElkLFxuICAgICAgICAuLi5ldmVudC5kYXRhID8geyBkYXRhOiBldmVudC5kYXRhIH0gOiB7fVxuICAgICAgfSk7XG4gICAgfVxuICAgIGVzLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCBvbkVycm9yKSwgZW1pdE9wZW4gJiYgZXMuYWRkRXZlbnRMaXN0ZW5lcihcIm9wZW5cIiwgb25PcGVuKTtcbiAgICBjb25zdCBjbGVhbmVkRXZlbnRzID0gWy4uLi8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KFsuLi5SRVFVSVJFRF9FVkVOVFMsIC4uLmV2ZW50c10pXS5maWx0ZXIoKHR5cGUpID0+IHR5cGUgIT09IFwiZXJyb3JcIiAmJiB0eXBlICE9PSBcIm9wZW5cIiAmJiB0eXBlICE9PSBcInJlY29ubmVjdFwiKTtcbiAgICByZXR1cm4gY2xlYW5lZEV2ZW50cy5mb3JFYWNoKCh0eXBlKSA9PiBlcy5hZGRFdmVudExpc3RlbmVyKHR5cGUsIG9uTWVzc2FnZSkpLCAoKSA9PiB7XG4gICAgICBlcy5yZW1vdmVFdmVudExpc3RlbmVyKFwiZXJyb3JcIiwgb25FcnJvciksIGVtaXRPcGVuICYmIGVzLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJvcGVuXCIsIG9uT3BlbiksIGNsZWFuZWRFdmVudHMuZm9yRWFjaCgodHlwZSkgPT4gZXMucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBvbk1lc3NhZ2UpKSwgZXMuY2xvc2UoKTtcbiAgICB9O1xuICB9KTtcbn1cbmZ1bmN0aW9uIHBhcnNlRXZlbnQobWVzc2FnZSkge1xuICB0cnkge1xuICAgIGNvbnN0IGRhdGEgPSB0eXBlb2YgbWVzc2FnZS5kYXRhID09IFwic3RyaW5nXCIgJiYgSlNPTi5wYXJzZShtZXNzYWdlLmRhdGEpO1xuICAgIHJldHVybiBbXG4gICAgICBudWxsLFxuICAgICAge1xuICAgICAgICB0eXBlOiBtZXNzYWdlLnR5cGUsXG4gICAgICAgIGlkOiBtZXNzYWdlLmxhc3RFdmVudElkLFxuICAgICAgICAuLi5pc0VtcHR5T2JqZWN0KGRhdGEpID8ge30gOiB7IGRhdGEgfVxuICAgICAgfVxuICAgIF07XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHJldHVybiBbZXJyLCBudWxsXTtcbiAgfVxufVxuZnVuY3Rpb24gZXh0cmFjdEVycm9yTWVzc2FnZShlcnIpIHtcbiAgcmV0dXJuIGVyci5lcnJvciA/IGVyci5lcnJvci5kZXNjcmlwdGlvbiA/IGVyci5lcnJvci5kZXNjcmlwdGlvbiA6IHR5cGVvZiBlcnIuZXJyb3IgPT0gXCJzdHJpbmdcIiA/IGVyci5lcnJvciA6IEpTT04uc3RyaW5naWZ5KGVyci5lcnJvciwgbnVsbCwgMikgOiBlcnIubWVzc2FnZSB8fCBcIlVua25vd24gbGlzdGVuZXIgZXJyb3JcIjtcbn1cbmZ1bmN0aW9uIGlzRW1wdHlPYmplY3QoZGF0YSkge1xuICBmb3IgKGNvbnN0IF8gaW4gZGF0YSlcbiAgICByZXR1cm4gITE7XG4gIHJldHVybiAhMDtcbn1cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbihzZWwpIHtcbiAgaWYgKHR5cGVvZiBzZWwgPT0gXCJzdHJpbmdcIilcbiAgICByZXR1cm4geyBpZDogc2VsIH07XG4gIGlmIChBcnJheS5pc0FycmF5KHNlbCkpXG4gICAgcmV0dXJuIHsgcXVlcnk6IFwiKltfaWQgaW4gJGlkc11cIiwgcGFyYW1zOiB7IGlkczogc2VsIH0gfTtcbiAgaWYgKHR5cGVvZiBzZWwgPT0gXCJvYmplY3RcIiAmJiBzZWwgIT09IG51bGwgJiYgXCJxdWVyeVwiIGluIHNlbCAmJiB0eXBlb2Ygc2VsLnF1ZXJ5ID09IFwic3RyaW5nXCIpXG4gICAgcmV0dXJuIFwicGFyYW1zXCIgaW4gc2VsICYmIHR5cGVvZiBzZWwucGFyYW1zID09IFwib2JqZWN0XCIgJiYgc2VsLnBhcmFtcyAhPT0gbnVsbCA/IHsgcXVlcnk6IHNlbC5xdWVyeSwgcGFyYW1zOiBzZWwucGFyYW1zIH0gOiB7IHF1ZXJ5OiBzZWwucXVlcnkgfTtcbiAgY29uc3Qgc2VsZWN0aW9uT3B0cyA9IFtcbiAgICBcIiogRG9jdW1lbnQgSUQgKDxkb2NJZD4pXCIsXG4gICAgXCIqIEFycmF5IG9mIGRvY3VtZW50IElEc1wiLFxuICAgIFwiKiBPYmplY3QgY29udGFpbmluZyBgcXVlcnlgXCJcbiAgXS5qb2luKGBcbmApO1xuICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gc2VsZWN0aW9uIC0gbXVzdCBiZSBvbmUgb2Y6XG5cbiR7c2VsZWN0aW9uT3B0c31gKTtcbn1cbmNsYXNzIEJhc2VQYXRjaCB7XG4gIHNlbGVjdGlvbjtcbiAgb3BlcmF0aW9ucztcbiAgY29uc3RydWN0b3Ioc2VsZWN0aW9uLCBvcGVyYXRpb25zID0ge30pIHtcbiAgICB0aGlzLnNlbGVjdGlvbiA9IHNlbGVjdGlvbiwgdGhpcy5vcGVyYXRpb25zID0gb3BlcmF0aW9ucztcbiAgfVxuICAvKipcbiAgICogU2V0cyB0aGUgZ2l2ZW4gYXR0cmlidXRlcyB0byB0aGUgZG9jdW1lbnQuIERvZXMgTk9UIG1lcmdlIG9iamVjdHMuXG4gICAqIFRoZSBvcGVyYXRpb24gaXMgYWRkZWQgdG8gdGhlIGN1cnJlbnQgcGF0Y2gsIHJlYWR5IHRvIGJlIGNvbW1pdGVkIGJ5IGBjb21taXQoKWBcbiAgICpcbiAgICogQHBhcmFtIGF0dHJzIC0gQXR0cmlidXRlcyB0byBzZXQuIFRvIHNldCBhIGRlZXAgYXR0cmlidXRlLCB1c2UgSlNPTk1hdGNoLCBlZzogXFx7XCJuZXN0ZWQucHJvcFwiOiBcInZhbHVlXCJcXH1cbiAgICovXG4gIHNldChhdHRycykge1xuICAgIHJldHVybiB0aGlzLl9hc3NpZ24oXCJzZXRcIiwgYXR0cnMpO1xuICB9XG4gIC8qKlxuICAgKiBTZXRzIHRoZSBnaXZlbiBhdHRyaWJ1dGVzIHRvIHRoZSBkb2N1bWVudCBpZiB0aGV5IGFyZSBub3QgY3VycmVudGx5IHNldC4gRG9lcyBOT1QgbWVyZ2Ugb2JqZWN0cy5cbiAgICogVGhlIG9wZXJhdGlvbiBpcyBhZGRlZCB0byB0aGUgY3VycmVudCBwYXRjaCwgcmVhZHkgdG8gYmUgY29tbWl0ZWQgYnkgYGNvbW1pdCgpYFxuICAgKlxuICAgKiBAcGFyYW0gYXR0cnMgLSBBdHRyaWJ1dGVzIHRvIHNldC4gVG8gc2V0IGEgZGVlcCBhdHRyaWJ1dGUsIHVzZSBKU09OTWF0Y2gsIGVnOiBcXHtcIm5lc3RlZC5wcm9wXCI6IFwidmFsdWVcIlxcfVxuICAgKi9cbiAgc2V0SWZNaXNzaW5nKGF0dHJzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Fzc2lnbihcInNldElmTWlzc2luZ1wiLCBhdHRycyk7XG4gIH1cbiAgLyoqXG4gICAqIFBlcmZvcm1zIGEgXCJkaWZmLW1hdGNoLXBhdGNoXCIgb3BlcmF0aW9uIG9uIHRoZSBzdHJpbmcgYXR0cmlidXRlcyBwcm92aWRlZC5cbiAgICogVGhlIG9wZXJhdGlvbiBpcyBhZGRlZCB0byB0aGUgY3VycmVudCBwYXRjaCwgcmVhZHkgdG8gYmUgY29tbWl0ZWQgYnkgYGNvbW1pdCgpYFxuICAgKlxuICAgKiBAcGFyYW0gYXR0cnMgLSBBdHRyaWJ1dGVzIHRvIHBlcmZvcm0gb3BlcmF0aW9uIG9uLiBUbyBzZXQgYSBkZWVwIGF0dHJpYnV0ZSwgdXNlIEpTT05NYXRjaCwgZWc6IFxce1wibmVzdGVkLnByb3BcIjogXCJkbXBcIlxcfVxuICAgKi9cbiAgZGlmZk1hdGNoUGF0Y2goYXR0cnMpIHtcbiAgICByZXR1cm4gdmFsaWRhdGVPYmplY3QoXCJkaWZmTWF0Y2hQYXRjaFwiLCBhdHRycyksIHRoaXMuX2Fzc2lnbihcImRpZmZNYXRjaFBhdGNoXCIsIGF0dHJzKTtcbiAgfVxuICAvKipcbiAgICogVW5zZXRzIHRoZSBhdHRyaWJ1dGUgcGF0aHMgcHJvdmlkZWQuXG4gICAqIFRoZSBvcGVyYXRpb24gaXMgYWRkZWQgdG8gdGhlIGN1cnJlbnQgcGF0Y2gsIHJlYWR5IHRvIGJlIGNvbW1pdGVkIGJ5IGBjb21taXQoKWBcbiAgICpcbiAgICogQHBhcmFtIGF0dHJzIC0gQXR0cmlidXRlIHBhdGhzIHRvIHVuc2V0LlxuICAgKi9cbiAgdW5zZXQoYXR0cnMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXR0cnMpKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwidW5zZXQoYXR0cnMpIHRha2VzIGFuIGFycmF5IG9mIGF0dHJpYnV0ZXMgdG8gdW5zZXQsIG5vbi1hcnJheSBnaXZlblwiKTtcbiAgICByZXR1cm4gdGhpcy5vcGVyYXRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcGVyYXRpb25zLCB7IHVuc2V0OiBhdHRycyB9KSwgdGhpcztcbiAgfVxuICAvKipcbiAgICogSW5jcmVtZW50IGEgbnVtZXJpYyB2YWx1ZS4gRWFjaCBlbnRyeSBpbiB0aGUgYXJndW1lbnQgaXMgZWl0aGVyIGFuIGF0dHJpYnV0ZSBvciBhIEpTT04gcGF0aC4gVGhlIHZhbHVlIG1heSBiZSBhIHBvc2l0aXZlIG9yIG5lZ2F0aXZlIGludGVnZXIgb3IgZmxvYXRpbmctcG9pbnQgdmFsdWUuIFRoZSBvcGVyYXRpb24gd2lsbCBmYWlsIGlmIHRhcmdldCB2YWx1ZSBpcyBub3QgYSBudW1lcmljIHZhbHVlLCBvciBkb2Vzbid0IGV4aXN0LlxuICAgKlxuICAgKiBAcGFyYW0gYXR0cnMgLSBPYmplY3Qgb2YgYXR0cmlidXRlIHBhdGhzIHRvIGluY3JlbWVudCwgdmFsdWVzIHJlcHJlc2VudGluZyB0aGUgbnVtYmVyIHRvIGluY3JlbWVudCBieS5cbiAgICovXG4gIGluYyhhdHRycykge1xuICAgIHJldHVybiB0aGlzLl9hc3NpZ24oXCJpbmNcIiwgYXR0cnMpO1xuICB9XG4gIC8qKlxuICAgKiBEZWNyZW1lbnQgYSBudW1lcmljIHZhbHVlLiBFYWNoIGVudHJ5IGluIHRoZSBhcmd1bWVudCBpcyBlaXRoZXIgYW4gYXR0cmlidXRlIG9yIGEgSlNPTiBwYXRoLiBUaGUgdmFsdWUgbWF5IGJlIGEgcG9zaXRpdmUgb3IgbmVnYXRpdmUgaW50ZWdlciBvciBmbG9hdGluZy1wb2ludCB2YWx1ZS4gVGhlIG9wZXJhdGlvbiB3aWxsIGZhaWwgaWYgdGFyZ2V0IHZhbHVlIGlzIG5vdCBhIG51bWVyaWMgdmFsdWUsIG9yIGRvZXNuJ3QgZXhpc3QuXG4gICAqXG4gICAqIEBwYXJhbSBhdHRycyAtIE9iamVjdCBvZiBhdHRyaWJ1dGUgcGF0aHMgdG8gZGVjcmVtZW50LCB2YWx1ZXMgcmVwcmVzZW50aW5nIHRoZSBudW1iZXIgdG8gZGVjcmVtZW50IGJ5LlxuICAgKi9cbiAgZGVjKGF0dHJzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Fzc2lnbihcImRlY1wiLCBhdHRycyk7XG4gIH1cbiAgLyoqXG4gICAqIFByb3ZpZGVzIG1ldGhvZHMgZm9yIG1vZGlmeWluZyBhcnJheXMsIGJ5IGluc2VydGluZywgYXBwZW5kaW5nIGFuZCByZXBsYWNpbmcgZWxlbWVudHMgdmlhIGEgSlNPTlBhdGggZXhwcmVzc2lvbi5cbiAgICpcbiAgICogQHBhcmFtIGF0IC0gTG9jYXRpb24gdG8gaW5zZXJ0IGF0LCByZWxhdGl2ZSB0byB0aGUgZ2l2ZW4gc2VsZWN0b3IsIG9yICdyZXBsYWNlJyB0aGUgbWF0Y2hlZCBwYXRoXG4gICAqIEBwYXJhbSBzZWxlY3RvciAtIEpTT05QYXRoIGV4cHJlc3Npb24sIGVnIGBjb21tZW50c1stMV1gIG9yIGBibG9ja3NbX2tleT09XCJhYmMxMjNcIl1gXG4gICAqIEBwYXJhbSBpdGVtcyAtIEFycmF5IG9mIGl0ZW1zIHRvIGluc2VydC9yZXBsYWNlXG4gICAqL1xuICBpbnNlcnQoYXQsIHNlbGVjdG9yLCBpdGVtcykge1xuICAgIHJldHVybiB2YWxpZGF0ZUluc2VydChhdCwgc2VsZWN0b3IsIGl0ZW1zKSwgdGhpcy5fYXNzaWduKFwiaW5zZXJ0XCIsIHsgW2F0XTogc2VsZWN0b3IsIGl0ZW1zIH0pO1xuICB9XG4gIC8qKlxuICAgKiBBcHBlbmQgdGhlIGdpdmVuIGl0ZW1zIHRvIHRoZSBhcnJheSBhdCB0aGUgZ2l2ZW4gSlNPTlBhdGhcbiAgICpcbiAgICogQHBhcmFtIHNlbGVjdG9yIC0gQXR0cmlidXRlL3BhdGggdG8gYXBwZW5kIHRvLCBlZyBgY29tbWVudHNgIG9yIGBwZXJzb24uaG9iYmllc2BcbiAgICogQHBhcmFtIGl0ZW1zIC0gQXJyYXkgb2YgaXRlbXMgdG8gYXBwZW5kIHRvIHRoZSBhcnJheVxuICAgKi9cbiAgYXBwZW5kKHNlbGVjdG9yLCBpdGVtcykge1xuICAgIHJldHVybiB0aGlzLmluc2VydChcImFmdGVyXCIsIGAke3NlbGVjdG9yfVstMV1gLCBpdGVtcyk7XG4gIH1cbiAgLyoqXG4gICAqIFByZXBlbmQgdGhlIGdpdmVuIGl0ZW1zIHRvIHRoZSBhcnJheSBhdCB0aGUgZ2l2ZW4gSlNPTlBhdGhcbiAgICpcbiAgICogQHBhcmFtIHNlbGVjdG9yIC0gQXR0cmlidXRlL3BhdGggdG8gcHJlcGVuZCB0bywgZWcgYGNvbW1lbnRzYCBvciBgcGVyc29uLmhvYmJpZXNgXG4gICAqIEBwYXJhbSBpdGVtcyAtIEFycmF5IG9mIGl0ZW1zIHRvIHByZXBlbmQgdG8gdGhlIGFycmF5XG4gICAqL1xuICBwcmVwZW5kKHNlbGVjdG9yLCBpdGVtcykge1xuICAgIHJldHVybiB0aGlzLmluc2VydChcImJlZm9yZVwiLCBgJHtzZWxlY3Rvcn1bMF1gLCBpdGVtcyk7XG4gIH1cbiAgLyoqXG4gICAqIENoYW5nZSB0aGUgY29udGVudHMgb2YgYW4gYXJyYXkgYnkgcmVtb3ZpbmcgZXhpc3RpbmcgZWxlbWVudHMgYW5kL29yIGFkZGluZyBuZXcgZWxlbWVudHMuXG4gICAqXG4gICAqIEBwYXJhbSBzZWxlY3RvciAtIEF0dHJpYnV0ZSBvciBKU09OUGF0aCBleHByZXNzaW9uIGZvciBhcnJheVxuICAgKiBAcGFyYW0gc3RhcnQgLSBJbmRleCBhdCB3aGljaCB0byBzdGFydCBjaGFuZ2luZyB0aGUgYXJyYXkgKHdpdGggb3JpZ2luIDApLiBJZiBncmVhdGVyIHRoYW4gdGhlIGxlbmd0aCBvZiB0aGUgYXJyYXksIGFjdHVhbCBzdGFydGluZyBpbmRleCB3aWxsIGJlIHNldCB0byB0aGUgbGVuZ3RoIG9mIHRoZSBhcnJheS4gSWYgbmVnYXRpdmUsIHdpbGwgYmVnaW4gdGhhdCBtYW55IGVsZW1lbnRzIGZyb20gdGhlIGVuZCBvZiB0aGUgYXJyYXkgKHdpdGggb3JpZ2luIC0xKSBhbmQgd2lsbCBiZSBzZXQgdG8gMCBpZiBhYnNvbHV0ZSB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIGxlbmd0aCBvZiB0aGUgYXJyYXkueFxuICAgKiBAcGFyYW0gZGVsZXRlQ291bnQgLSBBbiBpbnRlZ2VyIGluZGljYXRpbmcgdGhlIG51bWJlciBvZiBvbGQgYXJyYXkgZWxlbWVudHMgdG8gcmVtb3ZlLlxuICAgKiBAcGFyYW0gaXRlbXMgLSBUaGUgZWxlbWVudHMgdG8gYWRkIHRvIHRoZSBhcnJheSwgYmVnaW5uaW5nIGF0IHRoZSBzdGFydCBpbmRleC4gSWYgeW91IGRvbid0IHNwZWNpZnkgYW55IGVsZW1lbnRzLCBzcGxpY2UoKSB3aWxsIG9ubHkgcmVtb3ZlIGVsZW1lbnRzIGZyb20gdGhlIGFycmF5LlxuICAgKi9cbiAgc3BsaWNlKHNlbGVjdG9yLCBzdGFydCwgZGVsZXRlQ291bnQsIGl0ZW1zKSB7XG4gICAgY29uc3QgZGVsQWxsID0gdHlwZW9mIGRlbGV0ZUNvdW50ID4gXCJ1XCIgfHwgZGVsZXRlQ291bnQgPT09IC0xLCBzdGFydEluZGV4ID0gc3RhcnQgPCAwID8gc3RhcnQgLSAxIDogc3RhcnQsIGRlbENvdW50ID0gZGVsQWxsID8gLTEgOiBNYXRoLm1heCgwLCBzdGFydCArIGRlbGV0ZUNvdW50KSwgZGVsUmFuZ2UgPSBzdGFydEluZGV4IDwgMCAmJiBkZWxDb3VudCA+PSAwID8gXCJcIiA6IGRlbENvdW50LCByYW5nZVNlbGVjdG9yID0gYCR7c2VsZWN0b3J9WyR7c3RhcnRJbmRleH06JHtkZWxSYW5nZX1dYDtcbiAgICByZXR1cm4gdGhpcy5pbnNlcnQoXCJyZXBsYWNlXCIsIHJhbmdlU2VsZWN0b3IsIGl0ZW1zIHx8IFtdKTtcbiAgfVxuICAvKipcbiAgICogQWRkcyBhIHJldmlzaW9uIGNsYXVzZSwgcHJldmVudGluZyB0aGUgZG9jdW1lbnQgZnJvbSBiZWluZyBwYXRjaGVkIGlmIHRoZSBgX3JldmAgcHJvcGVydHkgZG9lcyBub3QgbWF0Y2ggdGhlIGdpdmVuIHZhbHVlXG4gICAqXG4gICAqIEBwYXJhbSByZXYgLSBSZXZpc2lvbiB0byBsb2NrIHRoZSBwYXRjaCB0b1xuICAgKi9cbiAgaWZSZXZpc2lvbklkKHJldikge1xuICAgIHJldHVybiB0aGlzLm9wZXJhdGlvbnMuaWZSZXZpc2lvbklEID0gcmV2LCB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYSBwbGFpbiBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwYXRjaFxuICAgKi9cbiAgc2VyaWFsaXplKCkge1xuICAgIHJldHVybiB7IC4uLmdldFNlbGVjdGlvbih0aGlzLnNlbGVjdGlvbiksIC4uLnRoaXMub3BlcmF0aW9ucyB9O1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYSBwbGFpbiBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBwYXRjaFxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnNlcmlhbGl6ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIHBhdGNoIG9mIGFsbCBvcGVyYXRpb25zXG4gICAqL1xuICByZXNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5vcGVyYXRpb25zID0ge30sIHRoaXM7XG4gIH1cbiAgX2Fzc2lnbihvcCwgcHJvcHMsIG1lcmdlMiA9ICEwKSB7XG4gICAgcmV0dXJuIHZhbGlkYXRlT2JqZWN0KG9wLCBwcm9wcyksIHRoaXMub3BlcmF0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3BlcmF0aW9ucywge1xuICAgICAgW29wXTogT2JqZWN0LmFzc2lnbih7fSwgbWVyZ2UyICYmIHRoaXMub3BlcmF0aW9uc1tvcF0gfHwge30sIHByb3BzKVxuICAgIH0pLCB0aGlzO1xuICB9XG4gIF9zZXQob3AsIHByb3BzKSB7XG4gICAgcmV0dXJuIHRoaXMuX2Fzc2lnbihvcCwgcHJvcHMsICExKTtcbiAgfVxufVxuY2xhc3MgT2JzZXJ2YWJsZVBhdGNoIGV4dGVuZHMgQmFzZVBhdGNoIHtcbiAgI2NsaWVudDtcbiAgY29uc3RydWN0b3Ioc2VsZWN0aW9uLCBvcGVyYXRpb25zLCBjbGllbnQpIHtcbiAgICBzdXBlcihzZWxlY3Rpb24sIG9wZXJhdGlvbnMpLCB0aGlzLiNjbGllbnQgPSBjbGllbnQ7XG4gIH1cbiAgLyoqXG4gICAqIENsb25lcyB0aGUgcGF0Y2hcbiAgICovXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZVBhdGNoKHRoaXMuc2VsZWN0aW9uLCB7IC4uLnRoaXMub3BlcmF0aW9ucyB9LCB0aGlzLiNjbGllbnQpO1xuICB9XG4gIGNvbW1pdChvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLiNjbGllbnQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiTm8gYGNsaWVudGAgcGFzc2VkIHRvIHBhdGNoLCBlaXRoZXIgcHJvdmlkZSBvbmUgb3IgcGFzcyB0aGUgcGF0Y2ggdG8gYSBjbGllbnRzIGBtdXRhdGUoKWAgbWV0aG9kXCJcbiAgICAgICk7XG4gICAgY29uc3QgcmV0dXJuRmlyc3QgPSB0eXBlb2YgdGhpcy5zZWxlY3Rpb24gPT0gXCJzdHJpbmdcIiwgb3B0cyA9IE9iamVjdC5hc3NpZ24oeyByZXR1cm5GaXJzdCwgcmV0dXJuRG9jdW1lbnRzOiAhMCB9LCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy4jY2xpZW50Lm11dGF0ZSh7IHBhdGNoOiB0aGlzLnNlcmlhbGl6ZSgpIH0sIG9wdHMpO1xuICB9XG59XG5jbGFzcyBQYXRjaCBleHRlbmRzIEJhc2VQYXRjaCB7XG4gICNjbGllbnQ7XG4gIGNvbnN0cnVjdG9yKHNlbGVjdGlvbiwgb3BlcmF0aW9ucywgY2xpZW50KSB7XG4gICAgc3VwZXIoc2VsZWN0aW9uLCBvcGVyYXRpb25zKSwgdGhpcy4jY2xpZW50ID0gY2xpZW50O1xuICB9XG4gIC8qKlxuICAgKiBDbG9uZXMgdGhlIHBhdGNoXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFBhdGNoKHRoaXMuc2VsZWN0aW9uLCB7IC4uLnRoaXMub3BlcmF0aW9ucyB9LCB0aGlzLiNjbGllbnQpO1xuICB9XG4gIGNvbW1pdChvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLiNjbGllbnQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiTm8gYGNsaWVudGAgcGFzc2VkIHRvIHBhdGNoLCBlaXRoZXIgcHJvdmlkZSBvbmUgb3IgcGFzcyB0aGUgcGF0Y2ggdG8gYSBjbGllbnRzIGBtdXRhdGUoKWAgbWV0aG9kXCJcbiAgICAgICk7XG4gICAgY29uc3QgcmV0dXJuRmlyc3QgPSB0eXBlb2YgdGhpcy5zZWxlY3Rpb24gPT0gXCJzdHJpbmdcIiwgb3B0cyA9IE9iamVjdC5hc3NpZ24oeyByZXR1cm5GaXJzdCwgcmV0dXJuRG9jdW1lbnRzOiAhMCB9LCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy4jY2xpZW50Lm11dGF0ZSh7IHBhdGNoOiB0aGlzLnNlcmlhbGl6ZSgpIH0sIG9wdHMpO1xuICB9XG59XG5jb25zdCBkZWZhdWx0TXV0YXRlT3B0aW9ucyA9IHsgcmV0dXJuRG9jdW1lbnRzOiAhMSB9O1xuY2xhc3MgQmFzZVRyYW5zYWN0aW9uIHtcbiAgb3BlcmF0aW9ucztcbiAgdHJ4SWQ7XG4gIGNvbnN0cnVjdG9yKG9wZXJhdGlvbnMgPSBbXSwgdHJhbnNhY3Rpb25JZCkge1xuICAgIHRoaXMub3BlcmF0aW9ucyA9IG9wZXJhdGlvbnMsIHRoaXMudHJ4SWQgPSB0cmFuc2FjdGlvbklkO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbmV3IFNhbml0eSBkb2N1bWVudC4gSWYgYF9pZGAgaXMgcHJvdmlkZWQgYW5kIGFscmVhZHkgZXhpc3RzLCB0aGUgbXV0YXRpb24gd2lsbCBmYWlsLiBJZiBubyBgX2lkYCBpcyBnaXZlbiwgb25lIHdpbGwgYXV0b21hdGljYWxseSBiZSBnZW5lcmF0ZWQgYnkgdGhlIGRhdGFiYXNlLlxuICAgKiBUaGUgb3BlcmF0aW9uIGlzIGFkZGVkIHRvIHRoZSBjdXJyZW50IHRyYW5zYWN0aW9uLCByZWFkeSB0byBiZSBjb21taXRlZCBieSBgY29tbWl0KClgXG4gICAqXG4gICAqIEBwYXJhbSBkb2MgLSBEb2N1bWVudCB0byBjcmVhdGUuIFJlcXVpcmVzIGEgYF90eXBlYCBwcm9wZXJ0eS5cbiAgICovXG4gIGNyZWF0ZShkb2MpIHtcbiAgICByZXR1cm4gdmFsaWRhdGVPYmplY3QoXCJjcmVhdGVcIiwgZG9jKSwgdGhpcy5fYWRkKHsgY3JlYXRlOiBkb2MgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgU2FuaXR5IGRvY3VtZW50LiBJZiBhIGRvY3VtZW50IHdpdGggdGhlIHNhbWUgYF9pZGAgYWxyZWFkeSBleGlzdHMsIHRoZSBjcmVhdGUgb3BlcmF0aW9uIHdpbGwgYmUgaWdub3JlZC5cbiAgICogVGhlIG9wZXJhdGlvbiBpcyBhZGRlZCB0byB0aGUgY3VycmVudCB0cmFuc2FjdGlvbiwgcmVhZHkgdG8gYmUgY29tbWl0ZWQgYnkgYGNvbW1pdCgpYFxuICAgKlxuICAgKiBAcGFyYW0gZG9jIC0gRG9jdW1lbnQgdG8gY3JlYXRlIGlmIGl0IGRvZXMgbm90IGFscmVhZHkgZXhpc3QuIFJlcXVpcmVzIGBfaWRgIGFuZCBgX3R5cGVgIHByb3BlcnRpZXMuXG4gICAqL1xuICBjcmVhdGVJZk5vdEV4aXN0cyhkb2MpIHtcbiAgICBjb25zdCBvcCA9IFwiY3JlYXRlSWZOb3RFeGlzdHNcIjtcbiAgICByZXR1cm4gdmFsaWRhdGVPYmplY3Qob3AsIGRvYyksIHJlcXVpcmVEb2N1bWVudElkKG9wLCBkb2MpLCB0aGlzLl9hZGQoeyBbb3BdOiBkb2MgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgU2FuaXR5IGRvY3VtZW50LCBvciByZXBsYWNlcyBhbiBleGlzdGluZyBvbmUgaWYgdGhlIHNhbWUgYF9pZGAgaXMgYWxyZWFkeSB1c2VkLlxuICAgKiBUaGUgb3BlcmF0aW9uIGlzIGFkZGVkIHRvIHRoZSBjdXJyZW50IHRyYW5zYWN0aW9uLCByZWFkeSB0byBiZSBjb21taXRlZCBieSBgY29tbWl0KClgXG4gICAqXG4gICAqIEBwYXJhbSBkb2MgLSBEb2N1bWVudCB0byBjcmVhdGUgb3IgcmVwbGFjZS4gUmVxdWlyZXMgYF9pZGAgYW5kIGBfdHlwZWAgcHJvcGVydGllcy5cbiAgICovXG4gIGNyZWF0ZU9yUmVwbGFjZShkb2MpIHtcbiAgICBjb25zdCBvcCA9IFwiY3JlYXRlT3JSZXBsYWNlXCI7XG4gICAgcmV0dXJuIHZhbGlkYXRlT2JqZWN0KG9wLCBkb2MpLCByZXF1aXJlRG9jdW1lbnRJZChvcCwgZG9jKSwgdGhpcy5fYWRkKHsgW29wXTogZG9jIH0pO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGVzIHRoZSBkb2N1bWVudCB3aXRoIHRoZSBnaXZlbiBkb2N1bWVudCBJRFxuICAgKiBUaGUgb3BlcmF0aW9uIGlzIGFkZGVkIHRvIHRoZSBjdXJyZW50IHRyYW5zYWN0aW9uLCByZWFkeSB0byBiZSBjb21taXRlZCBieSBgY29tbWl0KClgXG4gICAqXG4gICAqIEBwYXJhbSBkb2N1bWVudElkIC0gRG9jdW1lbnQgSUQgdG8gZGVsZXRlXG4gICAqL1xuICBkZWxldGUoZG9jdW1lbnRJZCkge1xuICAgIHJldHVybiB2YWxpZGF0ZURvY3VtZW50SWQoXCJkZWxldGVcIiwgZG9jdW1lbnRJZCksIHRoaXMuX2FkZCh7IGRlbGV0ZTogeyBpZDogZG9jdW1lbnRJZCB9IH0pO1xuICB9XG4gIHRyYW5zYWN0aW9uSWQoaWQpIHtcbiAgICByZXR1cm4gaWQgPyAodGhpcy50cnhJZCA9IGlkLCB0aGlzKSA6IHRoaXMudHJ4SWQ7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybiBhIHBsYWluIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIHRyYW5zYWN0aW9uXG4gICAqL1xuICBzZXJpYWxpemUoKSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLm9wZXJhdGlvbnNdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm4gYSBwbGFpbiBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0cmFuc2FjdGlvblxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnNlcmlhbGl6ZSgpO1xuICB9XG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIHRyYW5zYWN0aW9uIG9mIGFsbCBvcGVyYXRpb25zXG4gICAqL1xuICByZXNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5vcGVyYXRpb25zID0gW10sIHRoaXM7XG4gIH1cbiAgX2FkZChtdXQpIHtcbiAgICByZXR1cm4gdGhpcy5vcGVyYXRpb25zLnB1c2gobXV0KSwgdGhpcztcbiAgfVxufVxuY2xhc3MgVHJhbnNhY3Rpb24gZXh0ZW5kcyBCYXNlVHJhbnNhY3Rpb24ge1xuICAjY2xpZW50O1xuICBjb25zdHJ1Y3RvcihvcGVyYXRpb25zLCBjbGllbnQsIHRyYW5zYWN0aW9uSWQpIHtcbiAgICBzdXBlcihvcGVyYXRpb25zLCB0cmFuc2FjdGlvbklkKSwgdGhpcy4jY2xpZW50ID0gY2xpZW50O1xuICB9XG4gIC8qKlxuICAgKiBDbG9uZXMgdGhlIHRyYW5zYWN0aW9uXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IFRyYW5zYWN0aW9uKFsuLi50aGlzLm9wZXJhdGlvbnNdLCB0aGlzLiNjbGllbnQsIHRoaXMudHJ4SWQpO1xuICB9XG4gIGNvbW1pdChvcHRpb25zKSB7XG4gICAgaWYgKCF0aGlzLiNjbGllbnQpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiTm8gYGNsaWVudGAgcGFzc2VkIHRvIHRyYW5zYWN0aW9uLCBlaXRoZXIgcHJvdmlkZSBvbmUgb3IgcGFzcyB0aGUgdHJhbnNhY3Rpb24gdG8gYSBjbGllbnRzIGBtdXRhdGUoKWAgbWV0aG9kXCJcbiAgICAgICk7XG4gICAgcmV0dXJuIHRoaXMuI2NsaWVudC5tdXRhdGUoXG4gICAgICB0aGlzLnNlcmlhbGl6ZSgpLFxuICAgICAgT2JqZWN0LmFzc2lnbih7IHRyYW5zYWN0aW9uSWQ6IHRoaXMudHJ4SWQgfSwgZGVmYXVsdE11dGF0ZU9wdGlvbnMsIG9wdGlvbnMgfHwge30pXG4gICAgKTtcbiAgfVxuICBwYXRjaChwYXRjaE9yRG9jdW1lbnRJZCwgcGF0Y2hPcHMpIHtcbiAgICBjb25zdCBpc0J1aWxkZXIgPSB0eXBlb2YgcGF0Y2hPcHMgPT0gXCJmdW5jdGlvblwiLCBpc1BhdGNoID0gdHlwZW9mIHBhdGNoT3JEb2N1bWVudElkICE9IFwic3RyaW5nXCIgJiYgcGF0Y2hPckRvY3VtZW50SWQgaW5zdGFuY2VvZiBQYXRjaCwgaXNNdXRhdGlvblNlbGVjdGlvbiA9IHR5cGVvZiBwYXRjaE9yRG9jdW1lbnRJZCA9PSBcIm9iamVjdFwiICYmIChcInF1ZXJ5XCIgaW4gcGF0Y2hPckRvY3VtZW50SWQgfHwgXCJpZFwiIGluIHBhdGNoT3JEb2N1bWVudElkKTtcbiAgICBpZiAoaXNQYXRjaClcbiAgICAgIHJldHVybiB0aGlzLl9hZGQoeyBwYXRjaDogcGF0Y2hPckRvY3VtZW50SWQuc2VyaWFsaXplKCkgfSk7XG4gICAgaWYgKGlzQnVpbGRlcikge1xuICAgICAgY29uc3QgcGF0Y2ggPSBwYXRjaE9wcyhuZXcgUGF0Y2gocGF0Y2hPckRvY3VtZW50SWQsIHt9LCB0aGlzLiNjbGllbnQpKTtcbiAgICAgIGlmICghKHBhdGNoIGluc3RhbmNlb2YgUGF0Y2gpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmdW5jdGlvbiBwYXNzZWQgdG8gYHBhdGNoKClgIG11c3QgcmV0dXJuIHRoZSBwYXRjaFwiKTtcbiAgICAgIHJldHVybiB0aGlzLl9hZGQoeyBwYXRjaDogcGF0Y2guc2VyaWFsaXplKCkgfSk7XG4gICAgfVxuICAgIGlmIChpc011dGF0aW9uU2VsZWN0aW9uKSB7XG4gICAgICBjb25zdCBwYXRjaCA9IG5ldyBQYXRjaChwYXRjaE9yRG9jdW1lbnRJZCwgcGF0Y2hPcHMgfHwge30sIHRoaXMuI2NsaWVudCk7XG4gICAgICByZXR1cm4gdGhpcy5fYWRkKHsgcGF0Y2g6IHBhdGNoLnNlcmlhbGl6ZSgpIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fYWRkKHsgcGF0Y2g6IHsgaWQ6IHBhdGNoT3JEb2N1bWVudElkLCAuLi5wYXRjaE9wcyB9IH0pO1xuICB9XG59XG5jbGFzcyBPYnNlcnZhYmxlVHJhbnNhY3Rpb24gZXh0ZW5kcyBCYXNlVHJhbnNhY3Rpb24ge1xuICAjY2xpZW50O1xuICBjb25zdHJ1Y3RvcihvcGVyYXRpb25zLCBjbGllbnQsIHRyYW5zYWN0aW9uSWQpIHtcbiAgICBzdXBlcihvcGVyYXRpb25zLCB0cmFuc2FjdGlvbklkKSwgdGhpcy4jY2xpZW50ID0gY2xpZW50O1xuICB9XG4gIC8qKlxuICAgKiBDbG9uZXMgdGhlIHRyYW5zYWN0aW9uXG4gICAqL1xuICBjbG9uZSgpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGVUcmFuc2FjdGlvbihbLi4udGhpcy5vcGVyYXRpb25zXSwgdGhpcy4jY2xpZW50LCB0aGlzLnRyeElkKTtcbiAgfVxuICBjb21taXQob3B0aW9ucykge1xuICAgIGlmICghdGhpcy4jY2xpZW50KVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIk5vIGBjbGllbnRgIHBhc3NlZCB0byB0cmFuc2FjdGlvbiwgZWl0aGVyIHByb3ZpZGUgb25lIG9yIHBhc3MgdGhlIHRyYW5zYWN0aW9uIHRvIGEgY2xpZW50cyBgbXV0YXRlKClgIG1ldGhvZFwiXG4gICAgICApO1xuICAgIHJldHVybiB0aGlzLiNjbGllbnQubXV0YXRlKFxuICAgICAgdGhpcy5zZXJpYWxpemUoKSxcbiAgICAgIE9iamVjdC5hc3NpZ24oeyB0cmFuc2FjdGlvbklkOiB0aGlzLnRyeElkIH0sIGRlZmF1bHRNdXRhdGVPcHRpb25zLCBvcHRpb25zIHx8IHt9KVxuICAgICk7XG4gIH1cbiAgcGF0Y2gocGF0Y2hPckRvY3VtZW50SWQsIHBhdGNoT3BzKSB7XG4gICAgY29uc3QgaXNCdWlsZGVyID0gdHlwZW9mIHBhdGNoT3BzID09IFwiZnVuY3Rpb25cIjtcbiAgICBpZiAodHlwZW9mIHBhdGNoT3JEb2N1bWVudElkICE9IFwic3RyaW5nXCIgJiYgcGF0Y2hPckRvY3VtZW50SWQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlUGF0Y2gpXG4gICAgICByZXR1cm4gdGhpcy5fYWRkKHsgcGF0Y2g6IHBhdGNoT3JEb2N1bWVudElkLnNlcmlhbGl6ZSgpIH0pO1xuICAgIGlmIChpc0J1aWxkZXIpIHtcbiAgICAgIGNvbnN0IHBhdGNoID0gcGF0Y2hPcHMobmV3IE9ic2VydmFibGVQYXRjaChwYXRjaE9yRG9jdW1lbnRJZCwge30sIHRoaXMuI2NsaWVudCkpO1xuICAgICAgaWYgKCEocGF0Y2ggaW5zdGFuY2VvZiBPYnNlcnZhYmxlUGF0Y2gpKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmdW5jdGlvbiBwYXNzZWQgdG8gYHBhdGNoKClgIG11c3QgcmV0dXJuIHRoZSBwYXRjaFwiKTtcbiAgICAgIHJldHVybiB0aGlzLl9hZGQoeyBwYXRjaDogcGF0Y2guc2VyaWFsaXplKCkgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9hZGQoeyBwYXRjaDogeyBpZDogcGF0Y2hPckRvY3VtZW50SWQsIC4uLnBhdGNoT3BzIH0gfSk7XG4gIH1cbn1cbmNvbnN0IHByb2plY3RIZWFkZXIgPSBcIlgtU2FuaXR5LVByb2plY3QtSURcIjtcbmZ1bmN0aW9uIHJlcXVlc3RPcHRpb25zKGNvbmZpZywgb3ZlcnJpZGVzID0ge30pIHtcbiAgY29uc3QgaGVhZGVyczIgPSB7fSwgdG9rZW4gPSBvdmVycmlkZXMudG9rZW4gfHwgY29uZmlnLnRva2VuO1xuICB0b2tlbiAmJiAoaGVhZGVyczIuQXV0aG9yaXphdGlvbiA9IGBCZWFyZXIgJHt0b2tlbn1gKSwgIW92ZXJyaWRlcy51c2VHbG9iYWxBcGkgJiYgIWNvbmZpZy51c2VQcm9qZWN0SG9zdG5hbWUgJiYgY29uZmlnLnByb2plY3RJZCAmJiAoaGVhZGVyczJbcHJvamVjdEhlYWRlcl0gPSBjb25maWcucHJvamVjdElkKTtcbiAgY29uc3Qgd2l0aENyZWRlbnRpYWxzID0gISEodHlwZW9mIG92ZXJyaWRlcy53aXRoQ3JlZGVudGlhbHMgPiBcInVcIiA/IGNvbmZpZy53aXRoQ3JlZGVudGlhbHMgOiBvdmVycmlkZXMud2l0aENyZWRlbnRpYWxzKSwgdGltZW91dCA9IHR5cGVvZiBvdmVycmlkZXMudGltZW91dCA+IFwidVwiID8gY29uZmlnLnRpbWVvdXQgOiBvdmVycmlkZXMudGltZW91dDtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIG92ZXJyaWRlcywge1xuICAgIGhlYWRlcnM6IE9iamVjdC5hc3NpZ24oe30sIGhlYWRlcnMyLCBvdmVycmlkZXMuaGVhZGVycyB8fCB7fSksXG4gICAgdGltZW91dDogdHlwZW9mIHRpbWVvdXQgPiBcInVcIiA/IDUgKiA2MCAqIDFlMyA6IHRpbWVvdXQsXG4gICAgcHJveHk6IG92ZXJyaWRlcy5wcm94eSB8fCBjb25maWcucHJveHksXG4gICAganNvbjogITAsXG4gICAgd2l0aENyZWRlbnRpYWxzLFxuICAgIGZldGNoOiB0eXBlb2Ygb3ZlcnJpZGVzLmZldGNoID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIGNvbmZpZy5mZXRjaCA9PSBcIm9iamVjdFwiID8geyAuLi5jb25maWcuZmV0Y2gsIC4uLm92ZXJyaWRlcy5mZXRjaCB9IDogb3ZlcnJpZGVzLmZldGNoIHx8IGNvbmZpZy5mZXRjaFxuICB9KTtcbn1cbmNvbnN0IGVuY29kZVF1ZXJ5U3RyaW5nID0gKHtcbiAgcXVlcnksXG4gIHBhcmFtcyA9IHt9LFxuICBvcHRpb25zID0ge31cbn0pID0+IHtcbiAgY29uc3Qgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpLCB7IHRhZywgaW5jbHVkZU11dGF0aW9ucywgcmV0dXJuUXVlcnksIC4uLm9wdHMgfSA9IG9wdGlvbnM7XG4gIHRhZyAmJiBzZWFyY2hQYXJhbXMuYXBwZW5kKFwidGFnXCIsIHRhZyksIHNlYXJjaFBhcmFtcy5hcHBlbmQoXCJxdWVyeVwiLCBxdWVyeSk7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHBhcmFtcykpXG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChgJCR7a2V5fWAsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG9wdHMpKVxuICAgIHZhbHVlICYmIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCBgJHt2YWx1ZX1gKTtcbiAgcmV0dXJuIHJldHVyblF1ZXJ5ID09PSAhMSAmJiBzZWFyY2hQYXJhbXMuYXBwZW5kKFwicmV0dXJuUXVlcnlcIiwgXCJmYWxzZVwiKSwgaW5jbHVkZU11dGF0aW9ucyA9PT0gITEgJiYgc2VhcmNoUGFyYW1zLmFwcGVuZChcImluY2x1ZGVNdXRhdGlvbnNcIiwgXCJmYWxzZVwiKSwgYD8ke3NlYXJjaFBhcmFtc31gO1xufSwgZXhjbHVkZUZhbHNleSA9IChwYXJhbSwgZGVmVmFsdWUpID0+IHBhcmFtID09PSAhMSA/IHZvaWQgMCA6IHR5cGVvZiBwYXJhbSA+IFwidVwiID8gZGVmVmFsdWUgOiBwYXJhbSwgZ2V0TXV0YXRpb25RdWVyeSA9IChvcHRpb25zID0ge30pID0+ICh7XG4gIGRyeVJ1bjogb3B0aW9ucy5kcnlSdW4sXG4gIHJldHVybklkczogITAsXG4gIHJldHVybkRvY3VtZW50czogZXhjbHVkZUZhbHNleShvcHRpb25zLnJldHVybkRvY3VtZW50cywgITApLFxuICB2aXNpYmlsaXR5OiBvcHRpb25zLnZpc2liaWxpdHkgfHwgXCJzeW5jXCIsXG4gIGF1dG9HZW5lcmF0ZUFycmF5S2V5czogb3B0aW9ucy5hdXRvR2VuZXJhdGVBcnJheUtleXMsXG4gIHNraXBDcm9zc0RhdGFzZXRSZWZlcmVuY2VWYWxpZGF0aW9uOiBvcHRpb25zLnNraXBDcm9zc0RhdGFzZXRSZWZlcmVuY2VWYWxpZGF0aW9uXG59KSwgaXNSZXNwb25zZSA9IChldmVudCkgPT4gZXZlbnQudHlwZSA9PT0gXCJyZXNwb25zZVwiLCBnZXRCb2R5ID0gKGV2ZW50KSA9PiBldmVudC5ib2R5LCBpbmRleEJ5ID0gKGRvY3MsIGF0dHIpID0+IGRvY3MucmVkdWNlKChpbmRleGVkLCBkb2MpID0+IChpbmRleGVkW2F0dHIoZG9jKV0gPSBkb2MsIGluZGV4ZWQpLCAvKiBAX19QVVJFX18gKi8gT2JqZWN0LmNyZWF0ZShudWxsKSksIGdldFF1ZXJ5U2l6ZUxpbWl0ID0gMTEyNjQ7XG5mdW5jdGlvbiBfZmV0Y2goY2xpZW50LCBodHRwUmVxdWVzdCwgX3N0ZWdhLCBxdWVyeSwgX3BhcmFtcyA9IHt9LCBvcHRpb25zID0ge30pIHtcbiAgY29uc3Qgc3RlZ2EgPSBcInN0ZWdhXCIgaW4gb3B0aW9ucyA/IHtcbiAgICAuLi5fc3RlZ2EgfHwge30sXG4gICAgLi4udHlwZW9mIG9wdGlvbnMuc3RlZ2EgPT0gXCJib29sZWFuXCIgPyB7IGVuYWJsZWQ6IG9wdGlvbnMuc3RlZ2EgfSA6IG9wdGlvbnMuc3RlZ2EgfHwge31cbiAgfSA6IF9zdGVnYSwgcGFyYW1zID0gc3RlZ2EuZW5hYmxlZCA/IHN0ZWdhQ2xlYW4oX3BhcmFtcykgOiBfcGFyYW1zLCBtYXBSZXNwb25zZSA9IG9wdGlvbnMuZmlsdGVyUmVzcG9uc2UgPT09ICExID8gKHJlcykgPT4gcmVzIDogKHJlcykgPT4gcmVzLnJlc3VsdCwgeyBjYWNoZSwgbmV4dCwgLi4ub3B0cyB9ID0ge1xuICAgIC8vIE9wdCBvdXQgb2Ygc2V0dGluZyBhIGBzaWduYWxgIG9uIGFuIGludGVybmFsIGBmZXRjaGAgaWYgb25lIGlzbid0IHByb3ZpZGVkLlxuICAgIC8vIFRoaXMgaXMgbmVjZXNzYXJ5IGluIFJlYWN0IFNlcnZlciBDb21wb25lbnRzIHRvIGF2b2lkIG9wdGluZyBvdXQgb2YgUmVxdWVzdCBNZW1vaXphdGlvbi5cbiAgICB1c2VBYm9ydFNpZ25hbDogdHlwZW9mIG9wdGlvbnMuc2lnbmFsIDwgXCJ1XCIsXG4gICAgLy8gU2V0IGByZXN1bHRTb3VyY2VNYXAnIHdoZW4gc3RlZ2EgaXMgZW5hYmxlZCwgYXMgaXQncyByZXF1aXJlZCBmb3IgZW5jb2RpbmcuXG4gICAgcmVzdWx0U291cmNlTWFwOiBzdGVnYS5lbmFibGVkID8gXCJ3aXRoS2V5QXJyYXlTZWxlY3RvclwiIDogb3B0aW9ucy5yZXN1bHRTb3VyY2VNYXAsXG4gICAgLi4ub3B0aW9ucyxcbiAgICAvLyBEZWZhdWx0IHRvIG5vdCByZXR1cm5pbmcgdGhlIHF1ZXJ5LCB1bmxlc3MgYGZpbHRlclJlc3BvbnNlYCBpcyBgZmFsc2VgLFxuICAgIC8vIG9yIGByZXR1cm5RdWVyeWAgaXMgZXhwbGljaXRseSBzZXQuIGB0cnVlYCBpcyB0aGUgZGVmYXVsdCBpbiBDb250ZW50IExha2UsIHNvIHNraXAgaWYgdHJ1dGh5XG4gICAgcmV0dXJuUXVlcnk6IG9wdGlvbnMuZmlsdGVyUmVzcG9uc2UgPT09ICExICYmIG9wdGlvbnMucmV0dXJuUXVlcnkgIT09ICExXG4gIH0sIHJlcU9wdHMgPSB0eXBlb2YgY2FjaGUgPCBcInVcIiB8fCB0eXBlb2YgbmV4dCA8IFwidVwiID8geyAuLi5vcHRzLCBmZXRjaDogeyBjYWNoZSwgbmV4dCB9IH0gOiBvcHRzLCAkcmVxdWVzdCA9IF9kYXRhUmVxdWVzdChjbGllbnQsIGh0dHBSZXF1ZXN0LCBcInF1ZXJ5XCIsIHsgcXVlcnksIHBhcmFtcyB9LCByZXFPcHRzKTtcbiAgcmV0dXJuIHN0ZWdhLmVuYWJsZWQgPyAkcmVxdWVzdC5waXBlKFxuICAgIGNvbWJpbmVMYXRlc3RXaXRoKFxuICAgICAgZnJvbShcbiAgICAgICAgaW1wb3J0KFwiLi9fY2h1bmtzLWVzL3N0ZWdhRW5jb2RlU291cmNlTWFwLmpzXCIpLnRoZW4oZnVuY3Rpb24obikge1xuICAgICAgICAgIHJldHVybiBuLnN0ZWdhRW5jb2RlU291cmNlTWFwJDE7XG4gICAgICAgIH0pLnRoZW4oXG4gICAgICAgICAgKHsgc3RlZ2FFbmNvZGVTb3VyY2VNYXAgfSkgPT4gc3RlZ2FFbmNvZGVTb3VyY2VNYXBcbiAgICAgICAgKVxuICAgICAgKVxuICAgICksXG4gICAgbWFwKFxuICAgICAgKFtyZXMsIHN0ZWdhRW5jb2RlU291cmNlTWFwXSkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBzdGVnYUVuY29kZVNvdXJjZU1hcChyZXMucmVzdWx0LCByZXMucmVzdWx0U291cmNlTWFwLCBzdGVnYSk7XG4gICAgICAgIHJldHVybiBtYXBSZXNwb25zZSh7IC4uLnJlcywgcmVzdWx0IH0pO1xuICAgICAgfVxuICAgIClcbiAgKSA6ICRyZXF1ZXN0LnBpcGUobWFwKG1hcFJlc3BvbnNlKSk7XG59XG5mdW5jdGlvbiBfZ2V0RG9jdW1lbnQoY2xpZW50LCBodHRwUmVxdWVzdCwgaWQsIG9wdHMgPSB7fSkge1xuICBjb25zdCBvcHRpb25zID0ge1xuICAgIHVyaTogX2dldERhdGFVcmwoY2xpZW50LCBcImRvY1wiLCBpZCksXG4gICAganNvbjogITAsXG4gICAgdGFnOiBvcHRzLnRhZyxcbiAgICBzaWduYWw6IG9wdHMuc2lnbmFsXG4gIH07XG4gIHJldHVybiBfcmVxdWVzdE9ic2VydmFibGUoY2xpZW50LCBodHRwUmVxdWVzdCwgb3B0aW9ucykucGlwZShcbiAgICBmaWx0ZXIoaXNSZXNwb25zZSksXG4gICAgbWFwKChldmVudCkgPT4gZXZlbnQuYm9keS5kb2N1bWVudHMgJiYgZXZlbnQuYm9keS5kb2N1bWVudHNbMF0pXG4gICk7XG59XG5mdW5jdGlvbiBfZ2V0RG9jdW1lbnRzKGNsaWVudCwgaHR0cFJlcXVlc3QsIGlkcywgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgdXJpOiBfZ2V0RGF0YVVybChjbGllbnQsIFwiZG9jXCIsIGlkcy5qb2luKFwiLFwiKSksXG4gICAganNvbjogITAsXG4gICAgdGFnOiBvcHRzLnRhZyxcbiAgICBzaWduYWw6IG9wdHMuc2lnbmFsXG4gIH07XG4gIHJldHVybiBfcmVxdWVzdE9ic2VydmFibGUoY2xpZW50LCBodHRwUmVxdWVzdCwgb3B0aW9ucykucGlwZShcbiAgICBmaWx0ZXIoaXNSZXNwb25zZSksXG4gICAgbWFwKChldmVudCkgPT4ge1xuICAgICAgY29uc3QgaW5kZXhlZCA9IGluZGV4QnkoZXZlbnQuYm9keS5kb2N1bWVudHMgfHwgW10sIChkb2MpID0+IGRvYy5faWQpO1xuICAgICAgcmV0dXJuIGlkcy5tYXAoKGlkKSA9PiBpbmRleGVkW2lkXSB8fCBudWxsKTtcbiAgICB9KVxuICApO1xufVxuZnVuY3Rpb24gX2NyZWF0ZUlmTm90RXhpc3RzKGNsaWVudCwgaHR0cFJlcXVlc3QsIGRvYywgb3B0aW9ucykge1xuICByZXR1cm4gcmVxdWlyZURvY3VtZW50SWQoXCJjcmVhdGVJZk5vdEV4aXN0c1wiLCBkb2MpLCBfY3JlYXRlKGNsaWVudCwgaHR0cFJlcXVlc3QsIGRvYywgXCJjcmVhdGVJZk5vdEV4aXN0c1wiLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIF9jcmVhdGVPclJlcGxhY2UoY2xpZW50LCBodHRwUmVxdWVzdCwgZG9jLCBvcHRpb25zKSB7XG4gIHJldHVybiByZXF1aXJlRG9jdW1lbnRJZChcImNyZWF0ZU9yUmVwbGFjZVwiLCBkb2MpLCBfY3JlYXRlKGNsaWVudCwgaHR0cFJlcXVlc3QsIGRvYywgXCJjcmVhdGVPclJlcGxhY2VcIiwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBfZGVsZXRlKGNsaWVudCwgaHR0cFJlcXVlc3QsIHNlbGVjdGlvbiwgb3B0aW9ucykge1xuICByZXR1cm4gX2RhdGFSZXF1ZXN0KFxuICAgIGNsaWVudCxcbiAgICBodHRwUmVxdWVzdCxcbiAgICBcIm11dGF0ZVwiLFxuICAgIHsgbXV0YXRpb25zOiBbeyBkZWxldGU6IGdldFNlbGVjdGlvbihzZWxlY3Rpb24pIH1dIH0sXG4gICAgb3B0aW9uc1xuICApO1xufVxuZnVuY3Rpb24gX211dGF0ZShjbGllbnQsIGh0dHBSZXF1ZXN0LCBtdXRhdGlvbnMsIG9wdGlvbnMpIHtcbiAgbGV0IG11dDtcbiAgbXV0YXRpb25zIGluc3RhbmNlb2YgUGF0Y2ggfHwgbXV0YXRpb25zIGluc3RhbmNlb2YgT2JzZXJ2YWJsZVBhdGNoID8gbXV0ID0geyBwYXRjaDogbXV0YXRpb25zLnNlcmlhbGl6ZSgpIH0gOiBtdXRhdGlvbnMgaW5zdGFuY2VvZiBUcmFuc2FjdGlvbiB8fCBtdXRhdGlvbnMgaW5zdGFuY2VvZiBPYnNlcnZhYmxlVHJhbnNhY3Rpb24gPyBtdXQgPSBtdXRhdGlvbnMuc2VyaWFsaXplKCkgOiBtdXQgPSBtdXRhdGlvbnM7XG4gIGNvbnN0IG11dHMgPSBBcnJheS5pc0FycmF5KG11dCkgPyBtdXQgOiBbbXV0XSwgdHJhbnNhY3Rpb25JZCA9IG9wdGlvbnMgJiYgb3B0aW9ucy50cmFuc2FjdGlvbklkIHx8IHZvaWQgMDtcbiAgcmV0dXJuIF9kYXRhUmVxdWVzdChjbGllbnQsIGh0dHBSZXF1ZXN0LCBcIm11dGF0ZVwiLCB7IG11dGF0aW9uczogbXV0cywgdHJhbnNhY3Rpb25JZCB9LCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIF9hY3Rpb24oY2xpZW50LCBodHRwUmVxdWVzdCwgYWN0aW9ucywgb3B0aW9ucykge1xuICBjb25zdCBhY3RzID0gQXJyYXkuaXNBcnJheShhY3Rpb25zKSA/IGFjdGlvbnMgOiBbYWN0aW9uc10sIHRyYW5zYWN0aW9uSWQgPSBvcHRpb25zICYmIG9wdGlvbnMudHJhbnNhY3Rpb25JZCB8fCB2b2lkIDAsIHNraXBDcm9zc0RhdGFzZXRSZWZlcmVuY2VWYWxpZGF0aW9uID0gb3B0aW9ucyAmJiBvcHRpb25zLnNraXBDcm9zc0RhdGFzZXRSZWZlcmVuY2VWYWxpZGF0aW9uIHx8IHZvaWQgMCwgZHJ5UnVuID0gb3B0aW9ucyAmJiBvcHRpb25zLmRyeVJ1biB8fCB2b2lkIDA7XG4gIHJldHVybiBfZGF0YVJlcXVlc3QoXG4gICAgY2xpZW50LFxuICAgIGh0dHBSZXF1ZXN0LFxuICAgIFwiYWN0aW9uc1wiLFxuICAgIHsgYWN0aW9uczogYWN0cywgdHJhbnNhY3Rpb25JZCwgc2tpcENyb3NzRGF0YXNldFJlZmVyZW5jZVZhbGlkYXRpb24sIGRyeVJ1biB9LFxuICAgIG9wdGlvbnNcbiAgKTtcbn1cbmZ1bmN0aW9uIF9kYXRhUmVxdWVzdChjbGllbnQsIGh0dHBSZXF1ZXN0LCBlbmRwb2ludCwgYm9keSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGlzTXV0YXRpb24gPSBlbmRwb2ludCA9PT0gXCJtdXRhdGVcIiwgaXNBY3Rpb24gPSBlbmRwb2ludCA9PT0gXCJhY3Rpb25zXCIsIGlzUXVlcnkgPSBlbmRwb2ludCA9PT0gXCJxdWVyeVwiLCBzdHJRdWVyeSA9IGlzTXV0YXRpb24gfHwgaXNBY3Rpb24gPyBcIlwiIDogZW5jb2RlUXVlcnlTdHJpbmcoYm9keSksIHVzZUdldCA9ICFpc011dGF0aW9uICYmICFpc0FjdGlvbiAmJiBzdHJRdWVyeS5sZW5ndGggPCBnZXRRdWVyeVNpemVMaW1pdCwgc3RyaW5nUXVlcnkgPSB1c2VHZXQgPyBzdHJRdWVyeSA6IFwiXCIsIHJldHVybkZpcnN0ID0gb3B0aW9ucy5yZXR1cm5GaXJzdCwgeyB0aW1lb3V0LCB0b2tlbiwgdGFnLCBoZWFkZXJzOiBoZWFkZXJzMiwgcmV0dXJuUXVlcnksIGxhc3RMaXZlRXZlbnRJZCwgY2FjaGVNb2RlIH0gPSBvcHRpb25zLCB1cmkgPSBfZ2V0RGF0YVVybChjbGllbnQsIGVuZHBvaW50LCBzdHJpbmdRdWVyeSksIHJlcU9wdGlvbnMgPSB7XG4gICAgbWV0aG9kOiB1c2VHZXQgPyBcIkdFVFwiIDogXCJQT1NUXCIsXG4gICAgdXJpLFxuICAgIGpzb246ICEwLFxuICAgIGJvZHk6IHVzZUdldCA/IHZvaWQgMCA6IGJvZHksXG4gICAgcXVlcnk6IGlzTXV0YXRpb24gJiYgZ2V0TXV0YXRpb25RdWVyeShvcHRpb25zKSxcbiAgICB0aW1lb3V0LFxuICAgIGhlYWRlcnM6IGhlYWRlcnMyLFxuICAgIHRva2VuLFxuICAgIHRhZyxcbiAgICByZXR1cm5RdWVyeSxcbiAgICBwZXJzcGVjdGl2ZTogb3B0aW9ucy5wZXJzcGVjdGl2ZSxcbiAgICByZXN1bHRTb3VyY2VNYXA6IG9wdGlvbnMucmVzdWx0U291cmNlTWFwLFxuICAgIGxhc3RMaXZlRXZlbnRJZDogQXJyYXkuaXNBcnJheShsYXN0TGl2ZUV2ZW50SWQpID8gbGFzdExpdmVFdmVudElkWzBdIDogbGFzdExpdmVFdmVudElkLFxuICAgIGNhY2hlTW9kZSxcbiAgICBjYW5Vc2VDZG46IGlzUXVlcnksXG4gICAgc2lnbmFsOiBvcHRpb25zLnNpZ25hbCxcbiAgICBmZXRjaDogb3B0aW9ucy5mZXRjaCxcbiAgICB1c2VBYm9ydFNpZ25hbDogb3B0aW9ucy51c2VBYm9ydFNpZ25hbCxcbiAgICB1c2VDZG46IG9wdGlvbnMudXNlQ2RuXG4gIH07XG4gIHJldHVybiBfcmVxdWVzdE9ic2VydmFibGUoY2xpZW50LCBodHRwUmVxdWVzdCwgcmVxT3B0aW9ucykucGlwZShcbiAgICBmaWx0ZXIoaXNSZXNwb25zZSksXG4gICAgbWFwKGdldEJvZHkpLFxuICAgIG1hcCgocmVzKSA9PiB7XG4gICAgICBpZiAoIWlzTXV0YXRpb24pXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICBjb25zdCByZXN1bHRzID0gcmVzLnJlc3VsdHMgfHwgW107XG4gICAgICBpZiAob3B0aW9ucy5yZXR1cm5Eb2N1bWVudHMpXG4gICAgICAgIHJldHVybiByZXR1cm5GaXJzdCA/IHJlc3VsdHNbMF0gJiYgcmVzdWx0c1swXS5kb2N1bWVudCA6IHJlc3VsdHMubWFwKChtdXQpID0+IG11dC5kb2N1bWVudCk7XG4gICAgICBjb25zdCBrZXkgPSByZXR1cm5GaXJzdCA/IFwiZG9jdW1lbnRJZFwiIDogXCJkb2N1bWVudElkc1wiLCBpZHMgPSByZXR1cm5GaXJzdCA/IHJlc3VsdHNbMF0gJiYgcmVzdWx0c1swXS5pZCA6IHJlc3VsdHMubWFwKChtdXQpID0+IG11dC5pZCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0cmFuc2FjdGlvbklkOiByZXMudHJhbnNhY3Rpb25JZCxcbiAgICAgICAgcmVzdWx0cyxcbiAgICAgICAgW2tleV06IGlkc1xuICAgICAgfTtcbiAgICB9KVxuICApO1xufVxuZnVuY3Rpb24gX2NyZWF0ZShjbGllbnQsIGh0dHBSZXF1ZXN0LCBkb2MsIG9wLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgbXV0YXRpb24gPSB7IFtvcF06IGRvYyB9LCBvcHRzID0gT2JqZWN0LmFzc2lnbih7IHJldHVybkZpcnN0OiAhMCwgcmV0dXJuRG9jdW1lbnRzOiAhMCB9LCBvcHRpb25zKTtcbiAgcmV0dXJuIF9kYXRhUmVxdWVzdChjbGllbnQsIGh0dHBSZXF1ZXN0LCBcIm11dGF0ZVwiLCB7IG11dGF0aW9uczogW211dGF0aW9uXSB9LCBvcHRzKTtcbn1cbmZ1bmN0aW9uIF9yZXF1ZXN0T2JzZXJ2YWJsZShjbGllbnQsIGh0dHBSZXF1ZXN0LCBvcHRpb25zKSB7XG4gIGNvbnN0IHVyaSA9IG9wdGlvbnMudXJsIHx8IG9wdGlvbnMudXJpLCBjb25maWcgPSBjbGllbnQuY29uZmlnKCksIGNhblVzZUNkbiA9IHR5cGVvZiBvcHRpb25zLmNhblVzZUNkbiA+IFwidVwiID8gW1wiR0VUXCIsIFwiSEVBRFwiXS5pbmRleE9mKG9wdGlvbnMubWV0aG9kIHx8IFwiR0VUXCIpID49IDAgJiYgdXJpLmluZGV4T2YoXCIvZGF0YS9cIikgPT09IDAgOiBvcHRpb25zLmNhblVzZUNkbjtcbiAgbGV0IHVzZUNkbiA9IChvcHRpb25zLnVzZUNkbiA/PyBjb25maWcudXNlQ2RuKSAmJiBjYW5Vc2VDZG47XG4gIGNvbnN0IHRhZyA9IG9wdGlvbnMudGFnICYmIGNvbmZpZy5yZXF1ZXN0VGFnUHJlZml4ID8gW2NvbmZpZy5yZXF1ZXN0VGFnUHJlZml4LCBvcHRpb25zLnRhZ10uam9pbihcIi5cIikgOiBvcHRpb25zLnRhZyB8fCBjb25maWcucmVxdWVzdFRhZ1ByZWZpeDtcbiAgaWYgKHRhZyAmJiBvcHRpb25zLnRhZyAhPT0gbnVsbCAmJiAob3B0aW9ucy5xdWVyeSA9IHsgdGFnOiByZXF1ZXN0VGFnKHRhZyksIC4uLm9wdGlvbnMucXVlcnkgfSksIFtcIkdFVFwiLCBcIkhFQURcIiwgXCJQT1NUXCJdLmluZGV4T2Yob3B0aW9ucy5tZXRob2QgfHwgXCJHRVRcIikgPj0gMCAmJiB1cmkuaW5kZXhPZihcIi9kYXRhL3F1ZXJ5L1wiKSA9PT0gMCkge1xuICAgIGNvbnN0IHJlc3VsdFNvdXJjZU1hcCA9IG9wdGlvbnMucmVzdWx0U291cmNlTWFwID8/IGNvbmZpZy5yZXN1bHRTb3VyY2VNYXA7XG4gICAgcmVzdWx0U291cmNlTWFwICE9PSB2b2lkIDAgJiYgcmVzdWx0U291cmNlTWFwICE9PSAhMSAmJiAob3B0aW9ucy5xdWVyeSA9IHsgcmVzdWx0U291cmNlTWFwLCAuLi5vcHRpb25zLnF1ZXJ5IH0pO1xuICAgIGNvbnN0IHBlcnNwZWN0aXZlT3B0aW9uID0gb3B0aW9ucy5wZXJzcGVjdGl2ZSB8fCBjb25maWcucGVyc3BlY3RpdmU7XG4gICAgdHlwZW9mIHBlcnNwZWN0aXZlT3B0aW9uIDwgXCJ1XCIgJiYgKHBlcnNwZWN0aXZlT3B0aW9uID09PSBcInByZXZpZXdEcmFmdHNcIiAmJiBwcmludFByZXZpZXdEcmFmdHNEZXByZWNhdGlvbldhcm5pbmcoKSwgdmFsaWRhdGVBcGlQZXJzcGVjdGl2ZShwZXJzcGVjdGl2ZU9wdGlvbiksIG9wdGlvbnMucXVlcnkgPSB7XG4gICAgICBwZXJzcGVjdGl2ZTogQXJyYXkuaXNBcnJheShwZXJzcGVjdGl2ZU9wdGlvbikgPyBwZXJzcGVjdGl2ZU9wdGlvbi5qb2luKFwiLFwiKSA6IHBlcnNwZWN0aXZlT3B0aW9uLFxuICAgICAgLi4ub3B0aW9ucy5xdWVyeVxuICAgIH0sIChBcnJheS5pc0FycmF5KHBlcnNwZWN0aXZlT3B0aW9uKSAmJiBwZXJzcGVjdGl2ZU9wdGlvbi5sZW5ndGggPiAwIHx8IC8vIHByZXZpZXdEcmFmdHMgd2FzIHJlbmFtZWQgdG8gZHJhZnRzLCBidXQga2VlcCBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgIHBlcnNwZWN0aXZlT3B0aW9uID09PSBcInByZXZpZXdEcmFmdHNcIiB8fCBwZXJzcGVjdGl2ZU9wdGlvbiA9PT0gXCJkcmFmdHNcIikgJiYgdXNlQ2RuICYmICh1c2VDZG4gPSAhMSwgcHJpbnRDZG5QcmV2aWV3RHJhZnRzV2FybmluZygpKSksIG9wdGlvbnMubGFzdExpdmVFdmVudElkICYmIChvcHRpb25zLnF1ZXJ5ID0geyAuLi5vcHRpb25zLnF1ZXJ5LCBsYXN0TGl2ZUV2ZW50SWQ6IG9wdGlvbnMubGFzdExpdmVFdmVudElkIH0pLCBvcHRpb25zLnJldHVyblF1ZXJ5ID09PSAhMSAmJiAob3B0aW9ucy5xdWVyeSA9IHsgcmV0dXJuUXVlcnk6IFwiZmFsc2VcIiwgLi4ub3B0aW9ucy5xdWVyeSB9KSwgdXNlQ2RuICYmIG9wdGlvbnMuY2FjaGVNb2RlID09IFwibm9TdGFsZVwiICYmIChvcHRpb25zLnF1ZXJ5ID0geyBjYWNoZU1vZGU6IFwibm9TdGFsZVwiLCAuLi5vcHRpb25zLnF1ZXJ5IH0pO1xuICB9XG4gIGNvbnN0IHJlcU9wdGlvbnMgPSByZXF1ZXN0T3B0aW9ucyhcbiAgICBjb25maWcsXG4gICAgT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgICAgdXJsOiBfZ2V0VXJsKGNsaWVudCwgdXJpLCB1c2VDZG4pXG4gICAgfSlcbiAgKSwgcmVxdWVzdCA9IG5ldyBPYnNlcnZhYmxlKFxuICAgIChzdWJzY3JpYmVyKSA9PiBodHRwUmVxdWVzdChyZXFPcHRpb25zLCBjb25maWcucmVxdWVzdGVyKS5zdWJzY3JpYmUoc3Vic2NyaWJlcilcbiAgKTtcbiAgcmV0dXJuIG9wdGlvbnMuc2lnbmFsID8gcmVxdWVzdC5waXBlKF93aXRoQWJvcnRTaWduYWwob3B0aW9ucy5zaWduYWwpKSA6IHJlcXVlc3Q7XG59XG5mdW5jdGlvbiBfcmVxdWVzdChjbGllbnQsIGh0dHBSZXF1ZXN0LCBvcHRpb25zKSB7XG4gIHJldHVybiBfcmVxdWVzdE9ic2VydmFibGUoY2xpZW50LCBodHRwUmVxdWVzdCwgb3B0aW9ucykucGlwZShcbiAgICBmaWx0ZXIoKGV2ZW50KSA9PiBldmVudC50eXBlID09PSBcInJlc3BvbnNlXCIpLFxuICAgIG1hcCgoZXZlbnQpID0+IGV2ZW50LmJvZHkpXG4gICk7XG59XG5mdW5jdGlvbiBfZ2V0RGF0YVVybChjbGllbnQsIG9wZXJhdGlvbiwgcGF0aCkge1xuICBjb25zdCBjb25maWcgPSBjbGllbnQuY29uZmlnKCksIGNhdGFsb2cgPSBoYXNEYXRhc2V0KGNvbmZpZyksIGJhc2VVcmkgPSBgLyR7b3BlcmF0aW9ufS8ke2NhdGFsb2d9YDtcbiAgcmV0dXJuIGAvZGF0YSR7cGF0aCA/IGAke2Jhc2VVcml9LyR7cGF0aH1gIDogYmFzZVVyaX1gLnJlcGxhY2UoL1xcLygkfFxcPykvLCBcIiQxXCIpO1xufVxuZnVuY3Rpb24gX2dldFVybChjbGllbnQsIHVyaSwgY2FuVXNlQ2RuID0gITEpIHtcbiAgY29uc3QgeyB1cmwsIGNkblVybCB9ID0gY2xpZW50LmNvbmZpZygpO1xuICByZXR1cm4gYCR7Y2FuVXNlQ2RuID8gY2RuVXJsIDogdXJsfS8ke3VyaS5yZXBsYWNlKC9eXFwvLywgXCJcIil9YDtcbn1cbmZ1bmN0aW9uIF93aXRoQWJvcnRTaWduYWwoc2lnbmFsKSB7XG4gIHJldHVybiAoaW5wdXQpID0+IG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcikgPT4ge1xuICAgIGNvbnN0IGFib3J0ID0gKCkgPT4gb2JzZXJ2ZXIuZXJyb3IoX2NyZWF0ZUFib3J0RXJyb3Ioc2lnbmFsKSk7XG4gICAgaWYgKHNpZ25hbCAmJiBzaWduYWwuYWJvcnRlZCkge1xuICAgICAgYWJvcnQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gaW5wdXQuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgICByZXR1cm4gc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydCksICgpID0+IHtcbiAgICAgIHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnQpLCBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9KTtcbn1cbmNvbnN0IGlzRG9tRXhjZXB0aW9uU3VwcG9ydGVkID0gISFnbG9iYWxUaGlzLkRPTUV4Y2VwdGlvbjtcbmZ1bmN0aW9uIF9jcmVhdGVBYm9ydEVycm9yKHNpZ25hbCkge1xuICBpZiAoaXNEb21FeGNlcHRpb25TdXBwb3J0ZWQpXG4gICAgcmV0dXJuIG5ldyBET01FeGNlcHRpb24oc2lnbmFsPy5yZWFzb24gPz8gXCJUaGUgb3BlcmF0aW9uIHdhcyBhYm9ydGVkLlwiLCBcIkFib3J0RXJyb3JcIik7XG4gIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKHNpZ25hbD8ucmVhc29uID8/IFwiVGhlIG9wZXJhdGlvbiB3YXMgYWJvcnRlZC5cIik7XG4gIHJldHVybiBlcnJvci5uYW1lID0gXCJBYm9ydEVycm9yXCIsIGVycm9yO1xufVxuY2xhc3MgT2JzZXJ2YWJsZUFzc2V0c0NsaWVudCB7XG4gICNjbGllbnQ7XG4gICNodHRwUmVxdWVzdDtcbiAgY29uc3RydWN0b3IoY2xpZW50LCBodHRwUmVxdWVzdCkge1xuICAgIHRoaXMuI2NsaWVudCA9IGNsaWVudCwgdGhpcy4jaHR0cFJlcXVlc3QgPSBodHRwUmVxdWVzdDtcbiAgfVxuICB1cGxvYWQoYXNzZXRUeXBlLCBib2R5LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIF91cGxvYWQodGhpcy4jY2xpZW50LCB0aGlzLiNodHRwUmVxdWVzdCwgYXNzZXRUeXBlLCBib2R5LCBvcHRpb25zKTtcbiAgfVxufVxuY2xhc3MgQXNzZXRzQ2xpZW50IHtcbiAgI2NsaWVudDtcbiAgI2h0dHBSZXF1ZXN0O1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIGh0dHBSZXF1ZXN0KSB7XG4gICAgdGhpcy4jY2xpZW50ID0gY2xpZW50LCB0aGlzLiNodHRwUmVxdWVzdCA9IGh0dHBSZXF1ZXN0O1xuICB9XG4gIHVwbG9hZChhc3NldFR5cGUsIGJvZHksIG9wdGlvbnMpIHtcbiAgICBjb25zdCBvYnNlcnZhYmxlMiA9IF91cGxvYWQodGhpcy4jY2xpZW50LCB0aGlzLiNodHRwUmVxdWVzdCwgYXNzZXRUeXBlLCBib2R5LCBvcHRpb25zKTtcbiAgICByZXR1cm4gbGFzdFZhbHVlRnJvbShcbiAgICAgIG9ic2VydmFibGUyLnBpcGUoXG4gICAgICAgIGZpbHRlcigoZXZlbnQpID0+IGV2ZW50LnR5cGUgPT09IFwicmVzcG9uc2VcIiksXG4gICAgICAgIG1hcChcbiAgICAgICAgICAoZXZlbnQpID0+IGV2ZW50LmJvZHkuZG9jdW1lbnRcbiAgICAgICAgKVxuICAgICAgKVxuICAgICk7XG4gIH1cbn1cbmZ1bmN0aW9uIF91cGxvYWQoY2xpZW50LCBodHRwUmVxdWVzdCwgYXNzZXRUeXBlLCBib2R5LCBvcHRzID0ge30pIHtcbiAgdmFsaWRhdGVBc3NldFR5cGUoYXNzZXRUeXBlKTtcbiAgbGV0IG1ldGEgPSBvcHRzLmV4dHJhY3QgfHwgdm9pZCAwO1xuICBtZXRhICYmICFtZXRhLmxlbmd0aCAmJiAobWV0YSA9IFtcIm5vbmVcIl0pO1xuICBjb25zdCBkYXRhc2V0MiA9IGhhc0RhdGFzZXQoY2xpZW50LmNvbmZpZygpKSwgYXNzZXRFbmRwb2ludCA9IGFzc2V0VHlwZSA9PT0gXCJpbWFnZVwiID8gXCJpbWFnZXNcIiA6IFwiZmlsZXNcIiwgb3B0aW9ucyA9IG9wdGlvbnNGcm9tRmlsZShvcHRzLCBib2R5KSwgeyB0YWcsIGxhYmVsLCB0aXRsZSwgZGVzY3JpcHRpb24sIGNyZWRpdExpbmUsIGZpbGVuYW1lLCBzb3VyY2UgfSA9IG9wdGlvbnMsIHF1ZXJ5ID0ge1xuICAgIGxhYmVsLFxuICAgIHRpdGxlLFxuICAgIGRlc2NyaXB0aW9uLFxuICAgIGZpbGVuYW1lLFxuICAgIG1ldGEsXG4gICAgY3JlZGl0TGluZVxuICB9O1xuICByZXR1cm4gc291cmNlICYmIChxdWVyeS5zb3VyY2VJZCA9IHNvdXJjZS5pZCwgcXVlcnkuc291cmNlTmFtZSA9IHNvdXJjZS5uYW1lLCBxdWVyeS5zb3VyY2VVcmwgPSBzb3VyY2UudXJsKSwgX3JlcXVlc3RPYnNlcnZhYmxlKGNsaWVudCwgaHR0cFJlcXVlc3QsIHtcbiAgICB0YWcsXG4gICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICB0aW1lb3V0OiBvcHRpb25zLnRpbWVvdXQgfHwgMCxcbiAgICB1cmk6IGAvYXNzZXRzLyR7YXNzZXRFbmRwb2ludH0vJHtkYXRhc2V0Mn1gLFxuICAgIGhlYWRlcnM6IG9wdGlvbnMuY29udGVudFR5cGUgPyB7IFwiQ29udGVudC1UeXBlXCI6IG9wdGlvbnMuY29udGVudFR5cGUgfSA6IHt9LFxuICAgIHF1ZXJ5LFxuICAgIGJvZHlcbiAgfSk7XG59XG5mdW5jdGlvbiBvcHRpb25zRnJvbUZpbGUob3B0cywgZmlsZSkge1xuICByZXR1cm4gdHlwZW9mIEZpbGUgPiBcInVcIiB8fCAhKGZpbGUgaW5zdGFuY2VvZiBGaWxlKSA/IG9wdHMgOiBPYmplY3QuYXNzaWduKFxuICAgIHtcbiAgICAgIGZpbGVuYW1lOiBvcHRzLnByZXNlcnZlRmlsZW5hbWUgPT09ICExID8gdm9pZCAwIDogZmlsZS5uYW1lLFxuICAgICAgY29udGVudFR5cGU6IGZpbGUudHlwZVxuICAgIH0sXG4gICAgb3B0c1xuICApO1xufVxudmFyIGRlZmF1bHRzID0gKG9iaiwgZGVmYXVsdHMyKSA9PiBPYmplY3Qua2V5cyhkZWZhdWx0czIpLmNvbmNhdChPYmplY3Qua2V5cyhvYmopKS5yZWR1Y2UoKHRhcmdldCwgcHJvcCkgPT4gKHRhcmdldFtwcm9wXSA9IHR5cGVvZiBvYmpbcHJvcF0gPiBcInVcIiA/IGRlZmF1bHRzMltwcm9wXSA6IG9ialtwcm9wXSwgdGFyZ2V0KSwge30pO1xuY29uc3QgcGljayA9IChvYmosIHByb3BzKSA9PiBwcm9wcy5yZWR1Y2UoKHNlbGVjdGlvbiwgcHJvcCkgPT4gKHR5cGVvZiBvYmpbcHJvcF0gPiBcInVcIiB8fCAoc2VsZWN0aW9uW3Byb3BdID0gb2JqW3Byb3BdKSwgc2VsZWN0aW9uKSwge30pLCBldmVudFNvdXJjZVBvbHlmaWxsID0gZGVmZXIoKCkgPT4gaW1wb3J0KFwiQHNhbml0eS9ldmVudHNvdXJjZVwiKSkucGlwZShcbiAgbWFwKCh7IGRlZmF1bHQ6IEV2ZW50U291cmNlMiB9KSA9PiBFdmVudFNvdXJjZTIpLFxuICBzaGFyZVJlcGxheSgxKVxuKTtcbmZ1bmN0aW9uIHJlY29ubmVjdE9uQ29ubmVjdGlvbkZhaWx1cmUoKSB7XG4gIHJldHVybiBmdW5jdGlvbihzb3VyY2UpIHtcbiAgICByZXR1cm4gc291cmNlLnBpcGUoXG4gICAgICBjYXRjaEVycm9yKChlcnIsIGNhdWdodCkgPT4gZXJyIGluc3RhbmNlb2YgQ29ubmVjdGlvbkZhaWxlZEVycm9yID8gY29uY2F0KG9mKHsgdHlwZTogXCJyZWNvbm5lY3RcIiB9KSwgdGltZXIoMWUzKS5waXBlKG1lcmdlTWFwKCgpID0+IGNhdWdodCkpKSA6IHRocm93RXJyb3IoKCkgPT4gZXJyKSlcbiAgICApO1xuICB9O1xufVxuY29uc3QgTUFYX1VSTF9MRU5HVEggPSAxNDgwMCwgcG9zc2libGVPcHRpb25zID0gW1xuICBcImluY2x1ZGVQcmV2aW91c1JldmlzaW9uXCIsXG4gIFwiaW5jbHVkZVJlc3VsdFwiLFxuICBcImluY2x1ZGVNdXRhdGlvbnNcIixcbiAgXCJpbmNsdWRlQWxsVmVyc2lvbnNcIixcbiAgXCJ2aXNpYmlsaXR5XCIsXG4gIFwiZWZmZWN0Rm9ybWF0XCIsXG4gIFwidGFnXCJcbl0sIGRlZmF1bHRPcHRpb25zID0ge1xuICBpbmNsdWRlUmVzdWx0OiAhMFxufTtcbmZ1bmN0aW9uIF9saXN0ZW4ocXVlcnksIHBhcmFtcywgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHsgdXJsLCB0b2tlbiwgd2l0aENyZWRlbnRpYWxzLCByZXF1ZXN0VGFnUHJlZml4IH0gPSB0aGlzLmNvbmZpZygpLCB0YWcgPSBvcHRzLnRhZyAmJiByZXF1ZXN0VGFnUHJlZml4ID8gW3JlcXVlc3RUYWdQcmVmaXgsIG9wdHMudGFnXS5qb2luKFwiLlwiKSA6IG9wdHMudGFnLCBvcHRpb25zID0geyAuLi5kZWZhdWx0cyhvcHRzLCBkZWZhdWx0T3B0aW9ucyksIHRhZyB9LCBsaXN0ZW5PcHRzID0gcGljayhvcHRpb25zLCBwb3NzaWJsZU9wdGlvbnMpLCBxcyA9IGVuY29kZVF1ZXJ5U3RyaW5nKHsgcXVlcnksIHBhcmFtcywgb3B0aW9uczogeyB0YWcsIC4uLmxpc3Rlbk9wdHMgfSB9KSwgdXJpID0gYCR7dXJsfSR7X2dldERhdGFVcmwodGhpcywgXCJsaXN0ZW5cIiwgcXMpfWA7XG4gIGlmICh1cmkubGVuZ3RoID4gTUFYX1VSTF9MRU5HVEgpXG4gICAgcmV0dXJuIHRocm93RXJyb3IoKCkgPT4gbmV3IEVycm9yKFwiUXVlcnkgdG9vIGxhcmdlIGZvciBsaXN0ZW5lclwiKSk7XG4gIGNvbnN0IGxpc3RlbkZvciA9IG9wdGlvbnMuZXZlbnRzID8gb3B0aW9ucy5ldmVudHMgOiBbXCJtdXRhdGlvblwiXSwgZXNPcHRpb25zID0ge307XG4gIHJldHVybiB3aXRoQ3JlZGVudGlhbHMgJiYgKGVzT3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgPSAhMCksIHRva2VuICYmIChlc09wdGlvbnMuaGVhZGVycyA9IHtcbiAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dG9rZW59YFxuICB9KSwgY29ubmVjdEV2ZW50U291cmNlKCgpID0+IChcbiAgICAvLyB1c2UgcG9seWZpbGwgaWYgdGhlcmUgaXMgbm8gZ2xvYmFsIEV2ZW50U291cmNlIG9yIGlmIHdlIG5lZWQgdG8gc2V0IGhlYWRlcnNcbiAgICAodHlwZW9mIEV2ZW50U291cmNlID4gXCJ1XCIgfHwgZXNPcHRpb25zLmhlYWRlcnMgPyBldmVudFNvdXJjZVBvbHlmaWxsIDogb2YoRXZlbnRTb3VyY2UpKS5waXBlKG1hcCgoRXZlbnRTb3VyY2UyKSA9PiBuZXcgRXZlbnRTb3VyY2UyKHVyaSwgZXNPcHRpb25zKSkpXG4gICksIGxpc3RlbkZvcikucGlwZShcbiAgICByZWNvbm5lY3RPbkNvbm5lY3Rpb25GYWlsdXJlKCksXG4gICAgZmlsdGVyKChldmVudCkgPT4gbGlzdGVuRm9yLmluY2x1ZGVzKGV2ZW50LnR5cGUpKSxcbiAgICBtYXAoXG4gICAgICAoZXZlbnQpID0+ICh7XG4gICAgICAgIHR5cGU6IGV2ZW50LnR5cGUsXG4gICAgICAgIC4uLlwiZGF0YVwiIGluIGV2ZW50ID8gZXZlbnQuZGF0YSA6IHt9XG4gICAgICB9KVxuICAgIClcbiAgKTtcbn1cbmZ1bmN0aW9uIHNoYXJlUmVwbGF5TGF0ZXN0KGNvbmZpZ09yUHJlZGljYXRlLCBjb25maWcpIHtcbiAgcmV0dXJuIF9zaGFyZVJlcGxheUxhdGVzdChcbiAgICB0eXBlb2YgY29uZmlnT3JQcmVkaWNhdGUgPT0gXCJmdW5jdGlvblwiID8geyBwcmVkaWNhdGU6IGNvbmZpZ09yUHJlZGljYXRlLCAuLi5jb25maWcgfSA6IGNvbmZpZ09yUHJlZGljYXRlXG4gICk7XG59XG5mdW5jdGlvbiBfc2hhcmVSZXBsYXlMYXRlc3QoY29uZmlnKSB7XG4gIHJldHVybiAoc291cmNlKSA9PiB7XG4gICAgbGV0IGxhdGVzdCwgZW1pdHRlZCA9ICExO1xuICAgIGNvbnN0IHsgcHJlZGljYXRlLCAuLi5zaGFyZUNvbmZpZyB9ID0gY29uZmlnLCB3cmFwcGVkID0gc291cmNlLnBpcGUoXG4gICAgICB0YXAoKHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbmZpZy5wcmVkaWNhdGUodmFsdWUpICYmIChlbWl0dGVkID0gITAsIGxhdGVzdCA9IHZhbHVlKTtcbiAgICAgIH0pLFxuICAgICAgZmluYWxpemUoKCkgPT4ge1xuICAgICAgICBlbWl0dGVkID0gITEsIGxhdGVzdCA9IHZvaWQgMDtcbiAgICAgIH0pLFxuICAgICAgc2hhcmUoc2hhcmVDb25maWcpXG4gICAgKSwgZW1pdExhdGVzdCA9IG5ldyBPYnNlcnZhYmxlKChzdWJzY3JpYmVyKSA9PiB7XG4gICAgICBlbWl0dGVkICYmIHN1YnNjcmliZXIubmV4dChcbiAgICAgICAgLy8gdGhpcyBjYXN0IGlzIHNhZmUgYmVjYXVzZSBvZiB0aGUgZW1pdHRlZCBjaGVjayB3aGljaCBhc3NlcnRzIHRoYXQgd2UgZ290IFQgZnJvbSB0aGUgc291cmNlXG4gICAgICAgIGxhdGVzdFxuICAgICAgKSwgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiBtZXJnZSh3cmFwcGVkLCBlbWl0TGF0ZXN0KTtcbiAgfTtcbn1cbmNvbnN0IHJlcXVpcmVkQXBpVmVyc2lvbiA9IFwiMjAyMS0wMy0yNVwiO1xuY2xhc3MgTGl2ZUNsaWVudCB7XG4gICNjbGllbnQ7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCkge1xuICAgIHRoaXMuI2NsaWVudCA9IGNsaWVudDtcbiAgfVxuICAvKipcbiAgICogUmVxdWlyZXMgYGFwaVZlcnNpb25gIHRvIGJlIGAyMDIxLTAzLTI1YCBvciBsYXRlci5cbiAgICovXG4gIGV2ZW50cyh7XG4gICAgaW5jbHVkZURyYWZ0cyA9ICExLFxuICAgIHRhZzogX3RhZ1xuICB9ID0ge30pIHtcbiAgICBjb25zdCB7XG4gICAgICBwcm9qZWN0SWQsXG4gICAgICBhcGlWZXJzaW9uOiBfYXBpVmVyc2lvbixcbiAgICAgIHRva2VuLFxuICAgICAgd2l0aENyZWRlbnRpYWxzLFxuICAgICAgcmVxdWVzdFRhZ1ByZWZpeFxuICAgIH0gPSB0aGlzLiNjbGllbnQuY29uZmlnKCksIGFwaVZlcnNpb24gPSBfYXBpVmVyc2lvbi5yZXBsYWNlKC9edi8sIFwiXCIpO1xuICAgIGlmIChhcGlWZXJzaW9uICE9PSBcIlhcIiAmJiBhcGlWZXJzaW9uIDwgcmVxdWlyZWRBcGlWZXJzaW9uKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVGhlIGxpdmUgZXZlbnRzIEFQSSByZXF1aXJlcyBBUEkgdmVyc2lvbiAke3JlcXVpcmVkQXBpVmVyc2lvbn0gb3IgbGF0ZXIuIFRoZSBjdXJyZW50IEFQSSB2ZXJzaW9uIGlzICR7YXBpVmVyc2lvbn0uIFBsZWFzZSB1cGRhdGUgeW91ciBBUEkgdmVyc2lvbiB0byB1c2UgdGhpcyBmZWF0dXJlLmBcbiAgICAgICk7XG4gICAgaWYgKGluY2x1ZGVEcmFmdHMgJiYgIXRva2VuICYmICF3aXRoQ3JlZGVudGlhbHMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiVGhlIGxpdmUgZXZlbnRzIEFQSSByZXF1aXJlcyBhIHRva2VuIG9yIHdpdGhDcmVkZW50aWFscyB3aGVuICdpbmNsdWRlRHJhZnRzOiB0cnVlJy4gUGxlYXNlIHVwZGF0ZSB5b3VyIGNsaWVudCBjb25maWd1cmF0aW9uLiBUaGUgdG9rZW4gc2hvdWxkIGhhdmUgdGhlIGxvd2VzdCBwb3NzaWJsZSBhY2Nlc3Mgcm9sZS5cIlxuICAgICAgKTtcbiAgICBjb25zdCBwYXRoID0gX2dldERhdGFVcmwodGhpcy4jY2xpZW50LCBcImxpdmUvZXZlbnRzXCIpLCB1cmwgPSBuZXcgVVJMKHRoaXMuI2NsaWVudC5nZXRVcmwocGF0aCwgITEpKSwgdGFnID0gX3RhZyAmJiByZXF1ZXN0VGFnUHJlZml4ID8gW3JlcXVlc3RUYWdQcmVmaXgsIF90YWddLmpvaW4oXCIuXCIpIDogX3RhZztcbiAgICB0YWcgJiYgdXJsLnNlYXJjaFBhcmFtcy5zZXQoXCJ0YWdcIiwgdGFnKSwgaW5jbHVkZURyYWZ0cyAmJiB1cmwuc2VhcmNoUGFyYW1zLnNldChcImluY2x1ZGVEcmFmdHNcIiwgXCJ0cnVlXCIpO1xuICAgIGNvbnN0IGVzT3B0aW9ucyA9IHt9O1xuICAgIGluY2x1ZGVEcmFmdHMgJiYgdG9rZW4gJiYgKGVzT3B0aW9ucy5oZWFkZXJzID0ge1xuICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3Rva2VufWBcbiAgICB9KSwgaW5jbHVkZURyYWZ0cyAmJiB3aXRoQ3JlZGVudGlhbHMgJiYgKGVzT3B0aW9ucy53aXRoQ3JlZGVudGlhbHMgPSAhMCk7XG4gICAgY29uc3Qga2V5ID0gYCR7dXJsLmhyZWZ9Ojoke0pTT04uc3RyaW5naWZ5KGVzT3B0aW9ucyl9YCwgZXhpc3RpbmcgPSBldmVudHNDYWNoZS5nZXQoa2V5KTtcbiAgICBpZiAoZXhpc3RpbmcpXG4gICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgY29uc3QgZXZlbnRzID0gY29ubmVjdEV2ZW50U291cmNlKCgpID0+IChcbiAgICAgIC8vIHVzZSBwb2x5ZmlsbCBpZiB0aGVyZSBpcyBubyBnbG9iYWwgRXZlbnRTb3VyY2Ugb3IgaWYgd2UgbmVlZCB0byBzZXQgaGVhZGVyc1xuICAgICAgKHR5cGVvZiBFdmVudFNvdXJjZSA+IFwidVwiIHx8IGVzT3B0aW9ucy5oZWFkZXJzID8gZXZlbnRTb3VyY2VQb2x5ZmlsbCA6IG9mKEV2ZW50U291cmNlKSkucGlwZShtYXAoKEV2ZW50U291cmNlMikgPT4gbmV3IEV2ZW50U291cmNlMih1cmwuaHJlZiwgZXNPcHRpb25zKSkpXG4gICAgKSwgW1xuICAgICAgXCJtZXNzYWdlXCIsXG4gICAgICBcInJlc3RhcnRcIixcbiAgICAgIFwid2VsY29tZVwiLFxuICAgICAgXCJyZWNvbm5lY3RcIlxuICAgIF0pLnBpcGUoXG4gICAgICByZWNvbm5lY3RPbkNvbm5lY3Rpb25GYWlsdXJlKCksXG4gICAgICBtYXAoKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC50eXBlID09PSBcIm1lc3NhZ2VcIikge1xuICAgICAgICAgIGNvbnN0IHsgZGF0YSwgLi4ucmVzdCB9ID0gZXZlbnQ7XG4gICAgICAgICAgcmV0dXJuIHsgLi4ucmVzdCwgdGFnczogZGF0YS50YWdzIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgICAgfSlcbiAgICApLCBjaGVja0NvcnMgPSBmZXRjaE9ic2VydmFibGUodXJsLCB7XG4gICAgICBtZXRob2Q6IFwiT1BUSU9OU1wiLFxuICAgICAgbW9kZTogXCJjb3JzXCIsXG4gICAgICBjcmVkZW50aWFsczogZXNPcHRpb25zLndpdGhDcmVkZW50aWFscyA/IFwiaW5jbHVkZVwiIDogXCJvbWl0XCIsXG4gICAgICBoZWFkZXJzOiBlc09wdGlvbnMuaGVhZGVyc1xuICAgIH0pLnBpcGUoXG4gICAgICBtZXJnZU1hcCgoKSA9PiBFTVBUWSksXG4gICAgICBjYXRjaEVycm9yKCgpID0+IHtcbiAgICAgICAgdGhyb3cgbmV3IENvcnNPcmlnaW5FcnJvcih7IHByb2plY3RJZCB9KTtcbiAgICAgIH0pXG4gICAgKSwgb2JzZXJ2YWJsZTIgPSBjb25jYXQoY2hlY2tDb3JzLCBldmVudHMpLnBpcGUoXG4gICAgICBmaW5hbGl6ZSQxKCgpID0+IGV2ZW50c0NhY2hlLmRlbGV0ZShrZXkpKSxcbiAgICAgIHNoYXJlUmVwbGF5TGF0ZXN0KHtcbiAgICAgICAgcHJlZGljYXRlOiAoZXZlbnQpID0+IGV2ZW50LnR5cGUgPT09IFwid2VsY29tZVwiXG4gICAgICB9KVxuICAgICk7XG4gICAgcmV0dXJuIGV2ZW50c0NhY2hlLnNldChrZXksIG9ic2VydmFibGUyKSwgb2JzZXJ2YWJsZTI7XG4gIH1cbn1cbmZ1bmN0aW9uIGZldGNoT2JzZXJ2YWJsZSh1cmwsIGluaXQpIHtcbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcikgPT4ge1xuICAgIGNvbnN0IGNvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCksIHNpZ25hbCA9IGNvbnRyb2xsZXIuc2lnbmFsO1xuICAgIHJldHVybiBmZXRjaCh1cmwsIHsgLi4uaW5pdCwgc2lnbmFsOiBjb250cm9sbGVyLnNpZ25hbCB9KS50aGVuKFxuICAgICAgKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIG9ic2VydmVyLm5leHQocmVzcG9uc2UpLCBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgfSxcbiAgICAgIChlcnIpID0+IHtcbiAgICAgICAgc2lnbmFsLmFib3J0ZWQgfHwgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICApLCAoKSA9PiBjb250cm9sbGVyLmFib3J0KCk7XG4gIH0pO1xufVxuY29uc3QgZXZlbnRzQ2FjaGUgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuY2xhc3MgT2JzZXJ2YWJsZURhdGFzZXRzQ2xpZW50IHtcbiAgI2NsaWVudDtcbiAgI2h0dHBSZXF1ZXN0O1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIGh0dHBSZXF1ZXN0KSB7XG4gICAgdGhpcy4jY2xpZW50ID0gY2xpZW50LCB0aGlzLiNodHRwUmVxdWVzdCA9IGh0dHBSZXF1ZXN0O1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgZGF0YXNldCB3aXRoIHRoZSBnaXZlbiBuYW1lXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIC0gTmFtZSBvZiB0aGUgZGF0YXNldCB0byBjcmVhdGVcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgZGF0YXNldFxuICAgKi9cbiAgY3JlYXRlKG5hbWUyLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIF9tb2RpZnkodGhpcy4jY2xpZW50LCB0aGlzLiNodHRwUmVxdWVzdCwgXCJQVVRcIiwgbmFtZTIsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBFZGl0IGEgZGF0YXNldCB3aXRoIHRoZSBnaXZlbiBuYW1lXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIC0gTmFtZSBvZiB0aGUgZGF0YXNldCB0byBlZGl0XG4gICAqIEBwYXJhbSBvcHRpb25zIC0gTmV3IG9wdGlvbnMgZm9yIHRoZSBkYXRhc2V0XG4gICAqL1xuICBlZGl0KG5hbWUyLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIF9tb2RpZnkodGhpcy4jY2xpZW50LCB0aGlzLiNodHRwUmVxdWVzdCwgXCJQQVRDSFwiLCBuYW1lMiwgb3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhIGRhdGFzZXQgd2l0aCB0aGUgZ2l2ZW4gbmFtZVxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSAtIE5hbWUgb2YgdGhlIGRhdGFzZXQgdG8gZGVsZXRlXG4gICAqL1xuICBkZWxldGUobmFtZTIpIHtcbiAgICByZXR1cm4gX21vZGlmeSh0aGlzLiNjbGllbnQsIHRoaXMuI2h0dHBSZXF1ZXN0LCBcIkRFTEVURVwiLCBuYW1lMik7XG4gIH1cbiAgLyoqXG4gICAqIEZldGNoIGEgbGlzdCBvZiBkYXRhc2V0cyBmb3IgdGhlIGNvbmZpZ3VyZWQgcHJvamVjdFxuICAgKi9cbiAgbGlzdCgpIHtcbiAgICByZXR1cm4gX3JlcXVlc3QodGhpcy4jY2xpZW50LCB0aGlzLiNodHRwUmVxdWVzdCwge1xuICAgICAgdXJpOiBcIi9kYXRhc2V0c1wiLFxuICAgICAgdGFnOiBudWxsXG4gICAgfSk7XG4gIH1cbn1cbmNsYXNzIERhdGFzZXRzQ2xpZW50IHtcbiAgI2NsaWVudDtcbiAgI2h0dHBSZXF1ZXN0O1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIGh0dHBSZXF1ZXN0KSB7XG4gICAgdGhpcy4jY2xpZW50ID0gY2xpZW50LCB0aGlzLiNodHRwUmVxdWVzdCA9IGh0dHBSZXF1ZXN0O1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgZGF0YXNldCB3aXRoIHRoZSBnaXZlbiBuYW1lXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIC0gTmFtZSBvZiB0aGUgZGF0YXNldCB0byBjcmVhdGVcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBPcHRpb25zIGZvciB0aGUgZGF0YXNldFxuICAgKi9cbiAgY3JlYXRlKG5hbWUyLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGxhc3RWYWx1ZUZyb20oXG4gICAgICBfbW9kaWZ5KHRoaXMuI2NsaWVudCwgdGhpcy4jaHR0cFJlcXVlc3QsIFwiUFVUXCIsIG5hbWUyLCBvcHRpb25zKVxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIEVkaXQgYSBkYXRhc2V0IHdpdGggdGhlIGdpdmVuIG5hbWVcbiAgICpcbiAgICogQHBhcmFtIG5hbWUgLSBOYW1lIG9mIHRoZSBkYXRhc2V0IHRvIGVkaXRcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBOZXcgb3B0aW9ucyBmb3IgdGhlIGRhdGFzZXRcbiAgICovXG4gIGVkaXQobmFtZTIsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbGFzdFZhbHVlRnJvbShcbiAgICAgIF9tb2RpZnkodGhpcy4jY2xpZW50LCB0aGlzLiNodHRwUmVxdWVzdCwgXCJQQVRDSFwiLCBuYW1lMiwgb3B0aW9ucylcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgYSBkYXRhc2V0IHdpdGggdGhlIGdpdmVuIG5hbWVcbiAgICpcbiAgICogQHBhcmFtIG5hbWUgLSBOYW1lIG9mIHRoZSBkYXRhc2V0IHRvIGRlbGV0ZVxuICAgKi9cbiAgZGVsZXRlKG5hbWUyKSB7XG4gICAgcmV0dXJuIGxhc3RWYWx1ZUZyb20oX21vZGlmeSh0aGlzLiNjbGllbnQsIHRoaXMuI2h0dHBSZXF1ZXN0LCBcIkRFTEVURVwiLCBuYW1lMikpO1xuICB9XG4gIC8qKlxuICAgKiBGZXRjaCBhIGxpc3Qgb2YgZGF0YXNldHMgZm9yIHRoZSBjb25maWd1cmVkIHByb2plY3RcbiAgICovXG4gIGxpc3QoKSB7XG4gICAgcmV0dXJuIGxhc3RWYWx1ZUZyb20oXG4gICAgICBfcmVxdWVzdCh0aGlzLiNjbGllbnQsIHRoaXMuI2h0dHBSZXF1ZXN0LCB7IHVyaTogXCIvZGF0YXNldHNcIiwgdGFnOiBudWxsIH0pXG4gICAgKTtcbiAgfVxufVxuZnVuY3Rpb24gX21vZGlmeShjbGllbnQsIGh0dHBSZXF1ZXN0LCBtZXRob2QsIG5hbWUyLCBvcHRpb25zKSB7XG4gIHJldHVybiBkYXRhc2V0KG5hbWUyKSwgX3JlcXVlc3QoY2xpZW50LCBodHRwUmVxdWVzdCwge1xuICAgIG1ldGhvZCxcbiAgICB1cmk6IGAvZGF0YXNldHMvJHtuYW1lMn1gLFxuICAgIGJvZHk6IG9wdGlvbnMsXG4gICAgdGFnOiBudWxsXG4gIH0pO1xufVxuY2xhc3MgT2JzZXJ2YWJsZVByb2plY3RzQ2xpZW50IHtcbiAgI2NsaWVudDtcbiAgI2h0dHBSZXF1ZXN0O1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIGh0dHBSZXF1ZXN0KSB7XG4gICAgdGhpcy4jY2xpZW50ID0gY2xpZW50LCB0aGlzLiNodHRwUmVxdWVzdCA9IGh0dHBSZXF1ZXN0O1xuICB9XG4gIGxpc3Qob3B0aW9ucykge1xuICAgIGNvbnN0IHVyaSA9IG9wdGlvbnM/LmluY2x1ZGVNZW1iZXJzID09PSAhMSA/IFwiL3Byb2plY3RzP2luY2x1ZGVNZW1iZXJzPWZhbHNlXCIgOiBcIi9wcm9qZWN0c1wiO1xuICAgIHJldHVybiBfcmVxdWVzdCh0aGlzLiNjbGllbnQsIHRoaXMuI2h0dHBSZXF1ZXN0LCB7IHVyaSB9KTtcbiAgfVxuICAvKipcbiAgICogRmV0Y2ggYSBwcm9qZWN0IGJ5IHByb2plY3QgSURcbiAgICpcbiAgICogQHBhcmFtIHByb2plY3RJZCAtIElEIG9mIHRoZSBwcm9qZWN0IHRvIGZldGNoXG4gICAqL1xuICBnZXRCeUlkKHByb2plY3RJZCkge1xuICAgIHJldHVybiBfcmVxdWVzdCh0aGlzLiNjbGllbnQsIHRoaXMuI2h0dHBSZXF1ZXN0LCB7IHVyaTogYC9wcm9qZWN0cy8ke3Byb2plY3RJZH1gIH0pO1xuICB9XG59XG5jbGFzcyBQcm9qZWN0c0NsaWVudCB7XG4gICNjbGllbnQ7XG4gICNodHRwUmVxdWVzdDtcbiAgY29uc3RydWN0b3IoY2xpZW50LCBodHRwUmVxdWVzdCkge1xuICAgIHRoaXMuI2NsaWVudCA9IGNsaWVudCwgdGhpcy4jaHR0cFJlcXVlc3QgPSBodHRwUmVxdWVzdDtcbiAgfVxuICBsaXN0KG9wdGlvbnMpIHtcbiAgICBjb25zdCB1cmkgPSBvcHRpb25zPy5pbmNsdWRlTWVtYmVycyA9PT0gITEgPyBcIi9wcm9qZWN0cz9pbmNsdWRlTWVtYmVycz1mYWxzZVwiIDogXCIvcHJvamVjdHNcIjtcbiAgICByZXR1cm4gbGFzdFZhbHVlRnJvbShfcmVxdWVzdCh0aGlzLiNjbGllbnQsIHRoaXMuI2h0dHBSZXF1ZXN0LCB7IHVyaSB9KSk7XG4gIH1cbiAgLyoqXG4gICAqIEZldGNoIGEgcHJvamVjdCBieSBwcm9qZWN0IElEXG4gICAqXG4gICAqIEBwYXJhbSBwcm9qZWN0SWQgLSBJRCBvZiB0aGUgcHJvamVjdCB0byBmZXRjaFxuICAgKi9cbiAgZ2V0QnlJZChwcm9qZWN0SWQpIHtcbiAgICByZXR1cm4gbGFzdFZhbHVlRnJvbShcbiAgICAgIF9yZXF1ZXN0KHRoaXMuI2NsaWVudCwgdGhpcy4jaHR0cFJlcXVlc3QsIHsgdXJpOiBgL3Byb2plY3RzLyR7cHJvamVjdElkfWAgfSlcbiAgICApO1xuICB9XG59XG5jbGFzcyBPYnNlcnZhYmxlVXNlcnNDbGllbnQge1xuICAjY2xpZW50O1xuICAjaHR0cFJlcXVlc3Q7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCwgaHR0cFJlcXVlc3QpIHtcbiAgICB0aGlzLiNjbGllbnQgPSBjbGllbnQsIHRoaXMuI2h0dHBSZXF1ZXN0ID0gaHR0cFJlcXVlc3Q7XG4gIH1cbiAgLyoqXG4gICAqIEZldGNoIGEgdXNlciBieSB1c2VyIElEXG4gICAqXG4gICAqIEBwYXJhbSBpZCAtIFVzZXIgSUQgb2YgdGhlIHVzZXIgdG8gZmV0Y2guIElmIGBtZWAgaXMgcHJvdmlkZWQsIGEgbWluaW1hbCByZXNwb25zZSBpbmNsdWRpbmcgdGhlIHVzZXJzIHJvbGUgaXMgcmV0dXJuZWQuXG4gICAqL1xuICBnZXRCeUlkKGlkKSB7XG4gICAgcmV0dXJuIF9yZXF1ZXN0KFxuICAgICAgdGhpcy4jY2xpZW50LFxuICAgICAgdGhpcy4jaHR0cFJlcXVlc3QsXG4gICAgICB7IHVyaTogYC91c2Vycy8ke2lkfWAgfVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIFVzZXJzQ2xpZW50IHtcbiAgI2NsaWVudDtcbiAgI2h0dHBSZXF1ZXN0O1xuICBjb25zdHJ1Y3RvcihjbGllbnQsIGh0dHBSZXF1ZXN0KSB7XG4gICAgdGhpcy4jY2xpZW50ID0gY2xpZW50LCB0aGlzLiNodHRwUmVxdWVzdCA9IGh0dHBSZXF1ZXN0O1xuICB9XG4gIC8qKlxuICAgKiBGZXRjaCBhIHVzZXIgYnkgdXNlciBJRFxuICAgKlxuICAgKiBAcGFyYW0gaWQgLSBVc2VyIElEIG9mIHRoZSB1c2VyIHRvIGZldGNoLiBJZiBgbWVgIGlzIHByb3ZpZGVkLCBhIG1pbmltYWwgcmVzcG9uc2UgaW5jbHVkaW5nIHRoZSB1c2VycyByb2xlIGlzIHJldHVybmVkLlxuICAgKi9cbiAgZ2V0QnlJZChpZCkge1xuICAgIHJldHVybiBsYXN0VmFsdWVGcm9tKFxuICAgICAgX3JlcXVlc3QodGhpcy4jY2xpZW50LCB0aGlzLiNodHRwUmVxdWVzdCwge1xuICAgICAgICB1cmk6IGAvdXNlcnMvJHtpZH1gXG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbmNsYXNzIE9ic2VydmFibGVTYW5pdHlDbGllbnQge1xuICBhc3NldHM7XG4gIGRhdGFzZXRzO1xuICBsaXZlO1xuICBwcm9qZWN0cztcbiAgdXNlcnM7XG4gIC8qKlxuICAgKiBQcml2YXRlIHByb3BlcnRpZXNcbiAgICovXG4gICNjbGllbnRDb25maWc7XG4gICNodHRwUmVxdWVzdDtcbiAgLyoqXG4gICAqIEluc3RhbmNlIHByb3BlcnRpZXNcbiAgICovXG4gIGxpc3RlbiA9IF9saXN0ZW47XG4gIGNvbnN0cnVjdG9yKGh0dHBSZXF1ZXN0LCBjb25maWcgPSBkZWZhdWx0Q29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcoY29uZmlnKSwgdGhpcy4jaHR0cFJlcXVlc3QgPSBodHRwUmVxdWVzdCwgdGhpcy5hc3NldHMgPSBuZXcgT2JzZXJ2YWJsZUFzc2V0c0NsaWVudCh0aGlzLCB0aGlzLiNodHRwUmVxdWVzdCksIHRoaXMuZGF0YXNldHMgPSBuZXcgT2JzZXJ2YWJsZURhdGFzZXRzQ2xpZW50KHRoaXMsIHRoaXMuI2h0dHBSZXF1ZXN0KSwgdGhpcy5saXZlID0gbmV3IExpdmVDbGllbnQodGhpcyksIHRoaXMucHJvamVjdHMgPSBuZXcgT2JzZXJ2YWJsZVByb2plY3RzQ2xpZW50KHRoaXMsIHRoaXMuI2h0dHBSZXF1ZXN0KSwgdGhpcy51c2VycyA9IG5ldyBPYnNlcnZhYmxlVXNlcnNDbGllbnQodGhpcywgdGhpcy4jaHR0cFJlcXVlc3QpO1xuICB9XG4gIC8qKlxuICAgKiBDbG9uZSB0aGUgY2xpZW50IC0gcmV0dXJucyBhIG5ldyBpbnN0YW5jZVxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlU2FuaXR5Q2xpZW50KHRoaXMuI2h0dHBSZXF1ZXN0LCB0aGlzLmNvbmZpZygpKTtcbiAgfVxuICBjb25maWcobmV3Q29uZmlnKSB7XG4gICAgaWYgKG5ld0NvbmZpZyA9PT0gdm9pZCAwKVxuICAgICAgcmV0dXJuIHsgLi4udGhpcy4jY2xpZW50Q29uZmlnIH07XG4gICAgaWYgKHRoaXMuI2NsaWVudENvbmZpZyAmJiB0aGlzLiNjbGllbnRDb25maWcuYWxsb3dSZWNvbmZpZ3VyZSA9PT0gITEpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwiRXhpc3RpbmcgY2xpZW50IGluc3RhbmNlIGNhbm5vdCBiZSByZWNvbmZpZ3VyZWQgLSB1c2UgYHdpdGhDb25maWcobmV3Q29uZmlnKWAgdG8gcmV0dXJuIGEgbmV3IGNsaWVudFwiXG4gICAgICApO1xuICAgIHJldHVybiB0aGlzLiNjbGllbnRDb25maWcgPSBpbml0Q29uZmlnKG5ld0NvbmZpZywgdGhpcy4jY2xpZW50Q29uZmlnIHx8IHt9KSwgdGhpcztcbiAgfVxuICAvKipcbiAgICogQ2xvbmUgdGhlIGNsaWVudCB3aXRoIGEgbmV3IChwYXJ0aWFsKSBjb25maWd1cmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gbmV3Q29uZmlnIC0gTmV3IGNsaWVudCBjb25maWd1cmF0aW9uIHByb3BlcnRpZXMsIHNoYWxsb3dseSBtZXJnZWQgd2l0aCBleGlzdGluZyBjb25maWd1cmF0aW9uXG4gICAqL1xuICB3aXRoQ29uZmlnKG5ld0NvbmZpZykge1xuICAgIGNvbnN0IHRoaXNDb25maWcgPSB0aGlzLmNvbmZpZygpO1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZVNhbml0eUNsaWVudCh0aGlzLiNodHRwUmVxdWVzdCwge1xuICAgICAgLi4udGhpc0NvbmZpZyxcbiAgICAgIC4uLm5ld0NvbmZpZyxcbiAgICAgIHN0ZWdhOiB7XG4gICAgICAgIC4uLnRoaXNDb25maWcuc3RlZ2EgfHwge30sXG4gICAgICAgIC4uLnR5cGVvZiBuZXdDb25maWc/LnN0ZWdhID09IFwiYm9vbGVhblwiID8geyBlbmFibGVkOiBuZXdDb25maWcuc3RlZ2EgfSA6IG5ld0NvbmZpZz8uc3RlZ2EgfHwge31cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmZXRjaChxdWVyeSwgcGFyYW1zLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIF9mZXRjaChcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLiNodHRwUmVxdWVzdCxcbiAgICAgIHRoaXMuI2NsaWVudENvbmZpZy5zdGVnYSxcbiAgICAgIHF1ZXJ5LFxuICAgICAgcGFyYW1zLFxuICAgICAgb3B0aW9uc1xuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIEZldGNoIGEgc2luZ2xlIGRvY3VtZW50IHdpdGggdGhlIGdpdmVuIElELlxuICAgKlxuICAgKiBAcGFyYW0gaWQgLSBEb2N1bWVudCBJRCB0byBmZXRjaFxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFJlcXVlc3Qgb3B0aW9uc1xuICAgKi9cbiAgZ2V0RG9jdW1lbnQoaWQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gX2dldERvY3VtZW50KHRoaXMsIHRoaXMuI2h0dHBSZXF1ZXN0LCBpZCwgb3B0aW9ucyk7XG4gIH1cbiAgLyoqXG4gICAqIEZldGNoIG11bHRpcGxlIGRvY3VtZW50cyBpbiBvbmUgcmVxdWVzdC5cbiAgICogU2hvdWxkIGJlIHVzZWQgc3BhcmluZ2x5IC0gcGVyZm9ybWluZyBhIHF1ZXJ5IGlzIHVzdWFsbHkgYSBiZXR0ZXIgb3B0aW9uLlxuICAgKiBUaGUgb3JkZXIvcG9zaXRpb24gb2YgZG9jdW1lbnRzIGlzIHByZXNlcnZlZCBiYXNlZCBvbiB0aGUgb3JpZ2luYWwgYXJyYXkgb2YgSURzLlxuICAgKiBJZiBhbnkgb2YgdGhlIGRvY3VtZW50cyBhcmUgbWlzc2luZywgdGhleSB3aWxsIGJlIHJlcGxhY2VkIGJ5IGEgYG51bGxgIGVudHJ5IGluIHRoZSByZXR1cm5lZCBhcnJheVxuICAgKlxuICAgKiBAcGFyYW0gaWRzIC0gRG9jdW1lbnQgSURzIHRvIGZldGNoXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gUmVxdWVzdCBvcHRpb25zXG4gICAqL1xuICBnZXREb2N1bWVudHMoaWRzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIF9nZXREb2N1bWVudHModGhpcywgdGhpcy4jaHR0cFJlcXVlc3QsIGlkcywgb3B0aW9ucyk7XG4gIH1cbiAgY3JlYXRlKGRvY3VtZW50LCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIF9jcmVhdGUodGhpcywgdGhpcy4jaHR0cFJlcXVlc3QsIGRvY3VtZW50LCBcImNyZWF0ZVwiLCBvcHRpb25zKTtcbiAgfVxuICBjcmVhdGVJZk5vdEV4aXN0cyhkb2N1bWVudCwgb3B0aW9ucykge1xuICAgIHJldHVybiBfY3JlYXRlSWZOb3RFeGlzdHModGhpcywgdGhpcy4jaHR0cFJlcXVlc3QsIGRvY3VtZW50LCBvcHRpb25zKTtcbiAgfVxuICBjcmVhdGVPclJlcGxhY2UoZG9jdW1lbnQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gX2NyZWF0ZU9yUmVwbGFjZSh0aGlzLCB0aGlzLiNodHRwUmVxdWVzdCwgZG9jdW1lbnQsIG9wdGlvbnMpO1xuICB9XG4gIGRlbGV0ZShzZWxlY3Rpb24sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gX2RlbGV0ZSh0aGlzLCB0aGlzLiNodHRwUmVxdWVzdCwgc2VsZWN0aW9uLCBvcHRpb25zKTtcbiAgfVxuICBtdXRhdGUob3BlcmF0aW9ucywgb3B0aW9ucykge1xuICAgIHJldHVybiBfbXV0YXRlKHRoaXMsIHRoaXMuI2h0dHBSZXF1ZXN0LCBvcGVyYXRpb25zLCBvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IGJ1aWxkYWJsZSBwYXRjaCBvZiBvcGVyYXRpb25zIHRvIHBlcmZvcm1cbiAgICpcbiAgICogQHBhcmFtIHNlbGVjdGlvbiAtIERvY3VtZW50IElELCBhbiBhcnJheSBvZiBkb2N1bWVudCBJRHMsIG9yIGFuIG9iamVjdCB3aXRoIGBxdWVyeWAgYW5kIG9wdGlvbmFsIGBwYXJhbXNgLCBkZWZpbmluZyB3aGljaCBkb2N1bWVudChzKSB0byBwYXRjaFxuICAgKiBAcGFyYW0gb3BlcmF0aW9ucyAtIE9wdGlvbmFsIG9iamVjdCBvZiBwYXRjaCBvcGVyYXRpb25zIHRvIGluaXRpYWxpemUgdGhlIHBhdGNoIGluc3RhbmNlIHdpdGhcbiAgICogQHJldHVybnMgUGF0Y2ggaW5zdGFuY2UgLSBjYWxsIGAuY29tbWl0KClgIHRvIHBlcmZvcm0gdGhlIG9wZXJhdGlvbnMgZGVmaW5lZFxuICAgKi9cbiAgcGF0Y2goc2VsZWN0aW9uLCBvcGVyYXRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlUGF0Y2goc2VsZWN0aW9uLCBvcGVyYXRpb25zLCB0aGlzKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHRyYW5zYWN0aW9uIG9mIG11dGF0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0gb3BlcmF0aW9ucyAtIE9wdGlvbmFsIGFycmF5IG9mIG11dGF0aW9uIG9wZXJhdGlvbnMgdG8gaW5pdGlhbGl6ZSB0aGUgdHJhbnNhY3Rpb24gaW5zdGFuY2Ugd2l0aFxuICAgKi9cbiAgdHJhbnNhY3Rpb24ob3BlcmF0aW9ucykge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZVRyYW5zYWN0aW9uKG9wZXJhdGlvbnMsIHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBQZXJmb3JtIGFjdGlvbiBvcGVyYXRpb25zIGFnYWluc3QgdGhlIGNvbmZpZ3VyZWQgZGF0YXNldFxuICAgKlxuICAgKiBAcGFyYW0gb3BlcmF0aW9ucyAtIEFjdGlvbiBvcGVyYXRpb24ocykgdG8gZXhlY3V0ZVxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFjdGlvbiBvcHRpb25zXG4gICAqL1xuICBhY3Rpb24ob3BlcmF0aW9ucywgb3B0aW9ucykge1xuICAgIHJldHVybiBfYWN0aW9uKHRoaXMsIHRoaXMuI2h0dHBSZXF1ZXN0LCBvcGVyYXRpb25zLCBvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogUGVyZm9ybSBhbiBIVFRQIHJlcXVlc3QgYWdhaW5zdCB0aGUgU2FuaXR5IEFQSVxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFJlcXVlc3Qgb3B0aW9uc1xuICAgKi9cbiAgcmVxdWVzdChvcHRpb25zKSB7XG4gICAgcmV0dXJuIF9yZXF1ZXN0KHRoaXMsIHRoaXMuI2h0dHBSZXF1ZXN0LCBvcHRpb25zKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGEgU2FuaXR5IEFQSSBVUkwgZm9yIHRoZSBVUkkgcHJvdmlkZWRcbiAgICpcbiAgICogQHBhcmFtIHVyaSAtIFVSSS9wYXRoIHRvIGJ1aWxkIFVSTCBmb3JcbiAgICogQHBhcmFtIGNhblVzZUNkbiAtIFdoZXRoZXIgb3Igbm90IHRvIGFsbG93IHVzaW5nIHRoZSBBUEkgQ0ROIGZvciB0aGlzIHJvdXRlXG4gICAqL1xuICBnZXRVcmwodXJpLCBjYW5Vc2VDZG4pIHtcbiAgICByZXR1cm4gX2dldFVybCh0aGlzLCB1cmksIGNhblVzZUNkbik7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIFNhbml0eSBBUEkgVVJMIGZvciB0aGUgZGF0YSBvcGVyYXRpb24gYW5kIHBhdGggcHJvdmlkZWRcbiAgICpcbiAgICogQHBhcmFtIG9wZXJhdGlvbiAtIERhdGEgb3BlcmF0aW9uIChlZyBgcXVlcnlgLCBgbXV0YXRlYCwgYGxpc3RlbmAgb3Igc2ltaWxhcilcbiAgICogQHBhcmFtIHBhdGggLSBQYXRoIHRvIGFwcGVuZCBhZnRlciB0aGUgb3BlcmF0aW9uXG4gICAqL1xuICBnZXREYXRhVXJsKG9wZXJhdGlvbiwgcGF0aCkge1xuICAgIHJldHVybiBfZ2V0RGF0YVVybCh0aGlzLCBvcGVyYXRpb24sIHBhdGgpO1xuICB9XG59XG5jbGFzcyBTYW5pdHlDbGllbnQge1xuICBhc3NldHM7XG4gIGRhdGFzZXRzO1xuICBsaXZlO1xuICBwcm9qZWN0cztcbiAgdXNlcnM7XG4gIC8qKlxuICAgKiBPYnNlcnZhYmxlIHZlcnNpb24gb2YgdGhlIFNhbml0eSBjbGllbnQsIHdpdGggdGhlIHNhbWUgY29uZmlndXJhdGlvbiBhcyB0aGUgcHJvbWlzZS1iYXNlZCBvbmVcbiAgICovXG4gIG9ic2VydmFibGU7XG4gIC8qKlxuICAgKiBQcml2YXRlIHByb3BlcnRpZXNcbiAgICovXG4gICNjbGllbnRDb25maWc7XG4gICNodHRwUmVxdWVzdDtcbiAgLyoqXG4gICAqIEluc3RhbmNlIHByb3BlcnRpZXNcbiAgICovXG4gIGxpc3RlbiA9IF9saXN0ZW47XG4gIGNvbnN0cnVjdG9yKGh0dHBSZXF1ZXN0LCBjb25maWcgPSBkZWZhdWx0Q29uZmlnKSB7XG4gICAgdGhpcy5jb25maWcoY29uZmlnKSwgdGhpcy4jaHR0cFJlcXVlc3QgPSBodHRwUmVxdWVzdCwgdGhpcy5hc3NldHMgPSBuZXcgQXNzZXRzQ2xpZW50KHRoaXMsIHRoaXMuI2h0dHBSZXF1ZXN0KSwgdGhpcy5kYXRhc2V0cyA9IG5ldyBEYXRhc2V0c0NsaWVudCh0aGlzLCB0aGlzLiNodHRwUmVxdWVzdCksIHRoaXMubGl2ZSA9IG5ldyBMaXZlQ2xpZW50KHRoaXMpLCB0aGlzLnByb2plY3RzID0gbmV3IFByb2plY3RzQ2xpZW50KHRoaXMsIHRoaXMuI2h0dHBSZXF1ZXN0KSwgdGhpcy51c2VycyA9IG5ldyBVc2Vyc0NsaWVudCh0aGlzLCB0aGlzLiNodHRwUmVxdWVzdCksIHRoaXMub2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlU2FuaXR5Q2xpZW50KGh0dHBSZXF1ZXN0LCBjb25maWcpO1xuICB9XG4gIC8qKlxuICAgKiBDbG9uZSB0aGUgY2xpZW50IC0gcmV0dXJucyBhIG5ldyBpbnN0YW5jZVxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBTYW5pdHlDbGllbnQodGhpcy4jaHR0cFJlcXVlc3QsIHRoaXMuY29uZmlnKCkpO1xuICB9XG4gIGNvbmZpZyhuZXdDb25maWcpIHtcbiAgICBpZiAobmV3Q29uZmlnID09PSB2b2lkIDApXG4gICAgICByZXR1cm4geyAuLi50aGlzLiNjbGllbnRDb25maWcgfTtcbiAgICBpZiAodGhpcy4jY2xpZW50Q29uZmlnICYmIHRoaXMuI2NsaWVudENvbmZpZy5hbGxvd1JlY29uZmlndXJlID09PSAhMSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgXCJFeGlzdGluZyBjbGllbnQgaW5zdGFuY2UgY2Fubm90IGJlIHJlY29uZmlndXJlZCAtIHVzZSBgd2l0aENvbmZpZyhuZXdDb25maWcpYCB0byByZXR1cm4gYSBuZXcgY2xpZW50XCJcbiAgICAgICk7XG4gICAgcmV0dXJuIHRoaXMub2JzZXJ2YWJsZSAmJiB0aGlzLm9ic2VydmFibGUuY29uZmlnKG5ld0NvbmZpZyksIHRoaXMuI2NsaWVudENvbmZpZyA9IGluaXRDb25maWcobmV3Q29uZmlnLCB0aGlzLiNjbGllbnRDb25maWcgfHwge30pLCB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBDbG9uZSB0aGUgY2xpZW50IHdpdGggYSBuZXcgKHBhcnRpYWwpIGNvbmZpZ3VyYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSBuZXdDb25maWcgLSBOZXcgY2xpZW50IGNvbmZpZ3VyYXRpb24gcHJvcGVydGllcywgc2hhbGxvd2x5IG1lcmdlZCB3aXRoIGV4aXN0aW5nIGNvbmZpZ3VyYXRpb25cbiAgICovXG4gIHdpdGhDb25maWcobmV3Q29uZmlnKSB7XG4gICAgY29uc3QgdGhpc0NvbmZpZyA9IHRoaXMuY29uZmlnKCk7XG4gICAgcmV0dXJuIG5ldyBTYW5pdHlDbGllbnQodGhpcy4jaHR0cFJlcXVlc3QsIHtcbiAgICAgIC4uLnRoaXNDb25maWcsXG4gICAgICAuLi5uZXdDb25maWcsXG4gICAgICBzdGVnYToge1xuICAgICAgICAuLi50aGlzQ29uZmlnLnN0ZWdhIHx8IHt9LFxuICAgICAgICAuLi50eXBlb2YgbmV3Q29uZmlnPy5zdGVnYSA9PSBcImJvb2xlYW5cIiA/IHsgZW5hYmxlZDogbmV3Q29uZmlnLnN0ZWdhIH0gOiBuZXdDb25maWc/LnN0ZWdhIHx8IHt9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZmV0Y2gocXVlcnksIHBhcmFtcywgb3B0aW9ucykge1xuICAgIHJldHVybiBsYXN0VmFsdWVGcm9tKFxuICAgICAgX2ZldGNoKFxuICAgICAgICB0aGlzLFxuICAgICAgICB0aGlzLiNodHRwUmVxdWVzdCxcbiAgICAgICAgdGhpcy4jY2xpZW50Q29uZmlnLnN0ZWdhLFxuICAgICAgICBxdWVyeSxcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBvcHRpb25zXG4gICAgICApXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogRmV0Y2ggYSBzaW5nbGUgZG9jdW1lbnQgd2l0aCB0aGUgZ2l2ZW4gSUQuXG4gICAqXG4gICAqIEBwYXJhbSBpZCAtIERvY3VtZW50IElEIHRvIGZldGNoXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gUmVxdWVzdCBvcHRpb25zXG4gICAqL1xuICBnZXREb2N1bWVudChpZCwgb3B0aW9ucykge1xuICAgIHJldHVybiBsYXN0VmFsdWVGcm9tKF9nZXREb2N1bWVudCh0aGlzLCB0aGlzLiNodHRwUmVxdWVzdCwgaWQsIG9wdGlvbnMpKTtcbiAgfVxuICAvKipcbiAgICogRmV0Y2ggbXVsdGlwbGUgZG9jdW1lbnRzIGluIG9uZSByZXF1ZXN0LlxuICAgKiBTaG91bGQgYmUgdXNlZCBzcGFyaW5nbHkgLSBwZXJmb3JtaW5nIGEgcXVlcnkgaXMgdXN1YWxseSBhIGJldHRlciBvcHRpb24uXG4gICAqIFRoZSBvcmRlci9wb3NpdGlvbiBvZiBkb2N1bWVudHMgaXMgcHJlc2VydmVkIGJhc2VkIG9uIHRoZSBvcmlnaW5hbCBhcnJheSBvZiBJRHMuXG4gICAqIElmIGFueSBvZiB0aGUgZG9jdW1lbnRzIGFyZSBtaXNzaW5nLCB0aGV5IHdpbGwgYmUgcmVwbGFjZWQgYnkgYSBgbnVsbGAgZW50cnkgaW4gdGhlIHJldHVybmVkIGFycmF5XG4gICAqXG4gICAqIEBwYXJhbSBpZHMgLSBEb2N1bWVudCBJRHMgdG8gZmV0Y2hcbiAgICogQHBhcmFtIG9wdGlvbnMgLSBSZXF1ZXN0IG9wdGlvbnNcbiAgICovXG4gIGdldERvY3VtZW50cyhpZHMsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbGFzdFZhbHVlRnJvbShfZ2V0RG9jdW1lbnRzKHRoaXMsIHRoaXMuI2h0dHBSZXF1ZXN0LCBpZHMsIG9wdGlvbnMpKTtcbiAgfVxuICBjcmVhdGUoZG9jdW1lbnQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbGFzdFZhbHVlRnJvbShcbiAgICAgIF9jcmVhdGUodGhpcywgdGhpcy4jaHR0cFJlcXVlc3QsIGRvY3VtZW50LCBcImNyZWF0ZVwiLCBvcHRpb25zKVxuICAgICk7XG4gIH1cbiAgY3JlYXRlSWZOb3RFeGlzdHMoZG9jdW1lbnQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbGFzdFZhbHVlRnJvbShcbiAgICAgIF9jcmVhdGVJZk5vdEV4aXN0cyh0aGlzLCB0aGlzLiNodHRwUmVxdWVzdCwgZG9jdW1lbnQsIG9wdGlvbnMpXG4gICAgKTtcbiAgfVxuICBjcmVhdGVPclJlcGxhY2UoZG9jdW1lbnQsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbGFzdFZhbHVlRnJvbShcbiAgICAgIF9jcmVhdGVPclJlcGxhY2UodGhpcywgdGhpcy4jaHR0cFJlcXVlc3QsIGRvY3VtZW50LCBvcHRpb25zKVxuICAgICk7XG4gIH1cbiAgZGVsZXRlKHNlbGVjdGlvbiwgb3B0aW9ucykge1xuICAgIHJldHVybiBsYXN0VmFsdWVGcm9tKF9kZWxldGUodGhpcywgdGhpcy4jaHR0cFJlcXVlc3QsIHNlbGVjdGlvbiwgb3B0aW9ucykpO1xuICB9XG4gIG11dGF0ZShvcGVyYXRpb25zLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIGxhc3RWYWx1ZUZyb20oX211dGF0ZSh0aGlzLCB0aGlzLiNodHRwUmVxdWVzdCwgb3BlcmF0aW9ucywgb3B0aW9ucykpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgYnVpbGRhYmxlIHBhdGNoIG9mIG9wZXJhdGlvbnMgdG8gcGVyZm9ybVxuICAgKlxuICAgKiBAcGFyYW0gc2VsZWN0aW9uIC0gRG9jdW1lbnQgSUQsIGFuIGFycmF5IG9mIGRvY3VtZW50IElEcywgb3IgYW4gb2JqZWN0IHdpdGggYHF1ZXJ5YCBhbmQgb3B0aW9uYWwgYHBhcmFtc2AsIGRlZmluaW5nIHdoaWNoIGRvY3VtZW50KHMpIHRvIHBhdGNoXG4gICAqIEBwYXJhbSBvcGVyYXRpb25zIC0gT3B0aW9uYWwgb2JqZWN0IG9mIHBhdGNoIG9wZXJhdGlvbnMgdG8gaW5pdGlhbGl6ZSB0aGUgcGF0Y2ggaW5zdGFuY2Ugd2l0aFxuICAgKiBAcmV0dXJucyBQYXRjaCBpbnN0YW5jZSAtIGNhbGwgYC5jb21taXQoKWAgdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9ucyBkZWZpbmVkXG4gICAqL1xuICBwYXRjaChkb2N1bWVudElkLCBvcGVyYXRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBQYXRjaChkb2N1bWVudElkLCBvcGVyYXRpb25zLCB0aGlzKTtcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHRyYW5zYWN0aW9uIG9mIG11dGF0aW9uc1xuICAgKlxuICAgKiBAcGFyYW0gb3BlcmF0aW9ucyAtIE9wdGlvbmFsIGFycmF5IG9mIG11dGF0aW9uIG9wZXJhdGlvbnMgdG8gaW5pdGlhbGl6ZSB0aGUgdHJhbnNhY3Rpb24gaW5zdGFuY2Ugd2l0aFxuICAgKi9cbiAgdHJhbnNhY3Rpb24ob3BlcmF0aW9ucykge1xuICAgIHJldHVybiBuZXcgVHJhbnNhY3Rpb24ob3BlcmF0aW9ucywgdGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIFBlcmZvcm0gYWN0aW9uIG9wZXJhdGlvbnMgYWdhaW5zdCB0aGUgY29uZmlndXJlZCBkYXRhc2V0XG4gICAqIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIHRyYW5zYWN0aW9uIHJlc3VsdFxuICAgKlxuICAgKiBAcGFyYW0gb3BlcmF0aW9ucyAtIEFjdGlvbiBvcGVyYXRpb24ocykgdG8gZXhlY3V0ZVxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIEFjdGlvbiBvcHRpb25zXG4gICAqL1xuICBhY3Rpb24ob3BlcmF0aW9ucywgb3B0aW9ucykge1xuICAgIHJldHVybiBsYXN0VmFsdWVGcm9tKF9hY3Rpb24odGhpcywgdGhpcy4jaHR0cFJlcXVlc3QsIG9wZXJhdGlvbnMsIG9wdGlvbnMpKTtcbiAgfVxuICAvKipcbiAgICogUGVyZm9ybSBhIHJlcXVlc3QgYWdhaW5zdCB0aGUgU2FuaXR5IEFQSVxuICAgKiBOT1RFOiBPbmx5IHVzZSB0aGlzIGZvciBTYW5pdHkgQVBJIGVuZHBvaW50cywgbm90IGZvciB5b3VyIG93biBBUElzIVxuICAgKlxuICAgKiBAcGFyYW0gb3B0aW9ucyAtIFJlcXVlc3Qgb3B0aW9uc1xuICAgKiBAcmV0dXJucyBQcm9taXNlIHJlc29sdmluZyB0byB0aGUgcmVzcG9uc2UgYm9keVxuICAgKi9cbiAgcmVxdWVzdChvcHRpb25zKSB7XG4gICAgcmV0dXJuIGxhc3RWYWx1ZUZyb20oX3JlcXVlc3QodGhpcywgdGhpcy4jaHR0cFJlcXVlc3QsIG9wdGlvbnMpKTtcbiAgfVxuICAvKipcbiAgICogUGVyZm9ybSBhbiBIVFRQIHJlcXVlc3QgYSBgL2RhdGFgIHN1Yi1lbmRwb2ludFxuICAgKiBOT1RFOiBDb25zaWRlcmVkIGludGVybmFsLCB0aHVzIG1hcmtlZCBhcyBkZXByZWNhdGVkLiBVc2UgYHJlcXVlc3RgIGluc3RlYWQuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIC0gVXNlIGByZXF1ZXN0KClgIG9yIHlvdXIgb3duIEhUVFAgbGlicmFyeSBpbnN0ZWFkXG4gICAqIEBwYXJhbSBlbmRwb2ludCAtIEVuZHBvaW50IHRvIGhpdCAobXV0YXRlLCBxdWVyeSBldGMpXG4gICAqIEBwYXJhbSBib2R5IC0gUmVxdWVzdCBib2R5XG4gICAqIEBwYXJhbSBvcHRpb25zIC0gUmVxdWVzdCBvcHRpb25zXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZGF0YVJlcXVlc3QoZW5kcG9pbnQsIGJvZHksIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbGFzdFZhbHVlRnJvbShfZGF0YVJlcXVlc3QodGhpcywgdGhpcy4jaHR0cFJlcXVlc3QsIGVuZHBvaW50LCBib2R5LCBvcHRpb25zKSk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBhIFNhbml0eSBBUEkgVVJMIGZvciB0aGUgVVJJIHByb3ZpZGVkXG4gICAqXG4gICAqIEBwYXJhbSB1cmkgLSBVUkkvcGF0aCB0byBidWlsZCBVUkwgZm9yXG4gICAqIEBwYXJhbSBjYW5Vc2VDZG4gLSBXaGV0aGVyIG9yIG5vdCB0byBhbGxvdyB1c2luZyB0aGUgQVBJIENETiBmb3IgdGhpcyByb3V0ZVxuICAgKi9cbiAgZ2V0VXJsKHVyaSwgY2FuVXNlQ2RuKSB7XG4gICAgcmV0dXJuIF9nZXRVcmwodGhpcywgdXJpLCBjYW5Vc2VDZG4pO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgYSBTYW5pdHkgQVBJIFVSTCBmb3IgdGhlIGRhdGEgb3BlcmF0aW9uIGFuZCBwYXRoIHByb3ZpZGVkXG4gICAqXG4gICAqIEBwYXJhbSBvcGVyYXRpb24gLSBEYXRhIG9wZXJhdGlvbiAoZWcgYHF1ZXJ5YCwgYG11dGF0ZWAsIGBsaXN0ZW5gIG9yIHNpbWlsYXIpXG4gICAqIEBwYXJhbSBwYXRoIC0gUGF0aCB0byBhcHBlbmQgYWZ0ZXIgdGhlIG9wZXJhdGlvblxuICAgKi9cbiAgZ2V0RGF0YVVybChvcGVyYXRpb24sIHBhdGgpIHtcbiAgICByZXR1cm4gX2dldERhdGFVcmwodGhpcywgb3BlcmF0aW9uLCBwYXRoKTtcbiAgfVxufVxuZnVuY3Rpb24gZGVmaW5lQ3JlYXRlQ2xpZW50RXhwb3J0cyhlbnZNaWRkbGV3YXJlLCBDbGFzc0NvbnN0cnVjdG9yKSB7XG4gIHJldHVybiB7IHJlcXVlc3RlcjogZGVmaW5lSHR0cFJlcXVlc3QoZW52TWlkZGxld2FyZSksIGNyZWF0ZUNsaWVudDogKGNvbmZpZykgPT4ge1xuICAgIGNvbnN0IGNsaWVudFJlcXVlc3RlciA9IGRlZmluZUh0dHBSZXF1ZXN0KGVudk1pZGRsZXdhcmUpO1xuICAgIHJldHVybiBuZXcgQ2xhc3NDb25zdHJ1Y3RvcihcbiAgICAgIChvcHRpb25zLCByZXF1ZXN0ZXIyKSA9PiAocmVxdWVzdGVyMiB8fCBjbGllbnRSZXF1ZXN0ZXIpKHtcbiAgICAgICAgbWF4UmVkaXJlY3RzOiAwLFxuICAgICAgICBtYXhSZXRyaWVzOiBjb25maWcubWF4UmV0cmllcyxcbiAgICAgICAgcmV0cnlEZWxheTogY29uZmlnLnJldHJ5RGVsYXksXG4gICAgICAgIC4uLm9wdGlvbnNcbiAgICAgIH0pLFxuICAgICAgY29uZmlnXG4gICAgKTtcbiAgfSB9O1xufVxuZnVuY3Rpb24gZGVmaW5lRGVwcmVjYXRlZENyZWF0ZUNsaWVudChjcmVhdGVDbGllbnQyKSB7XG4gIHJldHVybiBmdW5jdGlvbihjb25maWcpIHtcbiAgICByZXR1cm4gcHJpbnROb0RlZmF1bHRFeHBvcnQoKSwgY3JlYXRlQ2xpZW50Mihjb25maWcpO1xuICB9O1xufVxudmFyIG5hbWUgPSBcIkBzYW5pdHkvY2xpZW50XCIsIHZlcnNpb24gPSBcIjYuMjguNFwiO1xuY29uc3QgbWlkZGxld2FyZSA9IFtcbiAgZGVidWcoeyB2ZXJib3NlOiAhMCwgbmFtZXNwYWNlOiBcInNhbml0eTpjbGllbnRcIiB9KSxcbiAgaGVhZGVycyh7IFwiVXNlci1BZ2VudFwiOiBgJHtuYW1lfSAke3ZlcnNpb259YCB9KSxcbiAgLy8gRW5hYmxlIGtlZXAtYWxpdmUsIGFuZCBpbiBhZGRpdGlvbiBsaW1pdCB0aGUgbnVtYmVyIG9mIHNvY2tldHMgdGhhdCBjYW4gYmUgb3BlbmVkLlxuICAvLyBUaGlzIGF2b2lkcyBvcGVuaW5nIHRvbyBtYW55IGNvbm5lY3Rpb25zIHRvIHRoZSBzZXJ2ZXIgaWYgc29tZW9uZSB0cmllcyB0byBleGVjdXRlXG4gIC8vIGEgYnVuY2ggb2YgcmVxdWVzdHMgaW4gcGFyYWxsZWwuIEl0J3MgcmVjb21tZW5kZWQgdG8gaGF2ZSBhIGNvbmN1cnJlbmN5IGxpbWl0XG4gIC8vIGF0IGEgXCJoaWdoZXIgbGltaXRcIiAoaS5lLiB5b3Ugc2hvdWxkbid0IGFjdHVhbGx5IGV4ZWN1dGUgaHVuZHJlZHMgb2YgcmVxdWVzdHMgaW4gcGFyYWxsZWwpLFxuICAvLyBhbmQgdGhpcyBpcyBtYWlubHkgdG8gbWluaW1pemUgdGhlIGltcGFjdCBmb3IgdGhlIG5ldHdvcmsgYW5kIHNlcnZlci5cbiAgLy9cbiAgLy8gV2UncmUgY3VycmVudGx5IG1hdGNoaW5nIHRoZSBzYW1lIGRlZmF1bHRzIGFzIGJyb3dzZXJzOlxuICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yNjAwMzc1Ni9pcy10aGVyZS1hLWxpbWl0LXByYWN0aWNhbC1vci1vdGhlcndpc2UtdG8tdGhlLW51bWJlci1vZi13ZWItc29ja2V0cy1hLXBhZ2Utb3BcbiAgYWdlbnQoe1xuICAgIGtlZXBBbGl2ZTogITAsXG4gICAgbWF4U29ja2V0czogMzAsXG4gICAgbWF4VG90YWxTb2NrZXRzOiAyNTZcbiAgfSlcbl0sIGV4cCA9IGRlZmluZUNyZWF0ZUNsaWVudEV4cG9ydHMobWlkZGxld2FyZSwgU2FuaXR5Q2xpZW50KSwgcmVxdWVzdGVyID0gZXhwLnJlcXVlc3RlciwgY3JlYXRlQ2xpZW50ID0gZXhwLmNyZWF0ZUNsaWVudCwgZGVwcmVjYXRlZENyZWF0ZUNsaWVudCA9IGRlZmluZURlcHJlY2F0ZWRDcmVhdGVDbGllbnQoY3JlYXRlQ2xpZW50KTtcbmV4cG9ydCB7XG4gIEJhc2VQYXRjaCxcbiAgQmFzZVRyYW5zYWN0aW9uLFxuICBDaGFubmVsRXJyb3IsXG4gIENsaWVudEVycm9yLFxuICBDb25uZWN0aW9uRmFpbGVkRXJyb3IsXG4gIENvcnNPcmlnaW5FcnJvcixcbiAgRGlzY29ubmVjdEVycm9yLFxuICBNZXNzYWdlRXJyb3IsXG4gIE1lc3NhZ2VQYXJzZUVycm9yLFxuICBPYnNlcnZhYmxlUGF0Y2gsXG4gIE9ic2VydmFibGVTYW5pdHlDbGllbnQsXG4gIE9ic2VydmFibGVUcmFuc2FjdGlvbixcbiAgUGF0Y2gsXG4gIFNhbml0eUNsaWVudCxcbiAgU2VydmVyRXJyb3IsXG4gIFRyYW5zYWN0aW9uLFxuICBjb25uZWN0RXZlbnRTb3VyY2UsXG4gIGNyZWF0ZUNsaWVudCxcbiAgZGVwcmVjYXRlZENyZWF0ZUNsaWVudCBhcyBkZWZhdWx0LFxuICByZXF1ZXN0ZXIsXG4gIGFkYXB0ZXIgYXMgdW5zdGFibGVfX2FkYXB0ZXIsXG4gIGVudmlyb25tZW50IGFzIHVuc3RhYmxlX19lbnZpcm9ubWVudCxcbiAgdmFsaWRhdGVBcGlQZXJzcGVjdGl2ZVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/.pnpm/@sanity+client@6.28.4_debug@4.4.0/node_modules/@sanity/client/dist/index.js\n");

/***/ })

};
;